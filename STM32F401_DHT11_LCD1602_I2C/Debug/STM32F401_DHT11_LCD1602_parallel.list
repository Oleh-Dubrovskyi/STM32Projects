
STM32F401_DHT11_LCD1602_parallel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007d48  08007d48  00008d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  0000a22c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  0000a22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800826c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000022c  08008498  0000a22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08008498  0000a42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a420  00000000  00000000  0000a25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7e  00000000  00000000  0001467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00016500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000904  00000000  00000000  000170d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001758a  00000000  00000000  000179dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf2e  00000000  00000000  0002ef66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6ac  00000000  00000000  0003be94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  000c9584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000cdb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d2c 	.word	0x08007d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	08007d2c 	.word	0x08007d2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b0d4      	sub	sp, #336	@ 0x150
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fecf 	bl	8001dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f9c5 	bl	80013c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Initialize TIM2 to use for micro-delays
  TIM2MicrosecondsDelayInit();
 800103e:	f000 fc6f 	bl	8001920 <TIM2MicrosecondsDelayInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 fa6d 	bl	8001520 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001046:	f000 fa1f 	bl	8001488 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    char message1[100];
    char message2[100];

    strcpy(message1,  " *** STM32 ***  ");
 800104a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800104e:	4ad0      	ldr	r2, [pc, #832]	@ (8001390 <main+0x360>)
 8001050:	461c      	mov	r4, r3
 8001052:	4615      	mov	r5, r2
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	7023      	strb	r3, [r4, #0]
    strcpy(message2, " DH11 connected ");
 800105c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001060:	4acc      	ldr	r2, [pc, #816]	@ (8001394 <main+0x364>)
 8001062:	461c      	mov	r4, r3
 8001064:	4615      	mov	r5, r2
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	7023      	strb	r3, [r4, #0]

    // Configure data line pin for the DHT11
    DTH11GpioDataLine data_line = {GPIOA, GPIO_PIN_0};
 800106e:	4aca      	ldr	r2, [pc, #808]	@ (8001398 <main+0x368>)
 8001070:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001078:	e883 0003 	stmia.w	r3, {r0, r1}
    Dht11ConfigureDataLine(data_line);
 800107c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001084:	f000 fcb6 	bl	80019f4 <Dht11ConfigureDataLine>

    // Set Data Bus Size for 4-bit mode
    Lcd1602SetDataBusSize(LCD1602_DATA_BUS_SIZE4);
 8001088:	2004      	movs	r0, #4
 800108a:	f002 f977 	bl	800337c <Lcd1602SetDataBusSize>
    // Define Data bus pins for 4-bit mode
	GpioItem lcd1602_gpio_data_bus[] =
 800108e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001092:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001096:	4ac1      	ldr	r2, [pc, #772]	@ (800139c <main+0x36c>)
 8001098:	461c      	mov	r4, r3
 800109a:	4615      	mov	r5, r2
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {NULL, 0},
        {NULL, 0},
        {NULL, 0}
    };
    // Define Enable signal pin for 4-bit mode
    GpioItem enable_signal = {GPIOB, GPIO_PIN_4};
 80010b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80010b8:	4ab9      	ldr	r2, [pc, #740]	@ (80013a0 <main+0x370>)
 80010ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010be:	e883 0003 	stmia.w	r3, {r0, r1}
    // Define Register selection pin for 4-bit mode
    GpioItem register_selection = {GPIOB, GPIO_PIN_5};
 80010c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010ca:	4ab6      	ldr	r2, [pc, #728]	@ (80013a4 <main+0x374>)
 80010cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d0:	e883 0003 	stmia.w	r3, {r0, r1}
    // Configure 4-bit mode
    Lcd1602Configure4Bits(lcd1602_gpio_data_bus, enable_signal, register_selection);
 80010d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010dc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80010e0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80010e4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80010e8:	6859      	ldr	r1, [r3, #4]
 80010ea:	9100      	str	r1, [sp, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	ca06      	ldmia	r2, {r1, r2}
 80010f0:	f002 f8e8 	bl	80032c4 <Lcd1602Configure4Bits>

    Lcd1602ScreenClear();
 80010f4:	f002 fa5e 	bl	80035b4 <Lcd1602ScreenClear>
    Lcd1602SetCursor(0, 1);
 80010f8:	2101      	movs	r1, #1
 80010fa:	2000      	movs	r0, #0
 80010fc:	f002 fa68 	bl	80035d0 <Lcd1602SetCursor>
    Lcd1602WriteString(message1);
 8001100:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fa87 	bl	8003618 <Lcd1602WriteString>
    Lcd1602SetCursor(1, 0);
 800110a:	2100      	movs	r1, #0
 800110c:	2001      	movs	r0, #1
 800110e:	f002 fa5f 	bl	80035d0 <Lcd1602SetCursor>
    Lcd1602WriteString(message2);
 8001112:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fa7e 	bl	8003618 <Lcd1602WriteString>

    TIM2MillisecondsDelay(3000);
 800111c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001120:	f000 fc54 	bl	80019cc <TIM2MillisecondsDelay>
  /* USER CODE BEGIN WHILE */

    while (1)
    {
        // Send a request to the DHT11 sensor
        Dht11SendRequest();
 8001124:	f000 fc7a 	bl	8001a1c <Dht11SendRequest>

        // Get a response from the DHT11 sensor
        if (Dht11GetResponse())
 8001128:	f000 fd3c 	bl	8001ba4 <Dht11GetResponse>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8101 	beq.w	8001336 <main+0x306>
	    {
        	// Get responsed bytes
        	uint8_t rh_byte1 = 0;
 8001134:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001138:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
        	uint8_t rh_byte2 = 0;
 8001140:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001144:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
        	uint8_t temp_byte1 = 0;
 800114c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001150:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
        	uint8_t temp_byte2 = 0;
 8001158:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800115c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
        	uint8_t sum = 0;
 8001164:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001168:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
        	uint8_t crc = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

        	Dht11GetResponsedBytes(&rh_byte1, &rh_byte2, &temp_byte1, &temp_byte2, &sum);
 8001176:	f107 0418 	add.w	r4, r7, #24
 800117a:	f107 0219 	add.w	r2, r7, #25
 800117e:	f107 011a 	add.w	r1, r7, #26
 8001182:	f107 001b 	add.w	r0, r7, #27
 8001186:	f107 0317 	add.w	r3, r7, #23
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4623      	mov	r3, r4
 800118e:	f000 fd75 	bl	8001c7c <Dht11GetResponsedBytes>
        	crc = rh_byte1 + rh_byte2 + temp_byte1 + temp_byte2;
 8001192:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001196:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011a0:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011ae:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

        	if (crc == sum)
 80011c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011cc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 80011d6:	429a      	cmp	r2, r3
 80011d8:	f040 8084 	bne.w	80012e4 <main+0x2b4>
        	{
                float humidity = (float)(rh_byte1) + (float)(rh_byte2)/10.0;
 80011dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011e0:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f9b1 	bl	8000558 <__aeabi_f2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011fe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff f9a2 	bl	8000558 <__aeabi_f2d>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <main+0x378>)
 800121a:	f7ff fb1f 	bl	800085c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff f839 	bl	800029c <__adddf3>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fce1 	bl	8000bf8 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            	float temperature = (float)(temp_byte1) + (float)(temp_byte2)/DHT11_SCALE;
 800123c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001240:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800124e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001252:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001260:	4b52      	ldr	r3, [pc, #328]	@ (80013ac <main+0x37c>)
 8001262:	edd3 6a00 	vldr	s13, [r3]
 8001266:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
            	char temperature_str[10];
                char humidity_str[10];

	            sprintf(temperature_str, "Tc = %2.1Lf", (long double)temperature);
 8001272:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001276:	f7ff f96f 	bl	8000558 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	f107 000c 	add.w	r0, r7, #12
 8001282:	494b      	ldr	r1, [pc, #300]	@ (80013b0 <main+0x380>)
 8001284:	f003 f90a 	bl	800449c <siprintf>
	            sprintf(humidity_str, "Rh = %2.1Lf", (long double)humidity);
 8001288:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 800128c:	f7ff f964 	bl	8000558 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4638      	mov	r0, r7
 8001296:	4947      	ldr	r1, [pc, #284]	@ (80013b4 <main+0x384>)
 8001298:	f003 f900 	bl	800449c <siprintf>

	            strcpy(message1, temperature_str);
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 f9dd 	bl	8004666 <strcpy>
	            strcpy(message2, humidity_str);
 80012ac:	463a      	mov	r2, r7
 80012ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 f9d6 	bl	8004666 <strcpy>
	            Lcd1602ScreenClear();
 80012ba:	f002 f97b 	bl	80035b4 <Lcd1602ScreenClear>
	            Lcd1602SetCursor(0, 4);
 80012be:	2104      	movs	r1, #4
 80012c0:	2000      	movs	r0, #0
 80012c2:	f002 f985 	bl	80035d0 <Lcd1602SetCursor>
	            Lcd1602WriteString(message1);
 80012c6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 f9a4 	bl	8003618 <Lcd1602WriteString>
	            Lcd1602SetCursor(1, 4);
 80012d0:	2104      	movs	r1, #4
 80012d2:	2001      	movs	r0, #1
 80012d4:	f002 f97c 	bl	80035d0 <Lcd1602SetCursor>
	            Lcd1602WriteString(message2);
 80012d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f99b 	bl	8003618 <Lcd1602WriteString>
 80012e2:	e04f      	b.n	8001384 <main+0x354>
        	}
        	else
        	{
	            sprintf(message1, "*** CRC = %u", crc);
 80012e4:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 80012e8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80012ec:	4932      	ldr	r1, [pc, #200]	@ (80013b8 <main+0x388>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 f8d4 	bl	800449c <siprintf>
	            sprintf(message2, "*** SUM = %u", sum);
 80012f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80012f8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001304:	492d      	ldr	r1, [pc, #180]	@ (80013bc <main+0x38c>)
 8001306:	4618      	mov	r0, r3
 8001308:	f003 f8c8 	bl	800449c <siprintf>
	            Lcd1602ScreenClear();
 800130c:	f002 f952 	bl	80035b4 <Lcd1602ScreenClear>
	            Lcd1602SetCursor(0, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	2000      	movs	r0, #0
 8001314:	f002 f95c 	bl	80035d0 <Lcd1602SetCursor>
	            Lcd1602WriteString(message1);
 8001318:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f97b 	bl	8003618 <Lcd1602WriteString>
	            Lcd1602SetCursor(1, 0);
 8001322:	2100      	movs	r1, #0
 8001324:	2001      	movs	r0, #1
 8001326:	f002 f953 	bl	80035d0 <Lcd1602SetCursor>
	            Lcd1602WriteString(message2);
 800132a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800132e:	4618      	mov	r0, r3
 8001330:	f002 f972 	bl	8003618 <Lcd1602WriteString>
 8001334:	e026      	b.n	8001384 <main+0x354>
        	}
      }
	  else
	  {
          strcpy(message1, "*** Sensor ***");
 8001336:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800133a:	4a21      	ldr	r2, [pc, #132]	@ (80013c0 <main+0x390>)
 800133c:	461c      	mov	r4, r3
 800133e:	4613      	mov	r3, r2
 8001340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001342:	c407      	stmia	r4!, {r0, r1, r2}
 8001344:	8023      	strh	r3, [r4, #0]
 8001346:	3402      	adds	r4, #2
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	7023      	strb	r3, [r4, #0]
          strcpy(message2, "*** Error ***");
 800134c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001350:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <main+0x394>)
 8001352:	461c      	mov	r4, r3
 8001354:	4613      	mov	r3, r2
 8001356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001358:	c407      	stmia	r4!, {r0, r1, r2}
 800135a:	8023      	strh	r3, [r4, #0]
          Lcd1602ScreenClear();
 800135c:	f002 f92a 	bl	80035b4 <Lcd1602ScreenClear>
          Lcd1602SetCursor(0, 4);
 8001360:	2104      	movs	r1, #4
 8001362:	2000      	movs	r0, #0
 8001364:	f002 f934 	bl	80035d0 <Lcd1602SetCursor>
          Lcd1602WriteString(message1);
 8001368:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800136c:	4618      	mov	r0, r3
 800136e:	f002 f953 	bl	8003618 <Lcd1602WriteString>
          Lcd1602SetCursor(1, 4);
 8001372:	2104      	movs	r1, #4
 8001374:	2001      	movs	r0, #1
 8001376:	f002 f92b 	bl	80035d0 <Lcd1602SetCursor>
          Lcd1602WriteString(message2);
 800137a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800137e:	4618      	mov	r0, r3
 8001380:	f002 f94a 	bl	8003618 <Lcd1602WriteString>
	  }

        TIM2MillisecondsDelay(2000);
 8001384:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001388:	f000 fb20 	bl	80019cc <TIM2MillisecondsDelay>
        Dht11SendRequest();
 800138c:	e6ca      	b.n	8001124 <main+0xf4>
 800138e:	bf00      	nop
 8001390:	08007d48 	.word	0x08007d48
 8001394:	08007d5c 	.word	0x08007d5c
 8001398:	08007dc8 	.word	0x08007dc8
 800139c:	08007dd0 	.word	0x08007dd0
 80013a0:	08007e10 	.word	0x08007e10
 80013a4:	08007e18 	.word	0x08007e18
 80013a8:	40240000 	.word	0x40240000
 80013ac:	08007e30 	.word	0x08007e30
 80013b0:	08007d70 	.word	0x08007d70
 80013b4:	08007d7c 	.word	0x08007d7c
 80013b8:	08007d88 	.word	0x08007d88
 80013bc:	08007d98 	.word	0x08007d98
 80013c0:	08007da8 	.word	0x08007da8
 80013c4:	08007db8 	.word	0x08007db8

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	@ 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2230      	movs	r2, #48	@ 0x30
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f8c5 	bl	8004566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <SystemClock_Config+0xb8>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <SystemClock_Config+0xb8>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <SystemClock_Config+0xb8>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <SystemClock_Config+0xbc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001414:	4a1b      	ldr	r2, [pc, #108]	@ (8001484 <SystemClock_Config+0xbc>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <SystemClock_Config+0xbc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fffd 	bl	800243c <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001448:	f000 f8ea 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
 800144e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fa60 	bl	800292c <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001472:	f000 f8d5 	bl	8001620 <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3750      	adds	r7, #80	@ 0x50
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_TIM2_Init+0x94>)
 80014a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ae:	220f      	movs	r2, #15
 80014b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_TIM2_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_TIM2_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_TIM2_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014cc:	4813      	ldr	r0, [pc, #76]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ce:	f001 fbd9 	bl	8002c84 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014d8:	f000 f8a2 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_TIM2_Init+0x94>)
 80014ea:	f001 fc75 	bl	8002dd8 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014f4:	f000 f894 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_TIM2_Init+0x94>)
 8001506:	f001 fe4f 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001510:	f000 f886 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000248 	.word	0x20000248

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <MX_GPIO_Init+0xf0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a2d      	ldr	r2, [pc, #180]	@ (8001610 <MX_GPIO_Init+0xf0>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a26      	ldr	r2, [pc, #152]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <MX_GPIO_Init+0xf0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2101      	movs	r1, #1
 800158e:	4821      	ldr	r0, [pc, #132]	@ (8001614 <MX_GPIO_Init+0xf4>)
 8001590:	f000 ff3a 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	21c0      	movs	r1, #192	@ 0xc0
 8001598:	481e      	ldr	r0, [pc, #120]	@ (8001614 <MX_GPIO_Init+0xf4>)
 800159a:	f000 ff35 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2180      	movs	r1, #128	@ 0x80
 80015a2:	481d      	ldr	r0, [pc, #116]	@ (8001618 <MX_GPIO_Init+0xf8>)
 80015a4:	f000 ff30 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2170      	movs	r1, #112	@ 0x70
 80015ac:	481b      	ldr	r0, [pc, #108]	@ (800161c <MX_GPIO_Init+0xfc>)
 80015ae:	f000 ff2b 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80015b2:	23c1      	movs	r3, #193	@ 0xc1
 80015b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	4812      	ldr	r0, [pc, #72]	@ (8001614 <MX_GPIO_Init+0xf4>)
 80015ca:	f000 fd81 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <MX_GPIO_Init+0xf8>)
 80015e6:	f000 fd73 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015ea:	2370      	movs	r3, #112	@ 0x70
 80015ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	4806      	ldr	r0, [pc, #24]	@ (800161c <MX_GPIO_Init+0xfc>)
 8001602:	f000 fd65 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020800 	.word	0x40020800
 800161c:	40020400 	.word	0x40020400

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <Error_Handler+0x8>

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <HAL_MspInit+0x4c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001640:	6453      	str	r3, [r2, #68]	@ 0x44
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <HAL_MspInit+0x4c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800168c:	d10d      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_TIM_Base_MspInit+0x3c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <NMI_Handler+0x4>

080016c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <MemManage_Handler+0x4>

080016d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001712:	f000 fbb3 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}

0800171a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_kill>:

int _kill(int pid, int sig)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001734:	f002 ff6a 	bl	800460c <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	2216      	movs	r2, #22
 800173c:	601a      	str	r2, [r3, #0]
  return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_exit>:

void _exit (int status)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001752:	f04f 31ff 	mov.w	r1, #4294967295
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffe7 	bl	800172a <_kill>
  while (1) {}    /* Make sure we hang here */
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <_exit+0x12>

08001760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e00a      	b.n	8001788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001772:	f3af 8000 	nop.w
 8001776:	4601      	mov	r1, r0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbf0      	blt.n	8001772 <_read+0x12>
  }

  return len;
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e009      	b.n	80017c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf1      	blt.n	80017ac <_write+0x12>
  }
  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_close>:

int _close(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fa:	605a      	str	r2, [r3, #4]
  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_isatty>:

int _isatty(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f002 fece 	bl	800460c <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20018000 	.word	0x20018000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000290 	.word	0x20000290
 80018a4:	20000430 	.word	0x20000430

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f002 fe8d 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fb97 	bl	8001030 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8001910:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 8001914:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8001918:	2000042c 	.word	0x2000042c

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <TIM2MicrosecondsDelayInit>:
    while((initial_tick - SysTick->VAL) < delay_ticks);
}

// Initialize TIM2 to use it for micro-delays
void TIM2MicrosecondsDelayInit()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <TIM2MicrosecondsDelayInit+0x6c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a17      	ldr	r2, [pc, #92]	@ (800198c <TIM2MicrosecondsDelayInit+0x6c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <TIM2MicrosecondsDelayInit+0x6c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

    htim2.Instance = TIM2;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 8001944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001948:	601a      	str	r2, [r3, #0]
    // 1 tick = 1 us
    htim2.Init.Prescaler = (SystemCoreClock / 1000000U) - 1;
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <TIM2MicrosecondsDelayInit+0x74>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <TIM2MicrosecondsDelayInit+0x78>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9b      	lsrs	r3, r3, #18
 8001956:	3b01      	subs	r3, #1
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 800195a:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
    // 32-bit maximum value
    htim2.Init.Period = 65535;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(&htim2);
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 8001978:	f001 f984 	bl	8002c84 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&htim2);
 800197c:	4804      	ldr	r0, [pc, #16]	@ (8001990 <TIM2MicrosecondsDelayInit+0x70>)
 800197e:	f001 f9d1 	bl	8002d24 <HAL_TIM_Base_Start>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	20000294 	.word	0x20000294
 8001994:	20000000 	.word	0x20000000
 8001998:	431bde83 	.word	0x431bde83

0800199c <TIM2MicrosecondsDelay>:

// Microseconds delay with TIM2
void TIM2MicrosecondsDelay(uint32_t microseconds_delay)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    //uint32_t initial_tick = __HAL_TIM_GET_COUNTER(&htim2);
	__HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the counter
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <TIM2MicrosecondsDelay+0x2c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < microseconds_delay);
 80019ac:	bf00      	nop
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <TIM2MicrosecondsDelay+0x2c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d8f9      	bhi.n	80019ae <TIM2MicrosecondsDelay+0x12>
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000294 	.word	0x20000294

080019cc <TIM2MillisecondsDelay>:

// Milliseconds delay with TIM2
void TIM2MillisecondsDelay(uint32_t milliseconds_delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    while(milliseconds_delay--)
 80019d4:	e003      	b.n	80019de <TIM2MillisecondsDelay+0x12>
    {
    	TIM2MicrosecondsDelay(1000);
 80019d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019da:	f7ff ffdf 	bl	800199c <TIM2MicrosecondsDelay>
    while(milliseconds_delay--)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f6      	bne.n	80019d6 <TIM2MillisecondsDelay+0xa>
    }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <Dht11ConfigureDataLine>:

DTH11GpioDataLine g_dth11_gpio_data_line = {GPIOA, GPIO_PIN_0};

// Configure DHT11 data line
void Dht11ConfigureDataLine(DTH11GpioDataLine data_line)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	463b      	mov	r3, r7
 80019fc:	e883 0003 	stmia.w	r3, {r0, r1}
	g_dth11_gpio_data_line.gpio_type = data_line.gpio_type;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <Dht11ConfigureDataLine+0x24>)
 8001a04:	6013      	str	r3, [r2, #0]
	g_dth11_gpio_data_line.gpio_pin = data_line.gpio_pin;
 8001a06:	88ba      	ldrh	r2, [r7, #4]
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <Dht11ConfigureDataLine+0x24>)
 8001a0a:	809a      	strh	r2, [r3, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	20000004 	.word	0x20000004

08001a1c <Dht11SendRequest>:

// Send a request to the DHT11 sensor
void Dht11SendRequest()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    // Set DHT11 Data Line Pin as Output to write
	Dht11SetDataLinePinOutput();
 8001a20:	f000 f89e 	bl	8001b60 <Dht11SetDataLinePinOutput>
	// Set the DHT11 Data Single-bus voltage level to low
	HAL_GPIO_WritePin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin, GPIO_PIN_RESET);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <Dht11SendRequest+0x38>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <Dht11SendRequest+0x38>)
 8001a2a:	8891      	ldrh	r1, [r2, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fcea 	bl	8002408 <HAL_GPIO_WritePin>
	TIM2MillisecondsDelay(18);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f7ff ffc9 	bl	80019cc <TIM2MillisecondsDelay>
	// Pull up the DHT11 Data Single-bus voltage
	HAL_GPIO_WritePin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin, GPIO_PIN_SET);
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <Dht11SendRequest+0x38>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <Dht11SendRequest+0x38>)
 8001a40:	8891      	ldrh	r1, [r2, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fcdf 	bl	8002408 <HAL_GPIO_WritePin>
	// Set DHT11 Data Line Pin as Input to wait for response
	Dht11SetDataLinePinInput();
 8001a4a:	f000 f869 	bl	8001b20 <Dht11SetDataLinePinInput>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000004 	.word	0x20000004

08001a58 <Dht11EnableGPIOXClock>:

// Enable GPIOx clock for the Dht11 data line port
void Dht11EnableGPIOXClock()
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
	if (g_dth11_gpio_data_line.gpio_type == GPIOA)
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <Dht11EnableGPIOXClock+0xb0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2a      	ldr	r2, [pc, #168]	@ (8001b0c <Dht11EnableGPIOXClock+0xb4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10e      	bne.n	8001a86 <Dht11EnableGPIOXClock+0x2e>
	{
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
	}
	else if (g_dth11_gpio_data_line.gpio_type == GPIOH)
	{
	    __HAL_RCC_GPIOH_CLK_ENABLE();
	}
}
 8001a84:	e03a      	b.n	8001afc <Dht11EnableGPIOXClock+0xa4>
	else if (g_dth11_gpio_data_line.gpio_type == GPIOB)
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <Dht11EnableGPIOXClock+0xb0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a22      	ldr	r2, [pc, #136]	@ (8001b14 <Dht11EnableGPIOXClock+0xbc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d10e      	bne.n	8001aae <Dht11EnableGPIOXClock+0x56>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
}
 8001aac:	e026      	b.n	8001afc <Dht11EnableGPIOXClock+0xa4>
	else if (g_dth11_gpio_data_line.gpio_type == GPIOC)
 8001aae:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <Dht11EnableGPIOXClock+0xb0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a19      	ldr	r2, [pc, #100]	@ (8001b18 <Dht11EnableGPIOXClock+0xc0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d10e      	bne.n	8001ad6 <Dht11EnableGPIOXClock+0x7e>
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	e012      	b.n	8001afc <Dht11EnableGPIOXClock+0xa4>
	else if (g_dth11_gpio_data_line.gpio_type == GPIOH)
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <Dht11EnableGPIOXClock+0xb0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <Dht11EnableGPIOXClock+0xc4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d10d      	bne.n	8001afc <Dht11EnableGPIOXClock+0xa4>
	    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af0:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <Dht11EnableGPIOXClock+0xb8>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40021c00 	.word	0x40021c00

08001b20 <Dht11SetDataLinePinInput>:

// Set DHT11 data line pin Input
void Dht11SetDataLinePinInput()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
    // Enable GPIOx clock
	Dht11EnableGPIOXClock();
 8001b26:	f7ff ff97 	bl	8001a58 <Dht11EnableGPIOXClock>

	// Configure data line pin as Input
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = g_dth11_gpio_data_line.gpio_pin;
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <Dht11SetDataLinePinInput+0x38>)
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <Dht11SetDataLinePinInput+0x3c>)
 8001b4c:	f000 fac0 	bl	80020d0 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	40020000 	.word	0x40020000

08001b60 <Dht11SetDataLinePinOutput>:

// Set DHT11 data line pin Output
void Dht11SetDataLinePinOutput()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
    // Enable GPIOx clock
	Dht11EnableGPIOXClock();
 8001b66:	f7ff ff77 	bl	8001a58 <Dht11EnableGPIOXClock>

	// Configure data line pin as Output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = g_dth11_gpio_data_line.gpio_pin;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <Dht11SetDataLinePinOutput+0x3c>)
 8001b7a:	889b      	ldrh	r3, [r3, #4]
 8001b7c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2302      	movs	r3, #2
 8001b88:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <Dht11SetDataLinePinOutput+0x40>)
 8001b90:	f000 fa9e 	bl	80020d0 <HAL_GPIO_Init>
}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <Dht11GetResponse>:

// Get a response from the DHT11 sensor
uint8_t Dht11GetResponse()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
    uint8_t timeout = 40;
 8001baa:	2328      	movs	r3, #40	@ 0x28
 8001bac:	71fb      	strb	r3, [r7, #7]
    uint8_t is_response_ok = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71bb      	strb	r3, [r7, #6]

    // Wait 20-40us for DHT's response: the DHT11 should set Data Single-bus voltage level from high to low
    while((HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001bb2:	e005      	b.n	8001bc0 <Dht11GetResponse+0x1c>
    {
    	TIM2MicrosecondsDelay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fef1 	bl	800199c <TIM2MicrosecondsDelay>
    	timeout--;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	71fb      	strb	r3, [r7, #7]
    while((HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001bc6:	8892      	ldrh	r2, [r2, #4]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fc04 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <Dht11GetResponse+0x38>
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1eb      	bne.n	8001bb4 <Dht11GetResponse+0x10>
    }

    if (!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)))
 8001bdc:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001be2:	8892      	ldrh	r2, [r2, #4]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fbf6 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d13c      	bne.n	8001c6c <Dht11GetResponse+0xc8>
    {
    	// The DHT11 sent out a low-voltage-level response signal: the DHT11 Data Single-bus voltage level is low
    	timeout = 80;
 8001bf2:	2350      	movs	r3, #80	@ 0x50
 8001bf4:	71fb      	strb	r3, [r7, #7]
    	// The low-voltage-level response signal should last 80us
    	// Wait until 80us, while the sensor sets the Signal-bus voltage to a high level
        while(!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001bf6:	e005      	b.n	8001c04 <Dht11GetResponse+0x60>
        {
        	TIM2MicrosecondsDelay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff fecf 	bl	800199c <TIM2MicrosecondsDelay>
        	timeout--;
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	71fb      	strb	r3, [r7, #7]
        while(!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001c04:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001c0a:	8892      	ldrh	r2, [r2, #4]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fbe2 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <Dht11GetResponse+0x7c>
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1eb      	bne.n	8001bf8 <Dht11GetResponse+0x54>
        }

    	if ((HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)))
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001c26:	8892      	ldrh	r2, [r2, #4]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fbd4 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01a      	beq.n	8001c6c <Dht11GetResponse+0xc8>
    	{
            // The DHT11 sets Data Single-bus voltage level from low to high
    		// The high level should be kept by DHT11 during 80us
    		timeout = 80;
 8001c36:	2350      	movs	r3, #80	@ 0x50
 8001c38:	71fb      	strb	r3, [r7, #7]
    		// Wait until 80us, while the sensor sets the Signal-bus voltage to a low level and starts data transmission
    		while((HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001c3a:	e005      	b.n	8001c48 <Dht11GetResponse+0xa4>
    		{
    			TIM2MicrosecondsDelay(1);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7ff fead 	bl	800199c <TIM2MicrosecondsDelay>
            	timeout--;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	71fb      	strb	r3, [r7, #7]
    		while((HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <Dht11GetResponse+0xd4>)
 8001c4e:	8892      	ldrh	r2, [r2, #4]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fbc0 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <Dht11GetResponse+0xc0>
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1eb      	bne.n	8001c3c <Dht11GetResponse+0x98>
    		}
    		is_response_ok = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	71bb      	strb	r3, [r7, #6]

    		return is_response_ok;
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	e000      	b.n	8001c6e <Dht11GetResponse+0xca>
    	}

    }

    return is_response_ok;
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000004 	.word	0x20000004

08001c7c <Dht11GetResponsedBytes>:

// Get responsed bytes
uint8_t Dht11GetResponsedBytes(uint8_t * rh_byte1, uint8_t * rh_byte2,
		                       uint8_t * temp_byte1, uint8_t * temp_byte2, uint8_t * sum)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	uint8_t dht11_crc = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]

	*rh_byte1 = 0;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
	*rh_byte2 = 0;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
	*temp_byte1 = 0;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
	*temp_byte2 = 0;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
	*sum = 0;
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

	// Get Humidity
	*rh_byte1 = Dht11ReadByte();
 8001cac:	f000 f836 	bl	8001d1c <Dht11ReadByte>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]
    *rh_byte2 = Dht11ReadByte();
 8001cb8:	f000 f830 	bl	8001d1c <Dht11ReadByte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	701a      	strb	r2, [r3, #0]
    // Get Temperature
    *temp_byte1 = Dht11ReadByte();
 8001cc4:	f000 f82a 	bl	8001d1c <Dht11ReadByte>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	701a      	strb	r2, [r3, #0]
    *temp_byte2 = Dht11ReadByte();
 8001cd0:	f000 f824 	bl	8001d1c <Dht11ReadByte>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	701a      	strb	r2, [r3, #0]

    // Get CRC from the DHT11 sensor
    *sum = Dht11ReadByte();
 8001cdc:	f000 f81e 	bl	8001d1c <Dht11ReadByte>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	701a      	strb	r2, [r3, #0]

    // Calculate CRC
    dht11_crc = *rh_byte1 + *rh_byte2 + *temp_byte1 + *temp_byte2;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	75fb      	strb	r3, [r7, #23]

    // Check CRC
    if (*sum == dht11_crc)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	7dfa      	ldrb	r2, [r7, #23]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d101      	bne.n	8001d12 <Dht11GetResponsedBytes+0x96>
    {
        return 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <Dht11GetResponsedBytes+0x98>
    }
    else
    {
    	return 0;
 8001d12:	2300      	movs	r3, #0
    }
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <Dht11ReadByte>:

// Read byte from response
uint8_t Dht11ReadByte()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	71fb      	strb	r3, [r7, #7]
    uint8_t j;

    // Do read 8 bits for the current byte
    for (j=0; j < 8; j++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	71bb      	strb	r3, [r7, #6]
 8001d2a:	e04b      	b.n	8001dc4 <Dht11ReadByte+0xa8>
    {
        // Every bit of data begins with the 50us low-voltage-level
        uint8_t timeout = 50;
 8001d2c:	2332      	movs	r3, #50	@ 0x32
 8001d2e:	717b      	strb	r3, [r7, #5]
    	while (!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001d30:	e005      	b.n	8001d3e <Dht11ReadByte+0x22>
        {
            // Wait for the pin to go high
    		TIM2MicrosecondsDelay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fe32 	bl	800199c <TIM2MicrosecondsDelay>
            timeout--;
 8001d38:	797b      	ldrb	r3, [r7, #5]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	717b      	strb	r3, [r7, #5]
    	while (!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0)
 8001d3e:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001d44:	8892      	ldrh	r2, [r2, #4]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fb45 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <Dht11ReadByte+0x3e>
 8001d54:	797b      	ldrb	r3, [r7, #5]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1eb      	bne.n	8001d32 <Dht11ReadByte+0x16>
        }

        // Check the DHT11 data line pin is still low
        while (!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)));
 8001d5a:	bf00      	nop
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001d62:	8892      	ldrh	r2, [r2, #4]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fb36 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f4      	beq.n	8001d5c <Dht11ReadByte+0x40>
        // Wait for 28us
    	TIM2MicrosecondsDelay(28);
 8001d72:	201c      	movs	r0, #28
 8001d74:	f7ff fe12 	bl	800199c <TIM2MicrosecondsDelay>
        if (!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)))
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001d7e:	8892      	ldrh	r2, [r2, #4]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fb28 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d017      	beq.n	8001dbe <Dht11ReadByte+0xa2>
            // Do nothing
        }
        else
        {
        	// Pin is high; bit is 1
        	result |= (1<<(7-j));
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	f1c3 0307 	rsb	r3, r3, #7
 8001d94:	2201      	movs	r2, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	b25a      	sxtb	r2, r3
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	71fb      	strb	r3, [r7, #7]
        	// Wait for the pin to go low
        	while ((HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)));
 8001da6:	bf00      	nop
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <Dht11ReadByte+0xb8>)
 8001dae:	8892      	ldrh	r2, [r2, #4]
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fb10 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f4      	bne.n	8001da8 <Dht11ReadByte+0x8c>
    for (j=0; j < 8; j++)
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	71bb      	strb	r3, [r7, #6]
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d9b0      	bls.n	8001d2c <Dht11ReadByte+0x10>
        // When the last bit data is transmitted, DHT11 pulls down the voltage level and keeps it for 50us.
        //timeout = 50;
        //while (!(HAL_GPIO_ReadPin(g_dth11_gpio_data_line.gpio_type, g_dth11_gpio_data_line.gpio_pin)) && timeout > 0);
    }

    return result;
 8001dca:	79fb      	ldrb	r3, [r7, #7]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <HAL_Init+0x40>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_Init+0x40>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_Init+0x40>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 f931 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fc0e 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f93b 	bl	80020b6 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f911 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	@ (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000010 	.word	0x20000010
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	200002dc 	.word	0x200002dc

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200002dc 	.word	0x200002dc

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000010 	.word	0x20000010

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff47 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff5c 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffb0 	bl	8002024 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e159      	b.n	80023a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8148 	bne.w	800239a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d005      	beq.n	8002122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	2b02      	cmp	r3, #2
 8002120:	d130      	bne.n	8002184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0201 	and.w	r2, r3, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d017      	beq.n	80021c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d123      	bne.n	8002214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a2 	beq.w	800239a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b57      	ldr	r3, [pc, #348]	@ (80023b8 <HAL_GPIO_Init+0x2e8>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <HAL_GPIO_Init+0x2e8>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b54      	ldr	r3, [pc, #336]	@ (80023b8 <HAL_GPIO_Init+0x2e8>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a52      	ldr	r2, [pc, #328]	@ (80023bc <HAL_GPIO_Init+0x2ec>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a49      	ldr	r2, [pc, #292]	@ (80023c0 <HAL_GPIO_Init+0x2f0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x202>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_GPIO_Init+0x2f4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x1fe>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a47      	ldr	r2, [pc, #284]	@ (80023c8 <HAL_GPIO_Init+0x2f8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x1fa>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a46      	ldr	r2, [pc, #280]	@ (80023cc <HAL_GPIO_Init+0x2fc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x1f6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a45      	ldr	r2, [pc, #276]	@ (80023d0 <HAL_GPIO_Init+0x300>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x1f2>
 80022be:	2304      	movs	r3, #4
 80022c0:	e008      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022d2:	2300      	movs	r3, #0
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f002 0203 	and.w	r2, r2, #3
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	4093      	lsls	r3, r2
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e4:	4935      	ldr	r1, [pc, #212]	@ (80023bc <HAL_GPIO_Init+0x2ec>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f2:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002316:	4a2f      	ldr	r2, [pc, #188]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800231c:	4b2d      	ldr	r3, [pc, #180]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002340:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002346:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236a:	4a1a      	ldr	r2, [pc, #104]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002370:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002394:	4a0f      	ldr	r2, [pc, #60]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	f67f aea2 	bls.w	80020ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e267      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d075      	beq.n	8002546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800245a:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00c      	beq.n	8002480 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b85      	ldr	r3, [pc, #532]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800246e:	2b08      	cmp	r3, #8
 8002470:	d112      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b82      	ldr	r3, [pc, #520]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800247e:	d10b      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b7e      	ldr	r3, [pc, #504]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05b      	beq.n	8002544 <HAL_RCC_OscConfig+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d157      	bne.n	8002544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e242      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x74>
 80024a2:	4b76      	ldr	r3, [pc, #472]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a75      	ldr	r2, [pc, #468]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x98>
 80024ba:	4b70      	ldr	r3, [pc, #448]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6f      	ldr	r2, [pc, #444]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b6d      	ldr	r3, [pc, #436]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6c      	ldr	r2, [pc, #432]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024d4:	4b69      	ldr	r3, [pc, #420]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a68      	ldr	r2, [pc, #416]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b66      	ldr	r3, [pc, #408]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a65      	ldr	r2, [pc, #404]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fcd6 	bl	8001ea4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fcd2 	bl	8001ea4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e207      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b5b      	ldr	r3, [pc, #364]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xc0>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fcc2 	bl	8001ea4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fcbe 	bl	8001ea4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1f3      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	4b51      	ldr	r3, [pc, #324]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0xe8>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d063      	beq.n	800261a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002552:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b47      	ldr	r3, [pc, #284]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002566:	2b08      	cmp	r3, #8
 8002568:	d11c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b44      	ldr	r3, [pc, #272]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	4b41      	ldr	r3, [pc, #260]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x152>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e1c7      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b3b      	ldr	r3, [pc, #236]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4937      	ldr	r1, [pc, #220]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	e03a      	b.n	800261a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <HAL_RCC_OscConfig+0x244>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7ff fc77 	bl	8001ea4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ba:	f7ff fc73 	bl	8001ea4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1a8      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	4b2b      	ldr	r3, [pc, #172]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4925      	ldr	r1, [pc, #148]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_RCC_OscConfig+0x244>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7ff fc56 	bl	8001ea4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fc:	f7ff fc52 	bl	8001ea4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e187      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d036      	beq.n	8002694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <HAL_RCC_OscConfig+0x248>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7ff fc36 	bl	8001ea4 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff fc32 	bl	8001ea4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e167      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <HAL_RCC_OscConfig+0x240>)
 8002650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x200>
 800265a:	e01b      	b.n	8002694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <HAL_RCC_OscConfig+0x248>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7ff fc1f 	bl	8001ea4 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	e00e      	b.n	8002688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7ff fc1b 	bl	8001ea4 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d907      	bls.n	8002688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e150      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
 800267c:	40023800 	.word	0x40023800
 8002680:	42470000 	.word	0x42470000
 8002684:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b88      	ldr	r3, [pc, #544]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ea      	bne.n	800266a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8097 	beq.w	80027d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b81      	ldr	r3, [pc, #516]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b7d      	ldr	r3, [pc, #500]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	4a7c      	ldr	r2, [pc, #496]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c2:	4b7a      	ldr	r3, [pc, #488]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b77      	ldr	r3, [pc, #476]	@ (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d118      	bne.n	8002710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b74      	ldr	r3, [pc, #464]	@ (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a73      	ldr	r2, [pc, #460]	@ (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7ff fbdb 	bl	8001ea4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f2:	f7ff fbd7 	bl	8001ea4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e10c      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_RCC_OscConfig+0x474>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x2ea>
 8002718:	4b64      	ldr	r3, [pc, #400]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x324>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b05      	cmp	r3, #5
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x30c>
 800272e:	4b5f      	ldr	r3, [pc, #380]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	4a5e      	ldr	r2, [pc, #376]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	@ 0x70
 800273a:	4b5c      	ldr	r3, [pc, #368]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	4a5b      	ldr	r2, [pc, #364]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6713      	str	r3, [r2, #112]	@ 0x70
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x324>
 8002748:	4b58      	ldr	r3, [pc, #352]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a57      	ldr	r2, [pc, #348]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
 8002754:	4b55      	ldr	r3, [pc, #340]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002758:	4a54      	ldr	r2, [pc, #336]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0304 	bic.w	r3, r3, #4
 800275e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7ff fb9c 	bl	8001ea4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7ff fb98 	bl	8001ea4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0cb      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	4b49      	ldr	r3, [pc, #292]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ee      	beq.n	8002770 <HAL_RCC_OscConfig+0x334>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7ff fb86 	bl	8001ea4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7ff fb82 	bl	8001ea4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0b5      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ee      	bne.n	800279c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c4:	4b39      	ldr	r3, [pc, #228]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	4a38      	ldr	r2, [pc, #224]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a1 	beq.w	800291c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027da:	4b34      	ldr	r3, [pc, #208]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d05c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d141      	bne.n	8002872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b31      	ldr	r3, [pc, #196]	@ (80028b4 <HAL_RCC_OscConfig+0x478>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff fb56 	bl	8001ea4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7ff fb52 	bl	8001ea4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e087      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	3b01      	subs	r3, #1
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	491b      	ldr	r1, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_RCC_OscConfig+0x478>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff fb2b 	bl	8001ea4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff fb27 	bl	8001ea4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e05c      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x416>
 8002870:	e054      	b.n	800291c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <HAL_RCC_OscConfig+0x478>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff fb14 	bl	8001ea4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7ff fb10 	bl	8001ea4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e045      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_OscConfig+0x470>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x444>
 800289e:	e03d      	b.n	800291c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e038      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x4ec>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d028      	beq.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d121      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d11a      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0cc      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b68      	ldr	r3, [pc, #416]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d90c      	bls.n	8002968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b65      	ldr	r3, [pc, #404]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b63      	ldr	r3, [pc, #396]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a58      	ldr	r2, [pc, #352]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800298a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a52      	ldr	r2, [pc, #328]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b50      	ldr	r3, [pc, #320]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d044      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d119      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e067      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4934      	ldr	r1, [pc, #208]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7ff fa42 	bl	8001ea4 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7ff fa3e 	bl	8001ea4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e04f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 020c 	and.w	r2, r3, #12
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1eb      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d20c      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b20      	ldr	r3, [pc, #128]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490a      	ldr	r1, [pc, #40]	@ (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f9a2 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08007e20 	.word	0x08007e20
 8002af0:	20000000 	.word	0x20000000
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b090      	sub	sp, #64	@ 0x40
 8002afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b10:	4b59      	ldr	r3, [pc, #356]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d00d      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	f200 80a1 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x34>
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2a:	e09b      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b30:	e09b      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b32:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b36:	e098      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b38:	4b4f      	ldr	r3, [pc, #316]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b42:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	2200      	movs	r2, #0
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b60:	2100      	movs	r1, #0
 8002b62:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b64:	fb03 f201 	mul.w	r2, r3, r1
 8002b68:	2300      	movs	r3, #0
 8002b6a:	fb00 f303 	mul.w	r3, r0, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a43      	ldr	r2, [pc, #268]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b72:	fba0 1202 	umull	r1, r2, r0, r2
 8002b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b78:	460a      	mov	r2, r1
 8002b7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b7e:	4413      	add	r3, r2
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b84:	2200      	movs	r2, #0
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b92:	f7fe f881 	bl	8000c98 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b9e:	e053      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba0:	4b35      	ldr	r3, [pc, #212]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	617a      	str	r2, [r7, #20]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bb2:	f04f 0b00 	mov.w	fp, #0
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	465b      	mov	r3, fp
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	0159      	lsls	r1, r3, #5
 8002bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc8:	0150      	lsls	r0, r2, #5
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ebb2 080a 	subs.w	r8, r2, sl
 8002bd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002be2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002be6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bea:	ebb2 0408 	subs.w	r4, r2, r8
 8002bee:	eb63 0509 	sbc.w	r5, r3, r9
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	00eb      	lsls	r3, r5, #3
 8002bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c00:	00e2      	lsls	r2, r4, #3
 8002c02:	4614      	mov	r4, r2
 8002c04:	461d      	mov	r5, r3
 8002c06:	eb14 030a 	adds.w	r3, r4, sl
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	eb45 030b 	adc.w	r3, r5, fp
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	028b      	lsls	r3, r1, #10
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c28:	4621      	mov	r1, r4
 8002c2a:	028a      	lsls	r2, r1, #10
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c32:	2200      	movs	r2, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	60fa      	str	r2, [r7, #12]
 8002c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c3c:	f7fe f82c 	bl	8000c98 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	3301      	adds	r3, #1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3740      	adds	r7, #64	@ 0x40
 8002c70:	46bd      	mov	sp, r7
 8002c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	017d7840 	.word	0x017d7840

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e041      	b.n	8002d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fce6 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 f950 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e03c      	b.n	8002db6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <HAL_TIM_Base_Start+0xa0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_TIM_Base_Start+0x5c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d56:	d013      	beq.n	8002d80 <HAL_TIM_Base_Start+0x5c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc8 <HAL_TIM_Base_Start+0xa4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIM_Base_Start+0x5c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <HAL_TIM_Base_Start+0xa8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIM_Base_Start+0x5c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_TIM_Base_Start+0xac>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_Base_Start+0x5c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a16      	ldr	r2, [pc, #88]	@ (8002dd4 <HAL_TIM_Base_Start+0xb0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d010      	beq.n	8002db4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	e007      	b.n	8002db4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000800 	.word	0x40000800
 8002dd0:	40000c00 	.word	0x40000c00
 8002dd4:	40014000 	.word	0x40014000

08002dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_ConfigClockSource+0x1c>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e0b4      	b.n	8002f5e <HAL_TIM_ConfigClockSource+0x186>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e2c:	d03e      	beq.n	8002eac <HAL_TIM_ConfigClockSource+0xd4>
 8002e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e32:	f200 8087 	bhi.w	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e3a:	f000 8086 	beq.w	8002f4a <HAL_TIM_ConfigClockSource+0x172>
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e42:	d87f      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b70      	cmp	r3, #112	@ 0x70
 8002e46:	d01a      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0xa6>
 8002e48:	2b70      	cmp	r3, #112	@ 0x70
 8002e4a:	d87b      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b60      	cmp	r3, #96	@ 0x60
 8002e4e:	d050      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e50:	2b60      	cmp	r3, #96	@ 0x60
 8002e52:	d877      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b50      	cmp	r3, #80	@ 0x50
 8002e56:	d03c      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e58:	2b50      	cmp	r3, #80	@ 0x50
 8002e5a:	d873      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b40      	cmp	r3, #64	@ 0x40
 8002e5e:	d058      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x13a>
 8002e60:	2b40      	cmp	r3, #64	@ 0x40
 8002e62:	d86f      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b30      	cmp	r3, #48	@ 0x30
 8002e66:	d064      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x15a>
 8002e68:	2b30      	cmp	r3, #48	@ 0x30
 8002e6a:	d86b      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d060      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x15a>
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d867      	bhi.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05c      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x15a>
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d05a      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x15a>
 8002e7c:	e062      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e8e:	f000 f96b 	bl	8003168 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	609a      	str	r2, [r3, #8]
      break;
 8002eaa:	e04f      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ebc:	f000 f954 	bl	8003168 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ece:	609a      	str	r2, [r3, #8]
      break;
 8002ed0:	e03c      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f000 f8c8 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2150      	movs	r1, #80	@ 0x50
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f921 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002ef0:	e02c      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002efe:	461a      	mov	r2, r3
 8002f00:	f000 f8e7 	bl	80030d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2160      	movs	r1, #96	@ 0x60
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f911 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f10:	e01c      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 f8a8 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2140      	movs	r1, #64	@ 0x40
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f901 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f30:	e00c      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	f000 f8f8 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002f42:	e003      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      break;
 8002f48:	e000      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a37      	ldr	r2, [pc, #220]	@ (8003058 <TIM_Base_SetConfig+0xf0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00f      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a34      	ldr	r2, [pc, #208]	@ (800305c <TIM_Base_SetConfig+0xf4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a33      	ldr	r2, [pc, #204]	@ (8003060 <TIM_Base_SetConfig+0xf8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a32      	ldr	r2, [pc, #200]	@ (8003064 <TIM_Base_SetConfig+0xfc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	@ (8003058 <TIM_Base_SetConfig+0xf0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc0:	d017      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	@ (800305c <TIM_Base_SetConfig+0xf4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <TIM_Base_SetConfig+0xf8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <TIM_Base_SetConfig+0xfc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	@ (8003068 <TIM_Base_SetConfig+0x100>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	@ (800306c <TIM_Base_SetConfig+0x104>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a20      	ldr	r2, [pc, #128]	@ (8003070 <TIM_Base_SetConfig+0x108>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a0c      	ldr	r2, [pc, #48]	@ (8003058 <TIM_Base_SetConfig+0xf0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d103      	bne.n	8003032 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800

08003074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 030a 	bic.w	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f023 0210 	bic.w	r2, r3, #16
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	031b      	lsls	r3, r3, #12
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800310e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	f043 0307 	orr.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	431a      	orrs	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031bc:	2302      	movs	r3, #2
 80031be:	e050      	b.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d018      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320c:	d013      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a13      	ldr	r2, [pc, #76]	@ (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10c      	bne.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800323c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40000c00 	.word	0x40000c00
 8003280:	40014000 	.word	0x40014000

08003284 <Lcd1602Configure>:
// Configure data bus and registers of the LCD1602
void Lcd1602Configure(Lcd1602DataBusSize data_bus_size,
		              GpioItem lcd1602_gpio_data_bus[],
					  GpioItem enable_signal,
					  GpioItem register_selection)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	4639      	mov	r1, r7
 800328e:	e881 000c 	stmia.w	r1, {r2, r3}
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
	Lcd1602SetDataBusSize(data_bus_size);
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 f86f 	bl	800337c <Lcd1602SetDataBusSize>
	Lcd1602ConfigureDataBus(lcd1602_gpio_data_bus);
 800329e:	68b8      	ldr	r0, [r7, #8]
 80032a0:	f000 f87c 	bl	800339c <Lcd1602ConfigureDataBus>
	Lcd1602ConfigureE(enable_signal);
 80032a4:	463b      	mov	r3, r7
 80032a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032aa:	f000 f8b3 	bl	8003414 <Lcd1602ConfigureE>
	Lcd1602ConfigureRS(register_selection);
 80032ae:	f107 0318 	add.w	r3, r7, #24
 80032b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032b6:	f000 f899 	bl	80033ec <Lcd1602ConfigureRS>
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <Lcd1602Configure4Bits>:

// Configure data bus and registers of the LCD1602 for the 4-bits mode
void Lcd1602Configure4Bits(GpioItem lcd1602_gpio_data_bus[], GpioItem enable_signal, GpioItem register_selection)
{
 80032c4:	b082      	sub	sp, #8
 80032c6:	b590      	push	{r4, r7, lr}
 80032c8:	b087      	sub	sp, #28
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	1d38      	adds	r0, r7, #4
 80032d0:	e880 0006 	stmia.w	r0, {r1, r2}
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
    // Configure Data bus size
    g_lcd1602_data_bus_size = LCD1602_DATA_BUS_SIZE4;
 80032d6:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <Lcd1602Configure4Bits+0x48>)
 80032d8:	2204      	movs	r2, #4
 80032da:	701a      	strb	r2, [r3, #0]

    Lcd1602Configure(g_lcd1602_data_bus_size, lcd1602_gpio_data_bus, enable_signal, register_selection);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <Lcd1602Configure4Bits+0x48>)
 80032de:	781c      	ldrb	r4, [r3, #0]
 80032e0:	466a      	mov	r2, sp
 80032e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	cb0c      	ldmia	r3, {r2, r3}
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff ffc5 	bl	8003284 <Lcd1602Configure>

    Lcd1602Initialize();
 80032fa:	f000 f809 	bl	8003310 <Lcd1602Initialize>
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003308:	b002      	add	sp, #8
 800330a:	4770      	bx	lr
 800330c:	20000011 	.word	0x20000011

08003310 <Lcd1602Initialize>:
    Lcd1602Initialize();
}

// Initialize the Display
void Lcd1602Initialize()
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
	HAL_Delay(60);
 8003314:	203c      	movs	r0, #60	@ 0x3c
 8003316:	f7fe fdd1 	bl	8001ebc <HAL_Delay>
	if (g_lcd1602_data_bus_size == LCD1602_DATA_BUS_SIZE4)
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <Lcd1602Initialize+0x68>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b04      	cmp	r3, #4
 8003320:	d109      	bne.n	8003336 <Lcd1602Initialize+0x26>
    {
        // 4-bits bus mode
		Lcd1602Write2NibblesToCommandRegister(LCD1602_BIT4_FIRST_INITIALIZATION_BYTE);
 8003322:	2033      	movs	r0, #51	@ 0x33
 8003324:	f000 f908 	bl	8003538 <Lcd1602Write2NibblesToCommandRegister>
		Lcd1602Write2NibblesToCommandRegister(LCD1602_BIT4_SECOND_INITIALIZATION_BYTE);
 8003328:	2032      	movs	r0, #50	@ 0x32
 800332a:	f000 f905 	bl	8003538 <Lcd1602Write2NibblesToCommandRegister>
		// Send the Function Set command with DL=0 flag (i.e. 4-bits), N=1 flag (i.e. 2R) and F=0 (i.e. 5x8 character font)
    	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_N_2R);
 800332e:	2028      	movs	r0, #40	@ 0x28
 8003330:	f000 f922 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
 8003334:	e005      	b.n	8003342 <Lcd1602Initialize+0x32>
    }
    else
    {
        // 8-bits bus mode
    	// Send the Function Set command with DL=1 flag (i.e. 8-bits), N=0 flag (i.e. 1R) and F=0 (i.e. 5x8 character font)
    	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_DL_8D);
 8003336:	2030      	movs	r0, #48	@ 0x30
 8003338:	f000 f91e 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
    	HAL_Delay(20);
 800333c:	2014      	movs	r0, #20
 800333e:	f7fe fdbd 	bl	8001ebc <HAL_Delay>
    }

	HAL_Delay(1);
 8003342:	2001      	movs	r0, #1
 8003344:	f7fe fdba 	bl	8001ebc <HAL_Delay>
	// Common part of initialization
    // Switch Display on; cursor off; blink off
    Lcd1602WriteByteToCommandRegister(LCD1602_CMD_DISPLAY_SWITCH | LCD1602_FLAG_DISPLAY_ON);
 8003348:	200c      	movs	r0, #12
 800334a:	f000 f915 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
    if (g_lcd1602_data_bus_size == LCD1602_DATA_BUS_SIZE8)
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <Lcd1602Initialize+0x68>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d105      	bne.n	8003362 <Lcd1602Initialize+0x52>
    {
    	// 8-bits bus mode
        // Send the Function Set command with DL=1 flag (i.e. 8-bits), N=1 flag (i.e. 2R) and F=0 (i.e. 5x8 character font)
        Lcd1602WriteByteToCommandRegister(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_DL_8D | LCD1602_FLAG_N_2R);
 8003356:	2038      	movs	r0, #56	@ 0x38
 8003358:	f000 f90e 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
        HAL_Delay(20);
 800335c:	2014      	movs	r0, #20
 800335e:	f7fe fdad 	bl	8001ebc <HAL_Delay>
    }
    // Set increment moving direction of cursor (cursor to increment automatically after writing a character; the display is not shifting)
    Lcd1602SetIncrementDirection();
 8003362:	f000 f92e 	bl	80035c2 <Lcd1602SetIncrementDirection>
	// Screen Clear; Set Address counter for DDRAM & CGRAM to 0
	Lcd1602ScreenClear();
 8003366:	f000 f925 	bl	80035b4 <Lcd1602ScreenClear>
	// Return Home
	Lcd1602SetCursor(0, 0);
 800336a:	2100      	movs	r1, #0
 800336c:	2000      	movs	r0, #0
 800336e:	f000 f92f 	bl	80035d0 <Lcd1602SetCursor>
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000011 	.word	0x20000011

0800337c <Lcd1602SetDataBusSize>:

// Set a data bus size
void Lcd1602SetDataBusSize(Lcd1602DataBusSize data_bus_size)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
    g_lcd1602_data_bus_size = data_bus_size;
 8003386:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <Lcd1602SetDataBusSize+0x1c>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	7013      	strb	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000011 	.word	0x20000011

0800339c <Lcd1602ConfigureDataBus>:

// Configure a data bus pins' set
void Lcd1602ConfigureDataBus(GpioItem lcd1602_gpio_data_bus[])
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < g_lcd1602_data_bus_size; i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e00f      	b.n	80033ca <Lcd1602ConfigureDataBus+0x2e>
    {
        g_lcd1602_gpio_data_bus[i] = lcd1602_gpio_data_bus[i];
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	18d1      	adds	r1, r2, r3
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <Lcd1602ConfigureDataBus+0x48>)
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	460a      	mov	r2, r1
 80033bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033c0:	e883 0003 	stmia.w	r3, {r0, r1}
    for (uint8_t i = 0; i < g_lcd1602_data_bus_size; i++)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	3301      	adds	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	4b07      	ldr	r3, [pc, #28]	@ (80033e8 <Lcd1602ConfigureDataBus+0x4c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3ea      	bcc.n	80033aa <Lcd1602ConfigureDataBus+0xe>
    }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000024 	.word	0x20000024
 80033e8:	20000011 	.word	0x20000011

080033ec <Lcd1602ConfigureRS>:

// Configure Instruction/Data register selection pin
void Lcd1602ConfigureRS(GpioItem register_selection)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	463b      	mov	r3, r7
 80033f4:	e883 0003 	stmia.w	r3, {r0, r1}
	g_lcd1602_gpio_rs.gpio_type = register_selection.gpio_type;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <Lcd1602ConfigureRS+0x24>)
 80033fc:	6013      	str	r3, [r2, #0]
	g_lcd1602_gpio_rs.gpio_pin = register_selection.gpio_pin;
 80033fe:	88ba      	ldrh	r2, [r7, #4]
 8003400:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <Lcd1602ConfigureRS+0x24>)
 8003402:	809a      	strh	r2, [r3, #4]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	20000014 	.word	0x20000014

08003414 <Lcd1602ConfigureE>:

// Configure Enable signal pin
void Lcd1602ConfigureE(GpioItem enable_signal)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	463b      	mov	r3, r7
 800341c:	e883 0003 	stmia.w	r3, {r0, r1}
	g_lcd1602_gpio_e.gpio_type = enable_signal.gpio_type;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a05      	ldr	r2, [pc, #20]	@ (8003438 <Lcd1602ConfigureE+0x24>)
 8003424:	6013      	str	r3, [r2, #0]
	g_lcd1602_gpio_e.gpio_pin = enable_signal.gpio_pin;
 8003426:	88ba      	ldrh	r2, [r7, #4]
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <Lcd1602ConfigureE+0x24>)
 800342a:	809a      	strh	r2, [r3, #4]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	2000001c 	.word	0x2000001c

0800343c <Lcd1602SetDataBusAndWrite>:

// Prepare a data bus and write
void Lcd1602SetDataBusAndWrite(uint8_t data)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
    // Prepare data bus pins
	for (uint8_t i = 0; i < g_lcd1602_data_bus_size; i++)
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	e016      	b.n	800347a <Lcd1602SetDataBusAndWrite+0x3e>
	{
		HAL_GPIO_WritePin(g_lcd1602_gpio_data_bus[i].gpio_type,
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <Lcd1602SetDataBusAndWrite+0x78>)
 8003450:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <Lcd1602SetDataBusAndWrite+0x78>)
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	8899      	ldrh	r1, [r3, #4]
				          g_lcd1602_gpio_data_bus[i].gpio_pin, (data >> i) & 0x01);
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	fa42 f303 	asr.w	r3, r2, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(g_lcd1602_gpio_data_bus[i].gpio_type,
 800346e:	461a      	mov	r2, r3
 8003470:	f7fe ffca 	bl	8002408 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < g_lcd1602_data_bus_size; i++)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	3301      	adds	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <Lcd1602SetDataBusAndWrite+0x7c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	429a      	cmp	r2, r3
 8003482:	d3e3      	bcc.n	800344c <Lcd1602SetDataBusAndWrite+0x10>
	}

    // Enable to write
	HAL_GPIO_WritePin(g_lcd1602_gpio_e.gpio_type, g_lcd1602_gpio_e.gpio_pin, GPIO_PIN_SET);
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <Lcd1602SetDataBusAndWrite+0x80>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0c      	ldr	r2, [pc, #48]	@ (80034bc <Lcd1602SetDataBusAndWrite+0x80>)
 800348a:	8891      	ldrh	r1, [r2, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ffba 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003494:	2001      	movs	r0, #1
 8003496:	f7fe fd11 	bl	8001ebc <HAL_Delay>
    HAL_GPIO_WritePin(g_lcd1602_gpio_e.gpio_type, g_lcd1602_gpio_e.gpio_pin, GPIO_PIN_RESET);
 800349a:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <Lcd1602SetDataBusAndWrite+0x80>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a07      	ldr	r2, [pc, #28]	@ (80034bc <Lcd1602SetDataBusAndWrite+0x80>)
 80034a0:	8891      	ldrh	r1, [r2, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe ffaf 	bl	8002408 <HAL_GPIO_WritePin>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000024 	.word	0x20000024
 80034b8:	20000011 	.word	0x20000011
 80034bc:	2000001c 	.word	0x2000001c

080034c0 <Lcd1602SelectCommandDataRegister>:

// Select instruction or data register to write
void Lcd1602SelectCommandDataRegister(GPIO_PinState command_data_register)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(g_lcd1602_gpio_rs.gpio_type, g_lcd1602_gpio_rs.gpio_pin, command_data_register);
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <Lcd1602SelectCommandDataRegister+0x24>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a05      	ldr	r2, [pc, #20]	@ (80034e4 <Lcd1602SelectCommandDataRegister+0x24>)
 80034d0:	8891      	ldrh	r1, [r2, #4]
 80034d2:	79fa      	ldrb	r2, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe ff97 	bl	8002408 <HAL_GPIO_WritePin>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000014 	.word	0x20000014

080034e8 <Lcd1602WriteByteToRegister>:

// Write byte to the instruction or data register
void Lcd1602WriteByteToRegister(uint8_t data, GPIO_PinState command_data_register)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	460a      	mov	r2, r1
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71bb      	strb	r3, [r7, #6]
	Lcd1602SelectCommandDataRegister(command_data_register);
 80034f8:	79bb      	ldrb	r3, [r7, #6]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ffe0 	bl	80034c0 <Lcd1602SelectCommandDataRegister>

    if (g_lcd1602_data_bus_size == LCD1602_DATA_BUS_SIZE4)
 8003500:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <Lcd1602WriteByteToRegister+0x4c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d10d      	bne.n	8003524 <Lcd1602WriteByteToRegister+0x3c>
    {
        // 4-bit mode
    	Lcd1602SetDataBusAndWrite(data >> 4);
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ff94 	bl	800343c <Lcd1602SetDataBusAndWrite>
    	Lcd1602SetDataBusAndWrite(data & 0x0F);
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff8d 	bl	800343c <Lcd1602SetDataBusAndWrite>
    else
    {
        // 8-bit mode
    	Lcd1602SetDataBusAndWrite(data);
    }
}
 8003522:	e003      	b.n	800352c <Lcd1602WriteByteToRegister+0x44>
    	Lcd1602SetDataBusAndWrite(data);
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff88 	bl	800343c <Lcd1602SetDataBusAndWrite>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000011 	.word	0x20000011

08003538 <Lcd1602Write2NibblesToCommandRegister>:

// Write 2 Nibbles to the instruction with pause
void Lcd1602Write2NibblesToCommandRegister(uint8_t data)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
	Lcd1602SelectCommandDataRegister(LCD1602_COMMAND_REG);
 8003542:	2300      	movs	r3, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ffbb 	bl	80034c0 <Lcd1602SelectCommandDataRegister>

    Lcd1602SetDataBusAndWrite(data >> 4);
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff73 	bl	800343c <Lcd1602SetDataBusAndWrite>
    HAL_Delay(5);
 8003556:	2005      	movs	r0, #5
 8003558:	f7fe fcb0 	bl	8001ebc <HAL_Delay>
    Lcd1602SetDataBusAndWrite(data & 0x0F);
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff69 	bl	800343c <Lcd1602SetDataBusAndWrite>
    HAL_Delay(1);
 800356a:	2001      	movs	r0, #1
 800356c:	f7fe fca6 	bl	8001ebc <HAL_Delay>
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <Lcd1602WriteByteToCommandRegister>:

// Write byte to the instruction register
void Lcd1602WriteByteToCommandRegister(uint8_t command)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
	Lcd1602WriteByteToRegister(command, LCD1602_COMMAND_REG);
 8003582:	2200      	movs	r2, #0
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ffad 	bl	80034e8 <Lcd1602WriteByteToRegister>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <Lcd1602WriteByteToDataRegister>:
// Write byte to the data register
void Lcd1602WriteByteToDataRegister(uint8_t data)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
	Lcd1602WriteByteToRegister(data, LCD1602_DATA_REG);
 80035a0:	2201      	movs	r2, #1
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff9e 	bl	80034e8 <Lcd1602WriteByteToRegister>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <Lcd1602ScreenClear>:

// Screen Clear; Set Address counter for DDRAM & CGRAM to 0
void Lcd1602ScreenClear()
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_SCREEN_CLEAR);
 80035b8:	2001      	movs	r0, #1
 80035ba:	f7ff ffdd 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <Lcd1602SetIncrementDirection>:
	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_INPUT_SET);
}

// Set increment cursor moving direction
void Lcd1602SetIncrementDirection()
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_INPUT_SET | LCD1602_FLAG_I_D_INCREMENT_MODE);
 80035c6:	2006      	movs	r0, #6
 80035c8:	f7ff ffd6 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <Lcd1602SetCursor>:
{
	Lcd1602ShowCursor();
}
// Set cursor position (0,0) - (1,15)
void Lcd1602SetCursor(uint8_t row, uint8_t col)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	460a      	mov	r2, r1
 80035da:	71fb      	strb	r3, [r7, #7]
 80035dc:	4613      	mov	r3, r2
 80035de:	71bb      	strb	r3, [r7, #6]
	if (row > 1)
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d901      	bls.n	80035ea <Lcd1602SetCursor+0x1a>
	{
        row = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	71fb      	strb	r3, [r7, #7]
    }
	if (col > 15)
 80035ea:	79bb      	ldrb	r3, [r7, #6]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d901      	bls.n	80035f4 <Lcd1602SetCursor+0x24>
	{
        col = 15;
 80035f0:	230f      	movs	r3, #15
 80035f2:	71bb      	strb	r3, [r7, #6]
    }

	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_DDRAM_AD_SET | LCD1602_ROWS[row] | col);
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <Lcd1602SetCursor+0x44>)
 80035f8:	5cd2      	ldrb	r2, [r2, r3]
 80035fa:	79bb      	ldrb	r3, [r7, #6]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ffb6 	bl	8003578 <Lcd1602WriteByteToCommandRegister>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	08007e34 	.word	0x08007e34

08003618 <Lcd1602WriteString>:

// Write string from cursor point
void Lcd1602WriteString(char * string)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e009      	b.n	800363a <Lcd1602WriteString+0x22>
	{
		Lcd1602WriteByteToDataRegister(string[i]);
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ffb1 	bl	8003596 <Lcd1602WriteByteToDataRegister>
	for(uint8_t i = 0; i < strlen(string); i++)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	3301      	adds	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	7bfc      	ldrb	r4, [r7, #15]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fc fe1f 	bl	8000280 <strlen>
 8003642:	4603      	mov	r3, r0
 8003644:	429c      	cmp	r4, r3
 8003646:	d3ee      	bcc.n	8003626 <Lcd1602WriteString+0xe>
	}
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}

08003652 <__cvt>:
 8003652:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003656:	ec57 6b10 	vmov	r6, r7, d0
 800365a:	2f00      	cmp	r7, #0
 800365c:	460c      	mov	r4, r1
 800365e:	4619      	mov	r1, r3
 8003660:	463b      	mov	r3, r7
 8003662:	bfbb      	ittet	lt
 8003664:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003668:	461f      	movlt	r7, r3
 800366a:	2300      	movge	r3, #0
 800366c:	232d      	movlt	r3, #45	@ 0x2d
 800366e:	700b      	strb	r3, [r1, #0]
 8003670:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003672:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003676:	4691      	mov	r9, r2
 8003678:	f023 0820 	bic.w	r8, r3, #32
 800367c:	bfbc      	itt	lt
 800367e:	4632      	movlt	r2, r6
 8003680:	4616      	movlt	r6, r2
 8003682:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003686:	d005      	beq.n	8003694 <__cvt+0x42>
 8003688:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800368c:	d100      	bne.n	8003690 <__cvt+0x3e>
 800368e:	3401      	adds	r4, #1
 8003690:	2102      	movs	r1, #2
 8003692:	e000      	b.n	8003696 <__cvt+0x44>
 8003694:	2103      	movs	r1, #3
 8003696:	ab03      	add	r3, sp, #12
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	ab02      	add	r3, sp, #8
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	ec47 6b10 	vmov	d0, r6, r7
 80036a2:	4653      	mov	r3, sl
 80036a4:	4622      	mov	r2, r4
 80036a6:	f001 f877 	bl	8004798 <_dtoa_r>
 80036aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80036ae:	4605      	mov	r5, r0
 80036b0:	d119      	bne.n	80036e6 <__cvt+0x94>
 80036b2:	f019 0f01 	tst.w	r9, #1
 80036b6:	d00e      	beq.n	80036d6 <__cvt+0x84>
 80036b8:	eb00 0904 	add.w	r9, r0, r4
 80036bc:	2200      	movs	r2, #0
 80036be:	2300      	movs	r3, #0
 80036c0:	4630      	mov	r0, r6
 80036c2:	4639      	mov	r1, r7
 80036c4:	f7fd fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80036c8:	b108      	cbz	r0, 80036ce <__cvt+0x7c>
 80036ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80036ce:	2230      	movs	r2, #48	@ 0x30
 80036d0:	9b03      	ldr	r3, [sp, #12]
 80036d2:	454b      	cmp	r3, r9
 80036d4:	d31e      	bcc.n	8003714 <__cvt+0xc2>
 80036d6:	9b03      	ldr	r3, [sp, #12]
 80036d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80036da:	1b5b      	subs	r3, r3, r5
 80036dc:	4628      	mov	r0, r5
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	b004      	add	sp, #16
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036ea:	eb00 0904 	add.w	r9, r0, r4
 80036ee:	d1e5      	bne.n	80036bc <__cvt+0x6a>
 80036f0:	7803      	ldrb	r3, [r0, #0]
 80036f2:	2b30      	cmp	r3, #48	@ 0x30
 80036f4:	d10a      	bne.n	800370c <__cvt+0xba>
 80036f6:	2200      	movs	r2, #0
 80036f8:	2300      	movs	r3, #0
 80036fa:	4630      	mov	r0, r6
 80036fc:	4639      	mov	r1, r7
 80036fe:	f7fd f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003702:	b918      	cbnz	r0, 800370c <__cvt+0xba>
 8003704:	f1c4 0401 	rsb	r4, r4, #1
 8003708:	f8ca 4000 	str.w	r4, [sl]
 800370c:	f8da 3000 	ldr.w	r3, [sl]
 8003710:	4499      	add	r9, r3
 8003712:	e7d3      	b.n	80036bc <__cvt+0x6a>
 8003714:	1c59      	adds	r1, r3, #1
 8003716:	9103      	str	r1, [sp, #12]
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e7d9      	b.n	80036d0 <__cvt+0x7e>

0800371c <__exponent>:
 800371c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800371e:	2900      	cmp	r1, #0
 8003720:	bfba      	itte	lt
 8003722:	4249      	neglt	r1, r1
 8003724:	232d      	movlt	r3, #45	@ 0x2d
 8003726:	232b      	movge	r3, #43	@ 0x2b
 8003728:	2909      	cmp	r1, #9
 800372a:	7002      	strb	r2, [r0, #0]
 800372c:	7043      	strb	r3, [r0, #1]
 800372e:	dd29      	ble.n	8003784 <__exponent+0x68>
 8003730:	f10d 0307 	add.w	r3, sp, #7
 8003734:	461d      	mov	r5, r3
 8003736:	270a      	movs	r7, #10
 8003738:	461a      	mov	r2, r3
 800373a:	fbb1 f6f7 	udiv	r6, r1, r7
 800373e:	fb07 1416 	mls	r4, r7, r6, r1
 8003742:	3430      	adds	r4, #48	@ 0x30
 8003744:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003748:	460c      	mov	r4, r1
 800374a:	2c63      	cmp	r4, #99	@ 0x63
 800374c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003750:	4631      	mov	r1, r6
 8003752:	dcf1      	bgt.n	8003738 <__exponent+0x1c>
 8003754:	3130      	adds	r1, #48	@ 0x30
 8003756:	1e94      	subs	r4, r2, #2
 8003758:	f803 1c01 	strb.w	r1, [r3, #-1]
 800375c:	1c41      	adds	r1, r0, #1
 800375e:	4623      	mov	r3, r4
 8003760:	42ab      	cmp	r3, r5
 8003762:	d30a      	bcc.n	800377a <__exponent+0x5e>
 8003764:	f10d 0309 	add.w	r3, sp, #9
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	42ac      	cmp	r4, r5
 800376c:	bf88      	it	hi
 800376e:	2300      	movhi	r3, #0
 8003770:	3302      	adds	r3, #2
 8003772:	4403      	add	r3, r0
 8003774:	1a18      	subs	r0, r3, r0
 8003776:	b003      	add	sp, #12
 8003778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800377e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003782:	e7ed      	b.n	8003760 <__exponent+0x44>
 8003784:	2330      	movs	r3, #48	@ 0x30
 8003786:	3130      	adds	r1, #48	@ 0x30
 8003788:	7083      	strb	r3, [r0, #2]
 800378a:	70c1      	strb	r1, [r0, #3]
 800378c:	1d03      	adds	r3, r0, #4
 800378e:	e7f1      	b.n	8003774 <__exponent+0x58>

08003790 <_printf_float>:
 8003790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003794:	b08d      	sub	sp, #52	@ 0x34
 8003796:	460c      	mov	r4, r1
 8003798:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800379c:	4616      	mov	r6, r2
 800379e:	461f      	mov	r7, r3
 80037a0:	4605      	mov	r5, r0
 80037a2:	f000 fee9 	bl	8004578 <_localeconv_r>
 80037a6:	6803      	ldr	r3, [r0, #0]
 80037a8:	9304      	str	r3, [sp, #16]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fd68 	bl	8000280 <strlen>
 80037b0:	2300      	movs	r3, #0
 80037b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80037b4:	f8d8 3000 	ldr.w	r3, [r8]
 80037b8:	9005      	str	r0, [sp, #20]
 80037ba:	3307      	adds	r3, #7
 80037bc:	f023 0307 	bic.w	r3, r3, #7
 80037c0:	f103 0208 	add.w	r2, r3, #8
 80037c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80037c8:	f8d4 b000 	ldr.w	fp, [r4]
 80037cc:	f8c8 2000 	str.w	r2, [r8]
 80037d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80037d8:	9307      	str	r3, [sp, #28]
 80037da:	f8cd 8018 	str.w	r8, [sp, #24]
 80037de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80037e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037e6:	4b9c      	ldr	r3, [pc, #624]	@ (8003a58 <_printf_float+0x2c8>)
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	f7fd f9a6 	bl	8000b3c <__aeabi_dcmpun>
 80037f0:	bb70      	cbnz	r0, 8003850 <_printf_float+0xc0>
 80037f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037f6:	4b98      	ldr	r3, [pc, #608]	@ (8003a58 <_printf_float+0x2c8>)
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	f7fd f980 	bl	8000b00 <__aeabi_dcmple>
 8003800:	bb30      	cbnz	r0, 8003850 <_printf_float+0xc0>
 8003802:	2200      	movs	r2, #0
 8003804:	2300      	movs	r3, #0
 8003806:	4640      	mov	r0, r8
 8003808:	4649      	mov	r1, r9
 800380a:	f7fd f96f 	bl	8000aec <__aeabi_dcmplt>
 800380e:	b110      	cbz	r0, 8003816 <_printf_float+0x86>
 8003810:	232d      	movs	r3, #45	@ 0x2d
 8003812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003816:	4a91      	ldr	r2, [pc, #580]	@ (8003a5c <_printf_float+0x2cc>)
 8003818:	4b91      	ldr	r3, [pc, #580]	@ (8003a60 <_printf_float+0x2d0>)
 800381a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800381e:	bf8c      	ite	hi
 8003820:	4690      	movhi	r8, r2
 8003822:	4698      	movls	r8, r3
 8003824:	2303      	movs	r3, #3
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	f02b 0304 	bic.w	r3, fp, #4
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	f04f 0900 	mov.w	r9, #0
 8003832:	9700      	str	r7, [sp, #0]
 8003834:	4633      	mov	r3, r6
 8003836:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003838:	4621      	mov	r1, r4
 800383a:	4628      	mov	r0, r5
 800383c:	f000 f9d2 	bl	8003be4 <_printf_common>
 8003840:	3001      	adds	r0, #1
 8003842:	f040 808d 	bne.w	8003960 <_printf_float+0x1d0>
 8003846:	f04f 30ff 	mov.w	r0, #4294967295
 800384a:	b00d      	add	sp, #52	@ 0x34
 800384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	4640      	mov	r0, r8
 8003856:	4649      	mov	r1, r9
 8003858:	f7fd f970 	bl	8000b3c <__aeabi_dcmpun>
 800385c:	b140      	cbz	r0, 8003870 <_printf_float+0xe0>
 800385e:	464b      	mov	r3, r9
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfbc      	itt	lt
 8003864:	232d      	movlt	r3, #45	@ 0x2d
 8003866:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800386a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a64 <_printf_float+0x2d4>)
 800386c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a68 <_printf_float+0x2d8>)
 800386e:	e7d4      	b.n	800381a <_printf_float+0x8a>
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003876:	9206      	str	r2, [sp, #24]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	d13b      	bne.n	80038f4 <_printf_float+0x164>
 800387c:	2306      	movs	r3, #6
 800387e:	6063      	str	r3, [r4, #4]
 8003880:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003884:	2300      	movs	r3, #0
 8003886:	6022      	str	r2, [r4, #0]
 8003888:	9303      	str	r3, [sp, #12]
 800388a:	ab0a      	add	r3, sp, #40	@ 0x28
 800388c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003890:	ab09      	add	r3, sp, #36	@ 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6861      	ldr	r1, [r4, #4]
 8003896:	ec49 8b10 	vmov	d0, r8, r9
 800389a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800389e:	4628      	mov	r0, r5
 80038a0:	f7ff fed7 	bl	8003652 <__cvt>
 80038a4:	9b06      	ldr	r3, [sp, #24]
 80038a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80038a8:	2b47      	cmp	r3, #71	@ 0x47
 80038aa:	4680      	mov	r8, r0
 80038ac:	d129      	bne.n	8003902 <_printf_float+0x172>
 80038ae:	1cc8      	adds	r0, r1, #3
 80038b0:	db02      	blt.n	80038b8 <_printf_float+0x128>
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	4299      	cmp	r1, r3
 80038b6:	dd41      	ble.n	800393c <_printf_float+0x1ac>
 80038b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80038bc:	fa5f fa8a 	uxtb.w	sl, sl
 80038c0:	3901      	subs	r1, #1
 80038c2:	4652      	mov	r2, sl
 80038c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80038c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80038ca:	f7ff ff27 	bl	800371c <__exponent>
 80038ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038d0:	1813      	adds	r3, r2, r0
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	4681      	mov	r9, r0
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	dc02      	bgt.n	80038e0 <_printf_float+0x150>
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	07d2      	lsls	r2, r2, #31
 80038de:	d501      	bpl.n	80038e4 <_printf_float+0x154>
 80038e0:	3301      	adds	r3, #1
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0a2      	beq.n	8003832 <_printf_float+0xa2>
 80038ec:	232d      	movs	r3, #45	@ 0x2d
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f2:	e79e      	b.n	8003832 <_printf_float+0xa2>
 80038f4:	9a06      	ldr	r2, [sp, #24]
 80038f6:	2a47      	cmp	r2, #71	@ 0x47
 80038f8:	d1c2      	bne.n	8003880 <_printf_float+0xf0>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1c0      	bne.n	8003880 <_printf_float+0xf0>
 80038fe:	2301      	movs	r3, #1
 8003900:	e7bd      	b.n	800387e <_printf_float+0xee>
 8003902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003906:	d9db      	bls.n	80038c0 <_printf_float+0x130>
 8003908:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800390c:	d118      	bne.n	8003940 <_printf_float+0x1b0>
 800390e:	2900      	cmp	r1, #0
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	dd0b      	ble.n	800392c <_printf_float+0x19c>
 8003914:	6121      	str	r1, [r4, #16]
 8003916:	b913      	cbnz	r3, 800391e <_printf_float+0x18e>
 8003918:	6822      	ldr	r2, [r4, #0]
 800391a:	07d0      	lsls	r0, r2, #31
 800391c:	d502      	bpl.n	8003924 <_printf_float+0x194>
 800391e:	3301      	adds	r3, #1
 8003920:	440b      	add	r3, r1
 8003922:	6123      	str	r3, [r4, #16]
 8003924:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003926:	f04f 0900 	mov.w	r9, #0
 800392a:	e7db      	b.n	80038e4 <_printf_float+0x154>
 800392c:	b913      	cbnz	r3, 8003934 <_printf_float+0x1a4>
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	07d2      	lsls	r2, r2, #31
 8003932:	d501      	bpl.n	8003938 <_printf_float+0x1a8>
 8003934:	3302      	adds	r3, #2
 8003936:	e7f4      	b.n	8003922 <_printf_float+0x192>
 8003938:	2301      	movs	r3, #1
 800393a:	e7f2      	b.n	8003922 <_printf_float+0x192>
 800393c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003942:	4299      	cmp	r1, r3
 8003944:	db05      	blt.n	8003952 <_printf_float+0x1c2>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	6121      	str	r1, [r4, #16]
 800394a:	07d8      	lsls	r0, r3, #31
 800394c:	d5ea      	bpl.n	8003924 <_printf_float+0x194>
 800394e:	1c4b      	adds	r3, r1, #1
 8003950:	e7e7      	b.n	8003922 <_printf_float+0x192>
 8003952:	2900      	cmp	r1, #0
 8003954:	bfd4      	ite	le
 8003956:	f1c1 0202 	rsble	r2, r1, #2
 800395a:	2201      	movgt	r2, #1
 800395c:	4413      	add	r3, r2
 800395e:	e7e0      	b.n	8003922 <_printf_float+0x192>
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	055a      	lsls	r2, r3, #21
 8003964:	d407      	bmi.n	8003976 <_printf_float+0x1e6>
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	4642      	mov	r2, r8
 800396a:	4631      	mov	r1, r6
 800396c:	4628      	mov	r0, r5
 800396e:	47b8      	blx	r7
 8003970:	3001      	adds	r0, #1
 8003972:	d12b      	bne.n	80039cc <_printf_float+0x23c>
 8003974:	e767      	b.n	8003846 <_printf_float+0xb6>
 8003976:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800397a:	f240 80dd 	bls.w	8003b38 <_printf_float+0x3a8>
 800397e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003982:	2200      	movs	r2, #0
 8003984:	2300      	movs	r3, #0
 8003986:	f7fd f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800398a:	2800      	cmp	r0, #0
 800398c:	d033      	beq.n	80039f6 <_printf_float+0x266>
 800398e:	4a37      	ldr	r2, [pc, #220]	@ (8003a6c <_printf_float+0x2dc>)
 8003990:	2301      	movs	r3, #1
 8003992:	4631      	mov	r1, r6
 8003994:	4628      	mov	r0, r5
 8003996:	47b8      	blx	r7
 8003998:	3001      	adds	r0, #1
 800399a:	f43f af54 	beq.w	8003846 <_printf_float+0xb6>
 800399e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80039a2:	4543      	cmp	r3, r8
 80039a4:	db02      	blt.n	80039ac <_printf_float+0x21c>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	07d8      	lsls	r0, r3, #31
 80039aa:	d50f      	bpl.n	80039cc <_printf_float+0x23c>
 80039ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039b0:	4631      	mov	r1, r6
 80039b2:	4628      	mov	r0, r5
 80039b4:	47b8      	blx	r7
 80039b6:	3001      	adds	r0, #1
 80039b8:	f43f af45 	beq.w	8003846 <_printf_float+0xb6>
 80039bc:	f04f 0900 	mov.w	r9, #0
 80039c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80039c4:	f104 0a1a 	add.w	sl, r4, #26
 80039c8:	45c8      	cmp	r8, r9
 80039ca:	dc09      	bgt.n	80039e0 <_printf_float+0x250>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	079b      	lsls	r3, r3, #30
 80039d0:	f100 8103 	bmi.w	8003bda <_printf_float+0x44a>
 80039d4:	68e0      	ldr	r0, [r4, #12]
 80039d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039d8:	4298      	cmp	r0, r3
 80039da:	bfb8      	it	lt
 80039dc:	4618      	movlt	r0, r3
 80039de:	e734      	b.n	800384a <_printf_float+0xba>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4652      	mov	r2, sl
 80039e4:	4631      	mov	r1, r6
 80039e6:	4628      	mov	r0, r5
 80039e8:	47b8      	blx	r7
 80039ea:	3001      	adds	r0, #1
 80039ec:	f43f af2b 	beq.w	8003846 <_printf_float+0xb6>
 80039f0:	f109 0901 	add.w	r9, r9, #1
 80039f4:	e7e8      	b.n	80039c8 <_printf_float+0x238>
 80039f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dc39      	bgt.n	8003a70 <_printf_float+0x2e0>
 80039fc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <_printf_float+0x2dc>)
 80039fe:	2301      	movs	r3, #1
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	47b8      	blx	r7
 8003a06:	3001      	adds	r0, #1
 8003a08:	f43f af1d 	beq.w	8003846 <_printf_float+0xb6>
 8003a0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003a10:	ea59 0303 	orrs.w	r3, r9, r3
 8003a14:	d102      	bne.n	8003a1c <_printf_float+0x28c>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	07d9      	lsls	r1, r3, #31
 8003a1a:	d5d7      	bpl.n	80039cc <_printf_float+0x23c>
 8003a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a20:	4631      	mov	r1, r6
 8003a22:	4628      	mov	r0, r5
 8003a24:	47b8      	blx	r7
 8003a26:	3001      	adds	r0, #1
 8003a28:	f43f af0d 	beq.w	8003846 <_printf_float+0xb6>
 8003a2c:	f04f 0a00 	mov.w	sl, #0
 8003a30:	f104 0b1a 	add.w	fp, r4, #26
 8003a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a36:	425b      	negs	r3, r3
 8003a38:	4553      	cmp	r3, sl
 8003a3a:	dc01      	bgt.n	8003a40 <_printf_float+0x2b0>
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	e793      	b.n	8003968 <_printf_float+0x1d8>
 8003a40:	2301      	movs	r3, #1
 8003a42:	465a      	mov	r2, fp
 8003a44:	4631      	mov	r1, r6
 8003a46:	4628      	mov	r0, r5
 8003a48:	47b8      	blx	r7
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	f43f aefb 	beq.w	8003846 <_printf_float+0xb6>
 8003a50:	f10a 0a01 	add.w	sl, sl, #1
 8003a54:	e7ee      	b.n	8003a34 <_printf_float+0x2a4>
 8003a56:	bf00      	nop
 8003a58:	7fefffff 	.word	0x7fefffff
 8003a5c:	08007e3a 	.word	0x08007e3a
 8003a60:	08007e36 	.word	0x08007e36
 8003a64:	08007e42 	.word	0x08007e42
 8003a68:	08007e3e 	.word	0x08007e3e
 8003a6c:	08007e46 	.word	0x08007e46
 8003a70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a76:	4553      	cmp	r3, sl
 8003a78:	bfa8      	it	ge
 8003a7a:	4653      	movge	r3, sl
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	4699      	mov	r9, r3
 8003a80:	dc36      	bgt.n	8003af0 <_printf_float+0x360>
 8003a82:	f04f 0b00 	mov.w	fp, #0
 8003a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a8a:	f104 021a 	add.w	r2, r4, #26
 8003a8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a90:	9306      	str	r3, [sp, #24]
 8003a92:	eba3 0309 	sub.w	r3, r3, r9
 8003a96:	455b      	cmp	r3, fp
 8003a98:	dc31      	bgt.n	8003afe <_printf_float+0x36e>
 8003a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a9c:	459a      	cmp	sl, r3
 8003a9e:	dc3a      	bgt.n	8003b16 <_printf_float+0x386>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	07da      	lsls	r2, r3, #31
 8003aa4:	d437      	bmi.n	8003b16 <_printf_float+0x386>
 8003aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aa8:	ebaa 0903 	sub.w	r9, sl, r3
 8003aac:	9b06      	ldr	r3, [sp, #24]
 8003aae:	ebaa 0303 	sub.w	r3, sl, r3
 8003ab2:	4599      	cmp	r9, r3
 8003ab4:	bfa8      	it	ge
 8003ab6:	4699      	movge	r9, r3
 8003ab8:	f1b9 0f00 	cmp.w	r9, #0
 8003abc:	dc33      	bgt.n	8003b26 <_printf_float+0x396>
 8003abe:	f04f 0800 	mov.w	r8, #0
 8003ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ac6:	f104 0b1a 	add.w	fp, r4, #26
 8003aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003acc:	ebaa 0303 	sub.w	r3, sl, r3
 8003ad0:	eba3 0309 	sub.w	r3, r3, r9
 8003ad4:	4543      	cmp	r3, r8
 8003ad6:	f77f af79 	ble.w	80039cc <_printf_float+0x23c>
 8003ada:	2301      	movs	r3, #1
 8003adc:	465a      	mov	r2, fp
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f aeae 	beq.w	8003846 <_printf_float+0xb6>
 8003aea:	f108 0801 	add.w	r8, r8, #1
 8003aee:	e7ec      	b.n	8003aca <_printf_float+0x33a>
 8003af0:	4642      	mov	r2, r8
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	d1c2      	bne.n	8003a82 <_printf_float+0x2f2>
 8003afc:	e6a3      	b.n	8003846 <_printf_float+0xb6>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4631      	mov	r1, r6
 8003b02:	4628      	mov	r0, r5
 8003b04:	9206      	str	r2, [sp, #24]
 8003b06:	47b8      	blx	r7
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f43f ae9c 	beq.w	8003846 <_printf_float+0xb6>
 8003b0e:	9a06      	ldr	r2, [sp, #24]
 8003b10:	f10b 0b01 	add.w	fp, fp, #1
 8003b14:	e7bb      	b.n	8003a8e <_printf_float+0x2fe>
 8003b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	d1c0      	bne.n	8003aa6 <_printf_float+0x316>
 8003b24:	e68f      	b.n	8003846 <_printf_float+0xb6>
 8003b26:	9a06      	ldr	r2, [sp, #24]
 8003b28:	464b      	mov	r3, r9
 8003b2a:	4442      	add	r2, r8
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	d1c3      	bne.n	8003abe <_printf_float+0x32e>
 8003b36:	e686      	b.n	8003846 <_printf_float+0xb6>
 8003b38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003b3c:	f1ba 0f01 	cmp.w	sl, #1
 8003b40:	dc01      	bgt.n	8003b46 <_printf_float+0x3b6>
 8003b42:	07db      	lsls	r3, r3, #31
 8003b44:	d536      	bpl.n	8003bb4 <_printf_float+0x424>
 8003b46:	2301      	movs	r3, #1
 8003b48:	4642      	mov	r2, r8
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	47b8      	blx	r7
 8003b50:	3001      	adds	r0, #1
 8003b52:	f43f ae78 	beq.w	8003846 <_printf_float+0xb6>
 8003b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b8      	blx	r7
 8003b60:	3001      	adds	r0, #1
 8003b62:	f43f ae70 	beq.w	8003846 <_printf_float+0xb6>
 8003b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b72:	f7fc ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b76:	b9c0      	cbnz	r0, 8003baa <_printf_float+0x41a>
 8003b78:	4653      	mov	r3, sl
 8003b7a:	f108 0201 	add.w	r2, r8, #1
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	d10c      	bne.n	8003ba2 <_printf_float+0x412>
 8003b88:	e65d      	b.n	8003846 <_printf_float+0xb6>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	465a      	mov	r2, fp
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b8      	blx	r7
 8003b94:	3001      	adds	r0, #1
 8003b96:	f43f ae56 	beq.w	8003846 <_printf_float+0xb6>
 8003b9a:	f108 0801 	add.w	r8, r8, #1
 8003b9e:	45d0      	cmp	r8, sl
 8003ba0:	dbf3      	blt.n	8003b8a <_printf_float+0x3fa>
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ba8:	e6df      	b.n	800396a <_printf_float+0x1da>
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	f104 0b1a 	add.w	fp, r4, #26
 8003bb2:	e7f4      	b.n	8003b9e <_printf_float+0x40e>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	e7e1      	b.n	8003b7e <_printf_float+0x3ee>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	464a      	mov	r2, r9
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b8      	blx	r7
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	f43f ae3e 	beq.w	8003846 <_printf_float+0xb6>
 8003bca:	f108 0801 	add.w	r8, r8, #1
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003bd2:	1a5b      	subs	r3, r3, r1
 8003bd4:	4543      	cmp	r3, r8
 8003bd6:	dcf0      	bgt.n	8003bba <_printf_float+0x42a>
 8003bd8:	e6fc      	b.n	80039d4 <_printf_float+0x244>
 8003bda:	f04f 0800 	mov.w	r8, #0
 8003bde:	f104 0919 	add.w	r9, r4, #25
 8003be2:	e7f4      	b.n	8003bce <_printf_float+0x43e>

08003be4 <_printf_common>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4616      	mov	r6, r2
 8003bea:	4698      	mov	r8, r3
 8003bec:	688a      	ldr	r2, [r1, #8]
 8003bee:	690b      	ldr	r3, [r1, #16]
 8003bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bfb8      	it	lt
 8003bf8:	4613      	movlt	r3, r2
 8003bfa:	6033      	str	r3, [r6, #0]
 8003bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c00:	4607      	mov	r7, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	b10a      	cbz	r2, 8003c0a <_printf_common+0x26>
 8003c06:	3301      	adds	r3, #1
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	0699      	lsls	r1, r3, #26
 8003c0e:	bf42      	ittt	mi
 8003c10:	6833      	ldrmi	r3, [r6, #0]
 8003c12:	3302      	addmi	r3, #2
 8003c14:	6033      	strmi	r3, [r6, #0]
 8003c16:	6825      	ldr	r5, [r4, #0]
 8003c18:	f015 0506 	ands.w	r5, r5, #6
 8003c1c:	d106      	bne.n	8003c2c <_printf_common+0x48>
 8003c1e:	f104 0a19 	add.w	sl, r4, #25
 8003c22:	68e3      	ldr	r3, [r4, #12]
 8003c24:	6832      	ldr	r2, [r6, #0]
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	42ab      	cmp	r3, r5
 8003c2a:	dc26      	bgt.n	8003c7a <_printf_common+0x96>
 8003c2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	3b00      	subs	r3, #0
 8003c34:	bf18      	it	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	0692      	lsls	r2, r2, #26
 8003c3a:	d42b      	bmi.n	8003c94 <_printf_common+0xb0>
 8003c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c40:	4641      	mov	r1, r8
 8003c42:	4638      	mov	r0, r7
 8003c44:	47c8      	blx	r9
 8003c46:	3001      	adds	r0, #1
 8003c48:	d01e      	beq.n	8003c88 <_printf_common+0xa4>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	6922      	ldr	r2, [r4, #16]
 8003c4e:	f003 0306 	and.w	r3, r3, #6
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	bf02      	ittt	eq
 8003c56:	68e5      	ldreq	r5, [r4, #12]
 8003c58:	6833      	ldreq	r3, [r6, #0]
 8003c5a:	1aed      	subeq	r5, r5, r3
 8003c5c:	68a3      	ldr	r3, [r4, #8]
 8003c5e:	bf0c      	ite	eq
 8003c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c64:	2500      	movne	r5, #0
 8003c66:	4293      	cmp	r3, r2
 8003c68:	bfc4      	itt	gt
 8003c6a:	1a9b      	subgt	r3, r3, r2
 8003c6c:	18ed      	addgt	r5, r5, r3
 8003c6e:	2600      	movs	r6, #0
 8003c70:	341a      	adds	r4, #26
 8003c72:	42b5      	cmp	r5, r6
 8003c74:	d11a      	bne.n	8003cac <_printf_common+0xc8>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e008      	b.n	8003c8c <_printf_common+0xa8>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4652      	mov	r2, sl
 8003c7e:	4641      	mov	r1, r8
 8003c80:	4638      	mov	r0, r7
 8003c82:	47c8      	blx	r9
 8003c84:	3001      	adds	r0, #1
 8003c86:	d103      	bne.n	8003c90 <_printf_common+0xac>
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	3501      	adds	r5, #1
 8003c92:	e7c6      	b.n	8003c22 <_printf_common+0x3e>
 8003c94:	18e1      	adds	r1, r4, r3
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	2030      	movs	r0, #48	@ 0x30
 8003c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c9e:	4422      	add	r2, r4
 8003ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ca4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ca8:	3302      	adds	r3, #2
 8003caa:	e7c7      	b.n	8003c3c <_printf_common+0x58>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4622      	mov	r2, r4
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c8      	blx	r9
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d0e6      	beq.n	8003c88 <_printf_common+0xa4>
 8003cba:	3601      	adds	r6, #1
 8003cbc:	e7d9      	b.n	8003c72 <_printf_common+0x8e>
	...

08003cc0 <_printf_i>:
 8003cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc4:	7e0f      	ldrb	r7, [r1, #24]
 8003cc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cc8:	2f78      	cmp	r7, #120	@ 0x78
 8003cca:	4691      	mov	r9, r2
 8003ccc:	4680      	mov	r8, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	469a      	mov	sl, r3
 8003cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cd6:	d807      	bhi.n	8003ce8 <_printf_i+0x28>
 8003cd8:	2f62      	cmp	r7, #98	@ 0x62
 8003cda:	d80a      	bhi.n	8003cf2 <_printf_i+0x32>
 8003cdc:	2f00      	cmp	r7, #0
 8003cde:	f000 80d1 	beq.w	8003e84 <_printf_i+0x1c4>
 8003ce2:	2f58      	cmp	r7, #88	@ 0x58
 8003ce4:	f000 80b8 	beq.w	8003e58 <_printf_i+0x198>
 8003ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cf0:	e03a      	b.n	8003d68 <_printf_i+0xa8>
 8003cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cf6:	2b15      	cmp	r3, #21
 8003cf8:	d8f6      	bhi.n	8003ce8 <_printf_i+0x28>
 8003cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8003d00 <_printf_i+0x40>)
 8003cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d6d 	.word	0x08003d6d
 8003d08:	08003ce9 	.word	0x08003ce9
 8003d0c:	08003ce9 	.word	0x08003ce9
 8003d10:	08003ce9 	.word	0x08003ce9
 8003d14:	08003ce9 	.word	0x08003ce9
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003ce9 	.word	0x08003ce9
 8003d20:	08003ce9 	.word	0x08003ce9
 8003d24:	08003ce9 	.word	0x08003ce9
 8003d28:	08003ce9 	.word	0x08003ce9
 8003d2c:	08003e6b 	.word	0x08003e6b
 8003d30:	08003d97 	.word	0x08003d97
 8003d34:	08003e25 	.word	0x08003e25
 8003d38:	08003ce9 	.word	0x08003ce9
 8003d3c:	08003ce9 	.word	0x08003ce9
 8003d40:	08003e8d 	.word	0x08003e8d
 8003d44:	08003ce9 	.word	0x08003ce9
 8003d48:	08003d97 	.word	0x08003d97
 8003d4c:	08003ce9 	.word	0x08003ce9
 8003d50:	08003ce9 	.word	0x08003ce9
 8003d54:	08003e2d 	.word	0x08003e2d
 8003d58:	6833      	ldr	r3, [r6, #0]
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6032      	str	r2, [r6, #0]
 8003d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e09c      	b.n	8003ea6 <_printf_i+0x1e6>
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	1d19      	adds	r1, r3, #4
 8003d72:	6031      	str	r1, [r6, #0]
 8003d74:	0606      	lsls	r6, r0, #24
 8003d76:	d501      	bpl.n	8003d7c <_printf_i+0xbc>
 8003d78:	681d      	ldr	r5, [r3, #0]
 8003d7a:	e003      	b.n	8003d84 <_printf_i+0xc4>
 8003d7c:	0645      	lsls	r5, r0, #25
 8003d7e:	d5fb      	bpl.n	8003d78 <_printf_i+0xb8>
 8003d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d84:	2d00      	cmp	r5, #0
 8003d86:	da03      	bge.n	8003d90 <_printf_i+0xd0>
 8003d88:	232d      	movs	r3, #45	@ 0x2d
 8003d8a:	426d      	negs	r5, r5
 8003d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d90:	4858      	ldr	r0, [pc, #352]	@ (8003ef4 <_printf_i+0x234>)
 8003d92:	230a      	movs	r3, #10
 8003d94:	e011      	b.n	8003dba <_printf_i+0xfa>
 8003d96:	6821      	ldr	r1, [r4, #0]
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	0608      	lsls	r0, r1, #24
 8003d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003da0:	d402      	bmi.n	8003da8 <_printf_i+0xe8>
 8003da2:	0649      	lsls	r1, r1, #25
 8003da4:	bf48      	it	mi
 8003da6:	b2ad      	uxthmi	r5, r5
 8003da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003daa:	4852      	ldr	r0, [pc, #328]	@ (8003ef4 <_printf_i+0x234>)
 8003dac:	6033      	str	r3, [r6, #0]
 8003dae:	bf14      	ite	ne
 8003db0:	230a      	movne	r3, #10
 8003db2:	2308      	moveq	r3, #8
 8003db4:	2100      	movs	r1, #0
 8003db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dba:	6866      	ldr	r6, [r4, #4]
 8003dbc:	60a6      	str	r6, [r4, #8]
 8003dbe:	2e00      	cmp	r6, #0
 8003dc0:	db05      	blt.n	8003dce <_printf_i+0x10e>
 8003dc2:	6821      	ldr	r1, [r4, #0]
 8003dc4:	432e      	orrs	r6, r5
 8003dc6:	f021 0104 	bic.w	r1, r1, #4
 8003dca:	6021      	str	r1, [r4, #0]
 8003dcc:	d04b      	beq.n	8003e66 <_printf_i+0x1a6>
 8003dce:	4616      	mov	r6, r2
 8003dd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dd4:	fb03 5711 	mls	r7, r3, r1, r5
 8003dd8:	5dc7      	ldrb	r7, [r0, r7]
 8003dda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dde:	462f      	mov	r7, r5
 8003de0:	42bb      	cmp	r3, r7
 8003de2:	460d      	mov	r5, r1
 8003de4:	d9f4      	bls.n	8003dd0 <_printf_i+0x110>
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d10b      	bne.n	8003e02 <_printf_i+0x142>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	07df      	lsls	r7, r3, #31
 8003dee:	d508      	bpl.n	8003e02 <_printf_i+0x142>
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	6861      	ldr	r1, [r4, #4]
 8003df4:	4299      	cmp	r1, r3
 8003df6:	bfde      	ittt	le
 8003df8:	2330      	movle	r3, #48	@ 0x30
 8003dfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e02:	1b92      	subs	r2, r2, r6
 8003e04:	6122      	str	r2, [r4, #16]
 8003e06:	f8cd a000 	str.w	sl, [sp]
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	aa03      	add	r2, sp, #12
 8003e0e:	4621      	mov	r1, r4
 8003e10:	4640      	mov	r0, r8
 8003e12:	f7ff fee7 	bl	8003be4 <_printf_common>
 8003e16:	3001      	adds	r0, #1
 8003e18:	d14a      	bne.n	8003eb0 <_printf_i+0x1f0>
 8003e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1e:	b004      	add	sp, #16
 8003e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	f043 0320 	orr.w	r3, r3, #32
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	4832      	ldr	r0, [pc, #200]	@ (8003ef8 <_printf_i+0x238>)
 8003e2e:	2778      	movs	r7, #120	@ 0x78
 8003e30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	6831      	ldr	r1, [r6, #0]
 8003e38:	061f      	lsls	r7, r3, #24
 8003e3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e3e:	d402      	bmi.n	8003e46 <_printf_i+0x186>
 8003e40:	065f      	lsls	r7, r3, #25
 8003e42:	bf48      	it	mi
 8003e44:	b2ad      	uxthmi	r5, r5
 8003e46:	6031      	str	r1, [r6, #0]
 8003e48:	07d9      	lsls	r1, r3, #31
 8003e4a:	bf44      	itt	mi
 8003e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e50:	6023      	strmi	r3, [r4, #0]
 8003e52:	b11d      	cbz	r5, 8003e5c <_printf_i+0x19c>
 8003e54:	2310      	movs	r3, #16
 8003e56:	e7ad      	b.n	8003db4 <_printf_i+0xf4>
 8003e58:	4826      	ldr	r0, [pc, #152]	@ (8003ef4 <_printf_i+0x234>)
 8003e5a:	e7e9      	b.n	8003e30 <_printf_i+0x170>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f023 0320 	bic.w	r3, r3, #32
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	e7f6      	b.n	8003e54 <_printf_i+0x194>
 8003e66:	4616      	mov	r6, r2
 8003e68:	e7bd      	b.n	8003de6 <_printf_i+0x126>
 8003e6a:	6833      	ldr	r3, [r6, #0]
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	6961      	ldr	r1, [r4, #20]
 8003e70:	1d18      	adds	r0, r3, #4
 8003e72:	6030      	str	r0, [r6, #0]
 8003e74:	062e      	lsls	r6, r5, #24
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	d501      	bpl.n	8003e7e <_printf_i+0x1be>
 8003e7a:	6019      	str	r1, [r3, #0]
 8003e7c:	e002      	b.n	8003e84 <_printf_i+0x1c4>
 8003e7e:	0668      	lsls	r0, r5, #25
 8003e80:	d5fb      	bpl.n	8003e7a <_printf_i+0x1ba>
 8003e82:	8019      	strh	r1, [r3, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	4616      	mov	r6, r2
 8003e8a:	e7bc      	b.n	8003e06 <_printf_i+0x146>
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	6032      	str	r2, [r6, #0]
 8003e92:	681e      	ldr	r6, [r3, #0]
 8003e94:	6862      	ldr	r2, [r4, #4]
 8003e96:	2100      	movs	r1, #0
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f7fc f9a1 	bl	80001e0 <memchr>
 8003e9e:	b108      	cbz	r0, 8003ea4 <_printf_i+0x1e4>
 8003ea0:	1b80      	subs	r0, r0, r6
 8003ea2:	6060      	str	r0, [r4, #4]
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eae:	e7aa      	b.n	8003e06 <_printf_i+0x146>
 8003eb0:	6923      	ldr	r3, [r4, #16]
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	47d0      	blx	sl
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d0ad      	beq.n	8003e1a <_printf_i+0x15a>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	079b      	lsls	r3, r3, #30
 8003ec2:	d413      	bmi.n	8003eec <_printf_i+0x22c>
 8003ec4:	68e0      	ldr	r0, [r4, #12]
 8003ec6:	9b03      	ldr	r3, [sp, #12]
 8003ec8:	4298      	cmp	r0, r3
 8003eca:	bfb8      	it	lt
 8003ecc:	4618      	movlt	r0, r3
 8003ece:	e7a6      	b.n	8003e1e <_printf_i+0x15e>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	47d0      	blx	sl
 8003eda:	3001      	adds	r0, #1
 8003edc:	d09d      	beq.n	8003e1a <_printf_i+0x15a>
 8003ede:	3501      	adds	r5, #1
 8003ee0:	68e3      	ldr	r3, [r4, #12]
 8003ee2:	9903      	ldr	r1, [sp, #12]
 8003ee4:	1a5b      	subs	r3, r3, r1
 8003ee6:	42ab      	cmp	r3, r5
 8003ee8:	dcf2      	bgt.n	8003ed0 <_printf_i+0x210>
 8003eea:	e7eb      	b.n	8003ec4 <_printf_i+0x204>
 8003eec:	2500      	movs	r5, #0
 8003eee:	f104 0619 	add.w	r6, r4, #25
 8003ef2:	e7f5      	b.n	8003ee0 <_printf_i+0x220>
 8003ef4:	08007e48 	.word	0x08007e48
 8003ef8:	08007e59 	.word	0x08007e59

08003efc <_scanf_float>:
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	b087      	sub	sp, #28
 8003f02:	4691      	mov	r9, r2
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	688b      	ldr	r3, [r1, #8]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003f0e:	bf81      	itttt	hi
 8003f10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003f14:	eb03 0b05 	addhi.w	fp, r3, r5
 8003f18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003f1c:	608b      	strhi	r3, [r1, #8]
 8003f1e:	680b      	ldr	r3, [r1, #0]
 8003f20:	460a      	mov	r2, r1
 8003f22:	f04f 0500 	mov.w	r5, #0
 8003f26:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003f2a:	f842 3b1c 	str.w	r3, [r2], #28
 8003f2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003f32:	4680      	mov	r8, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	bf98      	it	ls
 8003f38:	f04f 0b00 	movls.w	fp, #0
 8003f3c:	9201      	str	r2, [sp, #4]
 8003f3e:	4616      	mov	r6, r2
 8003f40:	46aa      	mov	sl, r5
 8003f42:	462f      	mov	r7, r5
 8003f44:	9502      	str	r5, [sp, #8]
 8003f46:	68a2      	ldr	r2, [r4, #8]
 8003f48:	b15a      	cbz	r2, 8003f62 <_scanf_float+0x66>
 8003f4a:	f8d9 3000 	ldr.w	r3, [r9]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f52:	d863      	bhi.n	800401c <_scanf_float+0x120>
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d83b      	bhi.n	8003fd0 <_scanf_float+0xd4>
 8003f58:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003f5c:	b2c8      	uxtb	r0, r1
 8003f5e:	280e      	cmp	r0, #14
 8003f60:	d939      	bls.n	8003fd6 <_scanf_float+0xda>
 8003f62:	b11f      	cbz	r7, 8003f6c <_scanf_float+0x70>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f70:	f1ba 0f01 	cmp.w	sl, #1
 8003f74:	f200 8114 	bhi.w	80041a0 <_scanf_float+0x2a4>
 8003f78:	9b01      	ldr	r3, [sp, #4]
 8003f7a:	429e      	cmp	r6, r3
 8003f7c:	f200 8105 	bhi.w	800418a <_scanf_float+0x28e>
 8003f80:	2001      	movs	r0, #1
 8003f82:	b007      	add	sp, #28
 8003f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f88:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003f8c:	2a0d      	cmp	r2, #13
 8003f8e:	d8e8      	bhi.n	8003f62 <_scanf_float+0x66>
 8003f90:	a101      	add	r1, pc, #4	@ (adr r1, 8003f98 <_scanf_float+0x9c>)
 8003f92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	080040e1 	.word	0x080040e1
 8003f9c:	08003f63 	.word	0x08003f63
 8003fa0:	08003f63 	.word	0x08003f63
 8003fa4:	08003f63 	.word	0x08003f63
 8003fa8:	0800413d 	.word	0x0800413d
 8003fac:	08004117 	.word	0x08004117
 8003fb0:	08003f63 	.word	0x08003f63
 8003fb4:	08003f63 	.word	0x08003f63
 8003fb8:	080040ef 	.word	0x080040ef
 8003fbc:	08003f63 	.word	0x08003f63
 8003fc0:	08003f63 	.word	0x08003f63
 8003fc4:	08003f63 	.word	0x08003f63
 8003fc8:	08003f63 	.word	0x08003f63
 8003fcc:	080040ab 	.word	0x080040ab
 8003fd0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003fd4:	e7da      	b.n	8003f8c <_scanf_float+0x90>
 8003fd6:	290e      	cmp	r1, #14
 8003fd8:	d8c3      	bhi.n	8003f62 <_scanf_float+0x66>
 8003fda:	a001      	add	r0, pc, #4	@ (adr r0, 8003fe0 <_scanf_float+0xe4>)
 8003fdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003fe0:	0800409b 	.word	0x0800409b
 8003fe4:	08003f63 	.word	0x08003f63
 8003fe8:	0800409b 	.word	0x0800409b
 8003fec:	0800412b 	.word	0x0800412b
 8003ff0:	08003f63 	.word	0x08003f63
 8003ff4:	0800403d 	.word	0x0800403d
 8003ff8:	08004081 	.word	0x08004081
 8003ffc:	08004081 	.word	0x08004081
 8004000:	08004081 	.word	0x08004081
 8004004:	08004081 	.word	0x08004081
 8004008:	08004081 	.word	0x08004081
 800400c:	08004081 	.word	0x08004081
 8004010:	08004081 	.word	0x08004081
 8004014:	08004081 	.word	0x08004081
 8004018:	08004081 	.word	0x08004081
 800401c:	2b6e      	cmp	r3, #110	@ 0x6e
 800401e:	d809      	bhi.n	8004034 <_scanf_float+0x138>
 8004020:	2b60      	cmp	r3, #96	@ 0x60
 8004022:	d8b1      	bhi.n	8003f88 <_scanf_float+0x8c>
 8004024:	2b54      	cmp	r3, #84	@ 0x54
 8004026:	d07b      	beq.n	8004120 <_scanf_float+0x224>
 8004028:	2b59      	cmp	r3, #89	@ 0x59
 800402a:	d19a      	bne.n	8003f62 <_scanf_float+0x66>
 800402c:	2d07      	cmp	r5, #7
 800402e:	d198      	bne.n	8003f62 <_scanf_float+0x66>
 8004030:	2508      	movs	r5, #8
 8004032:	e02f      	b.n	8004094 <_scanf_float+0x198>
 8004034:	2b74      	cmp	r3, #116	@ 0x74
 8004036:	d073      	beq.n	8004120 <_scanf_float+0x224>
 8004038:	2b79      	cmp	r3, #121	@ 0x79
 800403a:	e7f6      	b.n	800402a <_scanf_float+0x12e>
 800403c:	6821      	ldr	r1, [r4, #0]
 800403e:	05c8      	lsls	r0, r1, #23
 8004040:	d51e      	bpl.n	8004080 <_scanf_float+0x184>
 8004042:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004046:	6021      	str	r1, [r4, #0]
 8004048:	3701      	adds	r7, #1
 800404a:	f1bb 0f00 	cmp.w	fp, #0
 800404e:	d003      	beq.n	8004058 <_scanf_float+0x15c>
 8004050:	3201      	adds	r2, #1
 8004052:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004056:	60a2      	str	r2, [r4, #8]
 8004058:	68a3      	ldr	r3, [r4, #8]
 800405a:	3b01      	subs	r3, #1
 800405c:	60a3      	str	r3, [r4, #8]
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	3301      	adds	r3, #1
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004068:	3b01      	subs	r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f8c9 3004 	str.w	r3, [r9, #4]
 8004070:	f340 8082 	ble.w	8004178 <_scanf_float+0x27c>
 8004074:	f8d9 3000 	ldr.w	r3, [r9]
 8004078:	3301      	adds	r3, #1
 800407a:	f8c9 3000 	str.w	r3, [r9]
 800407e:	e762      	b.n	8003f46 <_scanf_float+0x4a>
 8004080:	eb1a 0105 	adds.w	r1, sl, r5
 8004084:	f47f af6d 	bne.w	8003f62 <_scanf_float+0x66>
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800408e:	6022      	str	r2, [r4, #0]
 8004090:	460d      	mov	r5, r1
 8004092:	468a      	mov	sl, r1
 8004094:	f806 3b01 	strb.w	r3, [r6], #1
 8004098:	e7de      	b.n	8004058 <_scanf_float+0x15c>
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	0610      	lsls	r0, r2, #24
 800409e:	f57f af60 	bpl.w	8003f62 <_scanf_float+0x66>
 80040a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040a6:	6022      	str	r2, [r4, #0]
 80040a8:	e7f4      	b.n	8004094 <_scanf_float+0x198>
 80040aa:	f1ba 0f00 	cmp.w	sl, #0
 80040ae:	d10c      	bne.n	80040ca <_scanf_float+0x1ce>
 80040b0:	b977      	cbnz	r7, 80040d0 <_scanf_float+0x1d4>
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80040b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80040bc:	d108      	bne.n	80040d0 <_scanf_float+0x1d4>
 80040be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	f04f 0a01 	mov.w	sl, #1
 80040c8:	e7e4      	b.n	8004094 <_scanf_float+0x198>
 80040ca:	f1ba 0f02 	cmp.w	sl, #2
 80040ce:	d050      	beq.n	8004172 <_scanf_float+0x276>
 80040d0:	2d01      	cmp	r5, #1
 80040d2:	d002      	beq.n	80040da <_scanf_float+0x1de>
 80040d4:	2d04      	cmp	r5, #4
 80040d6:	f47f af44 	bne.w	8003f62 <_scanf_float+0x66>
 80040da:	3501      	adds	r5, #1
 80040dc:	b2ed      	uxtb	r5, r5
 80040de:	e7d9      	b.n	8004094 <_scanf_float+0x198>
 80040e0:	f1ba 0f01 	cmp.w	sl, #1
 80040e4:	f47f af3d 	bne.w	8003f62 <_scanf_float+0x66>
 80040e8:	f04f 0a02 	mov.w	sl, #2
 80040ec:	e7d2      	b.n	8004094 <_scanf_float+0x198>
 80040ee:	b975      	cbnz	r5, 800410e <_scanf_float+0x212>
 80040f0:	2f00      	cmp	r7, #0
 80040f2:	f47f af37 	bne.w	8003f64 <_scanf_float+0x68>
 80040f6:	6822      	ldr	r2, [r4, #0]
 80040f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80040fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004100:	f040 8103 	bne.w	800430a <_scanf_float+0x40e>
 8004104:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004108:	6022      	str	r2, [r4, #0]
 800410a:	2501      	movs	r5, #1
 800410c:	e7c2      	b.n	8004094 <_scanf_float+0x198>
 800410e:	2d03      	cmp	r5, #3
 8004110:	d0e3      	beq.n	80040da <_scanf_float+0x1de>
 8004112:	2d05      	cmp	r5, #5
 8004114:	e7df      	b.n	80040d6 <_scanf_float+0x1da>
 8004116:	2d02      	cmp	r5, #2
 8004118:	f47f af23 	bne.w	8003f62 <_scanf_float+0x66>
 800411c:	2503      	movs	r5, #3
 800411e:	e7b9      	b.n	8004094 <_scanf_float+0x198>
 8004120:	2d06      	cmp	r5, #6
 8004122:	f47f af1e 	bne.w	8003f62 <_scanf_float+0x66>
 8004126:	2507      	movs	r5, #7
 8004128:	e7b4      	b.n	8004094 <_scanf_float+0x198>
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	0591      	lsls	r1, r2, #22
 800412e:	f57f af18 	bpl.w	8003f62 <_scanf_float+0x66>
 8004132:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004136:	6022      	str	r2, [r4, #0]
 8004138:	9702      	str	r7, [sp, #8]
 800413a:	e7ab      	b.n	8004094 <_scanf_float+0x198>
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004142:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004146:	d005      	beq.n	8004154 <_scanf_float+0x258>
 8004148:	0550      	lsls	r0, r2, #21
 800414a:	f57f af0a 	bpl.w	8003f62 <_scanf_float+0x66>
 800414e:	2f00      	cmp	r7, #0
 8004150:	f000 80db 	beq.w	800430a <_scanf_float+0x40e>
 8004154:	0591      	lsls	r1, r2, #22
 8004156:	bf58      	it	pl
 8004158:	9902      	ldrpl	r1, [sp, #8]
 800415a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800415e:	bf58      	it	pl
 8004160:	1a79      	subpl	r1, r7, r1
 8004162:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004166:	bf58      	it	pl
 8004168:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800416c:	6022      	str	r2, [r4, #0]
 800416e:	2700      	movs	r7, #0
 8004170:	e790      	b.n	8004094 <_scanf_float+0x198>
 8004172:	f04f 0a03 	mov.w	sl, #3
 8004176:	e78d      	b.n	8004094 <_scanf_float+0x198>
 8004178:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800417c:	4649      	mov	r1, r9
 800417e:	4640      	mov	r0, r8
 8004180:	4798      	blx	r3
 8004182:	2800      	cmp	r0, #0
 8004184:	f43f aedf 	beq.w	8003f46 <_scanf_float+0x4a>
 8004188:	e6eb      	b.n	8003f62 <_scanf_float+0x66>
 800418a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800418e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004192:	464a      	mov	r2, r9
 8004194:	4640      	mov	r0, r8
 8004196:	4798      	blx	r3
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	e6eb      	b.n	8003f78 <_scanf_float+0x7c>
 80041a0:	1e6b      	subs	r3, r5, #1
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d824      	bhi.n	80041f0 <_scanf_float+0x2f4>
 80041a6:	2d02      	cmp	r5, #2
 80041a8:	d836      	bhi.n	8004218 <_scanf_float+0x31c>
 80041aa:	9b01      	ldr	r3, [sp, #4]
 80041ac:	429e      	cmp	r6, r3
 80041ae:	f67f aee7 	bls.w	8003f80 <_scanf_float+0x84>
 80041b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041ba:	464a      	mov	r2, r9
 80041bc:	4640      	mov	r0, r8
 80041be:	4798      	blx	r3
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	e7f0      	b.n	80041aa <_scanf_float+0x2ae>
 80041c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80041d0:	464a      	mov	r2, r9
 80041d2:	4640      	mov	r0, r8
 80041d4:	4798      	blx	r3
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	3b01      	subs	r3, #1
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041e0:	fa5f fa8a 	uxtb.w	sl, sl
 80041e4:	f1ba 0f02 	cmp.w	sl, #2
 80041e8:	d1ee      	bne.n	80041c8 <_scanf_float+0x2cc>
 80041ea:	3d03      	subs	r5, #3
 80041ec:	b2ed      	uxtb	r5, r5
 80041ee:	1b76      	subs	r6, r6, r5
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	05da      	lsls	r2, r3, #23
 80041f4:	d530      	bpl.n	8004258 <_scanf_float+0x35c>
 80041f6:	055b      	lsls	r3, r3, #21
 80041f8:	d511      	bpl.n	800421e <_scanf_float+0x322>
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	429e      	cmp	r6, r3
 80041fe:	f67f aebf 	bls.w	8003f80 <_scanf_float+0x84>
 8004202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800420a:	464a      	mov	r2, r9
 800420c:	4640      	mov	r0, r8
 800420e:	4798      	blx	r3
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	3b01      	subs	r3, #1
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	e7f0      	b.n	80041fa <_scanf_float+0x2fe>
 8004218:	46aa      	mov	sl, r5
 800421a:	46b3      	mov	fp, r6
 800421c:	e7de      	b.n	80041dc <_scanf_float+0x2e0>
 800421e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	2965      	cmp	r1, #101	@ 0x65
 8004226:	f103 33ff 	add.w	r3, r3, #4294967295
 800422a:	f106 35ff 	add.w	r5, r6, #4294967295
 800422e:	6123      	str	r3, [r4, #16]
 8004230:	d00c      	beq.n	800424c <_scanf_float+0x350>
 8004232:	2945      	cmp	r1, #69	@ 0x45
 8004234:	d00a      	beq.n	800424c <_scanf_float+0x350>
 8004236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800423a:	464a      	mov	r2, r9
 800423c:	4640      	mov	r0, r8
 800423e:	4798      	blx	r3
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004246:	3b01      	subs	r3, #1
 8004248:	1eb5      	subs	r5, r6, #2
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004250:	464a      	mov	r2, r9
 8004252:	4640      	mov	r0, r8
 8004254:	4798      	blx	r3
 8004256:	462e      	mov	r6, r5
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	f012 0210 	ands.w	r2, r2, #16
 800425e:	d001      	beq.n	8004264 <_scanf_float+0x368>
 8004260:	2000      	movs	r0, #0
 8004262:	e68e      	b.n	8003f82 <_scanf_float+0x86>
 8004264:	7032      	strb	r2, [r6, #0]
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004270:	d125      	bne.n	80042be <_scanf_float+0x3c2>
 8004272:	9b02      	ldr	r3, [sp, #8]
 8004274:	429f      	cmp	r7, r3
 8004276:	d00a      	beq.n	800428e <_scanf_float+0x392>
 8004278:	1bda      	subs	r2, r3, r7
 800427a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800427e:	429e      	cmp	r6, r3
 8004280:	bf28      	it	cs
 8004282:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004286:	4922      	ldr	r1, [pc, #136]	@ (8004310 <_scanf_float+0x414>)
 8004288:	4630      	mov	r0, r6
 800428a:	f000 f907 	bl	800449c <siprintf>
 800428e:	9901      	ldr	r1, [sp, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	4640      	mov	r0, r8
 8004294:	f002 fbfc 	bl	8006a90 <_strtod_r>
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	6821      	ldr	r1, [r4, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f011 0f02 	tst.w	r1, #2
 80042a2:	ec57 6b10 	vmov	r6, r7, d0
 80042a6:	f103 0204 	add.w	r2, r3, #4
 80042aa:	d015      	beq.n	80042d8 <_scanf_float+0x3dc>
 80042ac:	9903      	ldr	r1, [sp, #12]
 80042ae:	600a      	str	r2, [r1, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	e9c3 6700 	strd	r6, r7, [r3]
 80042b6:	68e3      	ldr	r3, [r4, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60e3      	str	r3, [r4, #12]
 80042bc:	e7d0      	b.n	8004260 <_scanf_float+0x364>
 80042be:	9b04      	ldr	r3, [sp, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0e4      	beq.n	800428e <_scanf_float+0x392>
 80042c4:	9905      	ldr	r1, [sp, #20]
 80042c6:	230a      	movs	r3, #10
 80042c8:	3101      	adds	r1, #1
 80042ca:	4640      	mov	r0, r8
 80042cc:	f002 fc60 	bl	8006b90 <_strtol_r>
 80042d0:	9b04      	ldr	r3, [sp, #16]
 80042d2:	9e05      	ldr	r6, [sp, #20]
 80042d4:	1ac2      	subs	r2, r0, r3
 80042d6:	e7d0      	b.n	800427a <_scanf_float+0x37e>
 80042d8:	f011 0f04 	tst.w	r1, #4
 80042dc:	9903      	ldr	r1, [sp, #12]
 80042de:	600a      	str	r2, [r1, #0]
 80042e0:	d1e6      	bne.n	80042b0 <_scanf_float+0x3b4>
 80042e2:	681d      	ldr	r5, [r3, #0]
 80042e4:	4632      	mov	r2, r6
 80042e6:	463b      	mov	r3, r7
 80042e8:	4630      	mov	r0, r6
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fc fc26 	bl	8000b3c <__aeabi_dcmpun>
 80042f0:	b128      	cbz	r0, 80042fe <_scanf_float+0x402>
 80042f2:	4808      	ldr	r0, [pc, #32]	@ (8004314 <_scanf_float+0x418>)
 80042f4:	f000 f9c0 	bl	8004678 <nanf>
 80042f8:	ed85 0a00 	vstr	s0, [r5]
 80042fc:	e7db      	b.n	80042b6 <_scanf_float+0x3ba>
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	f7fc fc79 	bl	8000bf8 <__aeabi_d2f>
 8004306:	6028      	str	r0, [r5, #0]
 8004308:	e7d5      	b.n	80042b6 <_scanf_float+0x3ba>
 800430a:	2700      	movs	r7, #0
 800430c:	e62e      	b.n	8003f6c <_scanf_float+0x70>
 800430e:	bf00      	nop
 8004310:	08007e6a 	.word	0x08007e6a
 8004314:	08007fab 	.word	0x08007fab

08004318 <std>:
 8004318:	2300      	movs	r3, #0
 800431a:	b510      	push	{r4, lr}
 800431c:	4604      	mov	r4, r0
 800431e:	e9c0 3300 	strd	r3, r3, [r0]
 8004322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004326:	6083      	str	r3, [r0, #8]
 8004328:	8181      	strh	r1, [r0, #12]
 800432a:	6643      	str	r3, [r0, #100]	@ 0x64
 800432c:	81c2      	strh	r2, [r0, #14]
 800432e:	6183      	str	r3, [r0, #24]
 8004330:	4619      	mov	r1, r3
 8004332:	2208      	movs	r2, #8
 8004334:	305c      	adds	r0, #92	@ 0x5c
 8004336:	f000 f916 	bl	8004566 <memset>
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <std+0x58>)
 800433c:	6263      	str	r3, [r4, #36]	@ 0x24
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <std+0x5c>)
 8004340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <std+0x60>)
 8004344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <std+0x64>)
 8004348:	6323      	str	r3, [r4, #48]	@ 0x30
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <std+0x68>)
 800434c:	6224      	str	r4, [r4, #32]
 800434e:	429c      	cmp	r4, r3
 8004350:	d006      	beq.n	8004360 <std+0x48>
 8004352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004356:	4294      	cmp	r4, r2
 8004358:	d002      	beq.n	8004360 <std+0x48>
 800435a:	33d0      	adds	r3, #208	@ 0xd0
 800435c:	429c      	cmp	r4, r3
 800435e:	d105      	bne.n	800436c <std+0x54>
 8004360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004368:	f000 b97a 	b.w	8004660 <__retarget_lock_init_recursive>
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	080044e1 	.word	0x080044e1
 8004374:	08004503 	.word	0x08004503
 8004378:	0800453b 	.word	0x0800453b
 800437c:	0800455f 	.word	0x0800455f
 8004380:	200002e0 	.word	0x200002e0

08004384 <stdio_exit_handler>:
 8004384:	4a02      	ldr	r2, [pc, #8]	@ (8004390 <stdio_exit_handler+0xc>)
 8004386:	4903      	ldr	r1, [pc, #12]	@ (8004394 <stdio_exit_handler+0x10>)
 8004388:	4803      	ldr	r0, [pc, #12]	@ (8004398 <stdio_exit_handler+0x14>)
 800438a:	f000 b869 	b.w	8004460 <_fwalk_sglue>
 800438e:	bf00      	nop
 8004390:	20000064 	.word	0x20000064
 8004394:	08006f4d 	.word	0x08006f4d
 8004398:	20000074 	.word	0x20000074

0800439c <cleanup_stdio>:
 800439c:	6841      	ldr	r1, [r0, #4]
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <cleanup_stdio+0x34>)
 80043a0:	4299      	cmp	r1, r3
 80043a2:	b510      	push	{r4, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	d001      	beq.n	80043ac <cleanup_stdio+0x10>
 80043a8:	f002 fdd0 	bl	8006f4c <_fflush_r>
 80043ac:	68a1      	ldr	r1, [r4, #8]
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <cleanup_stdio+0x38>)
 80043b0:	4299      	cmp	r1, r3
 80043b2:	d002      	beq.n	80043ba <cleanup_stdio+0x1e>
 80043b4:	4620      	mov	r0, r4
 80043b6:	f002 fdc9 	bl	8006f4c <_fflush_r>
 80043ba:	68e1      	ldr	r1, [r4, #12]
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <cleanup_stdio+0x3c>)
 80043be:	4299      	cmp	r1, r3
 80043c0:	d004      	beq.n	80043cc <cleanup_stdio+0x30>
 80043c2:	4620      	mov	r0, r4
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c8:	f002 bdc0 	b.w	8006f4c <_fflush_r>
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	bf00      	nop
 80043d0:	200002e0 	.word	0x200002e0
 80043d4:	20000348 	.word	0x20000348
 80043d8:	200003b0 	.word	0x200003b0

080043dc <global_stdio_init.part.0>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <global_stdio_init.part.0+0x30>)
 80043e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004410 <global_stdio_init.part.0+0x34>)
 80043e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004414 <global_stdio_init.part.0+0x38>)
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	4620      	mov	r0, r4
 80043e8:	2200      	movs	r2, #0
 80043ea:	2104      	movs	r1, #4
 80043ec:	f7ff ff94 	bl	8004318 <std>
 80043f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043f4:	2201      	movs	r2, #1
 80043f6:	2109      	movs	r1, #9
 80043f8:	f7ff ff8e 	bl	8004318 <std>
 80043fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004400:	2202      	movs	r2, #2
 8004402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004406:	2112      	movs	r1, #18
 8004408:	f7ff bf86 	b.w	8004318 <std>
 800440c:	20000418 	.word	0x20000418
 8004410:	200002e0 	.word	0x200002e0
 8004414:	08004385 	.word	0x08004385

08004418 <__sfp_lock_acquire>:
 8004418:	4801      	ldr	r0, [pc, #4]	@ (8004420 <__sfp_lock_acquire+0x8>)
 800441a:	f000 b922 	b.w	8004662 <__retarget_lock_acquire_recursive>
 800441e:	bf00      	nop
 8004420:	20000421 	.word	0x20000421

08004424 <__sfp_lock_release>:
 8004424:	4801      	ldr	r0, [pc, #4]	@ (800442c <__sfp_lock_release+0x8>)
 8004426:	f000 b91d 	b.w	8004664 <__retarget_lock_release_recursive>
 800442a:	bf00      	nop
 800442c:	20000421 	.word	0x20000421

08004430 <__sinit>:
 8004430:	b510      	push	{r4, lr}
 8004432:	4604      	mov	r4, r0
 8004434:	f7ff fff0 	bl	8004418 <__sfp_lock_acquire>
 8004438:	6a23      	ldr	r3, [r4, #32]
 800443a:	b11b      	cbz	r3, 8004444 <__sinit+0x14>
 800443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004440:	f7ff bff0 	b.w	8004424 <__sfp_lock_release>
 8004444:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <__sinit+0x28>)
 8004446:	6223      	str	r3, [r4, #32]
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <__sinit+0x2c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f5      	bne.n	800443c <__sinit+0xc>
 8004450:	f7ff ffc4 	bl	80043dc <global_stdio_init.part.0>
 8004454:	e7f2      	b.n	800443c <__sinit+0xc>
 8004456:	bf00      	nop
 8004458:	0800439d 	.word	0x0800439d
 800445c:	20000418 	.word	0x20000418

08004460 <_fwalk_sglue>:
 8004460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004464:	4607      	mov	r7, r0
 8004466:	4688      	mov	r8, r1
 8004468:	4614      	mov	r4, r2
 800446a:	2600      	movs	r6, #0
 800446c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004470:	f1b9 0901 	subs.w	r9, r9, #1
 8004474:	d505      	bpl.n	8004482 <_fwalk_sglue+0x22>
 8004476:	6824      	ldr	r4, [r4, #0]
 8004478:	2c00      	cmp	r4, #0
 800447a:	d1f7      	bne.n	800446c <_fwalk_sglue+0xc>
 800447c:	4630      	mov	r0, r6
 800447e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004482:	89ab      	ldrh	r3, [r5, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d907      	bls.n	8004498 <_fwalk_sglue+0x38>
 8004488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800448c:	3301      	adds	r3, #1
 800448e:	d003      	beq.n	8004498 <_fwalk_sglue+0x38>
 8004490:	4629      	mov	r1, r5
 8004492:	4638      	mov	r0, r7
 8004494:	47c0      	blx	r8
 8004496:	4306      	orrs	r6, r0
 8004498:	3568      	adds	r5, #104	@ 0x68
 800449a:	e7e9      	b.n	8004470 <_fwalk_sglue+0x10>

0800449c <siprintf>:
 800449c:	b40e      	push	{r1, r2, r3}
 800449e:	b510      	push	{r4, lr}
 80044a0:	b09d      	sub	sp, #116	@ 0x74
 80044a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80044a4:	9002      	str	r0, [sp, #8]
 80044a6:	9006      	str	r0, [sp, #24]
 80044a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044ac:	480a      	ldr	r0, [pc, #40]	@ (80044d8 <siprintf+0x3c>)
 80044ae:	9107      	str	r1, [sp, #28]
 80044b0:	9104      	str	r1, [sp, #16]
 80044b2:	490a      	ldr	r1, [pc, #40]	@ (80044dc <siprintf+0x40>)
 80044b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044b8:	9105      	str	r1, [sp, #20]
 80044ba:	2400      	movs	r4, #0
 80044bc:	a902      	add	r1, sp, #8
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80044c4:	f002 fbc2 	bl	8006c4c <_svfiprintf_r>
 80044c8:	9b02      	ldr	r3, [sp, #8]
 80044ca:	701c      	strb	r4, [r3, #0]
 80044cc:	b01d      	add	sp, #116	@ 0x74
 80044ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d2:	b003      	add	sp, #12
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000070 	.word	0x20000070
 80044dc:	ffff0208 	.word	0xffff0208

080044e0 <__sread>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	460c      	mov	r4, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	f000 f86c 	bl	80045c4 <_read_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bfab      	itete	ge
 80044f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044f2:	89a3      	ldrhlt	r3, [r4, #12]
 80044f4:	181b      	addge	r3, r3, r0
 80044f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044fa:	bfac      	ite	ge
 80044fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044fe:	81a3      	strhlt	r3, [r4, #12]
 8004500:	bd10      	pop	{r4, pc}

08004502 <__swrite>:
 8004502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004506:	461f      	mov	r7, r3
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	4616      	mov	r6, r2
 8004512:	d505      	bpl.n	8004520 <__swrite+0x1e>
 8004514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004518:	2302      	movs	r3, #2
 800451a:	2200      	movs	r2, #0
 800451c:	f000 f840 	bl	80045a0 <_lseek_r>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800452a:	81a3      	strh	r3, [r4, #12]
 800452c:	4632      	mov	r2, r6
 800452e:	463b      	mov	r3, r7
 8004530:	4628      	mov	r0, r5
 8004532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	f000 b857 	b.w	80045e8 <_write_r>

0800453a <__sseek>:
 800453a:	b510      	push	{r4, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 f82d 	bl	80045a0 <_lseek_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	bf15      	itete	ne
 800454c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800454e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004556:	81a3      	strheq	r3, [r4, #12]
 8004558:	bf18      	it	ne
 800455a:	81a3      	strhne	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__sclose>:
 800455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004562:	f000 b80d 	b.w	8004580 <_close_r>

08004566 <memset>:
 8004566:	4402      	add	r2, r0
 8004568:	4603      	mov	r3, r0
 800456a:	4293      	cmp	r3, r2
 800456c:	d100      	bne.n	8004570 <memset+0xa>
 800456e:	4770      	bx	lr
 8004570:	f803 1b01 	strb.w	r1, [r3], #1
 8004574:	e7f9      	b.n	800456a <memset+0x4>
	...

08004578 <_localeconv_r>:
 8004578:	4800      	ldr	r0, [pc, #0]	@ (800457c <_localeconv_r+0x4>)
 800457a:	4770      	bx	lr
 800457c:	200001b0 	.word	0x200001b0

08004580 <_close_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d06      	ldr	r5, [pc, #24]	@ (800459c <_close_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	f7fd f921 	bl	80017d2 <_close>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_close_r+0x1a>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_close_r+0x1a>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	2000041c 	.word	0x2000041c

080045a0 <_lseek_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d07      	ldr	r5, [pc, #28]	@ (80045c0 <_lseek_r+0x20>)
 80045a4:	4604      	mov	r4, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fd f936 	bl	8001820 <_lseek>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_lseek_r+0x1e>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_lseek_r+0x1e>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	2000041c 	.word	0x2000041c

080045c4 <_read_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d07      	ldr	r5, [pc, #28]	@ (80045e4 <_read_r+0x20>)
 80045c8:	4604      	mov	r4, r0
 80045ca:	4608      	mov	r0, r1
 80045cc:	4611      	mov	r1, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fd f8c4 	bl	8001760 <_read>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_read_r+0x1e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_read_r+0x1e>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	2000041c 	.word	0x2000041c

080045e8 <_write_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d07      	ldr	r5, [pc, #28]	@ (8004608 <_write_r+0x20>)
 80045ec:	4604      	mov	r4, r0
 80045ee:	4608      	mov	r0, r1
 80045f0:	4611      	mov	r1, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fd f8cf 	bl	800179a <_write>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_write_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_write_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	2000041c 	.word	0x2000041c

0800460c <__errno>:
 800460c:	4b01      	ldr	r3, [pc, #4]	@ (8004614 <__errno+0x8>)
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000070 	.word	0x20000070

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4d0d      	ldr	r5, [pc, #52]	@ (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	@ (8004654 <__libc_init_array+0x3c>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2600      	movs	r6, #0
 8004624:	42a6      	cmp	r6, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4d0b      	ldr	r5, [pc, #44]	@ (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	@ (800465c <__libc_init_array+0x44>)
 800462c:	f003 fb7e 	bl	8007d2c <_init>
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2600      	movs	r6, #0
 8004636:	42a6      	cmp	r6, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004640:	4798      	blx	r3
 8004642:	3601      	adds	r6, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f855 3b04 	ldr.w	r3, [r5], #4
 800464a:	4798      	blx	r3
 800464c:	3601      	adds	r6, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	08008264 	.word	0x08008264
 8004654:	08008264 	.word	0x08008264
 8004658:	08008264 	.word	0x08008264
 800465c:	08008268 	.word	0x08008268

08004660 <__retarget_lock_init_recursive>:
 8004660:	4770      	bx	lr

08004662 <__retarget_lock_acquire_recursive>:
 8004662:	4770      	bx	lr

08004664 <__retarget_lock_release_recursive>:
 8004664:	4770      	bx	lr

08004666 <strcpy>:
 8004666:	4603      	mov	r3, r0
 8004668:	f811 2b01 	ldrb.w	r2, [r1], #1
 800466c:	f803 2b01 	strb.w	r2, [r3], #1
 8004670:	2a00      	cmp	r2, #0
 8004672:	d1f9      	bne.n	8004668 <strcpy+0x2>
 8004674:	4770      	bx	lr
	...

08004678 <nanf>:
 8004678:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004680 <nanf+0x8>
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	7fc00000 	.word	0x7fc00000

08004684 <quorem>:
 8004684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	6903      	ldr	r3, [r0, #16]
 800468a:	690c      	ldr	r4, [r1, #16]
 800468c:	42a3      	cmp	r3, r4
 800468e:	4607      	mov	r7, r0
 8004690:	db7e      	blt.n	8004790 <quorem+0x10c>
 8004692:	3c01      	subs	r4, #1
 8004694:	f101 0814 	add.w	r8, r1, #20
 8004698:	00a3      	lsls	r3, r4, #2
 800469a:	f100 0514 	add.w	r5, r0, #20
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046ae:	3301      	adds	r3, #1
 80046b0:	429a      	cmp	r2, r3
 80046b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80046ba:	d32e      	bcc.n	800471a <quorem+0x96>
 80046bc:	f04f 0a00 	mov.w	sl, #0
 80046c0:	46c4      	mov	ip, r8
 80046c2:	46ae      	mov	lr, r5
 80046c4:	46d3      	mov	fp, sl
 80046c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80046ca:	b298      	uxth	r0, r3
 80046cc:	fb06 a000 	mla	r0, r6, r0, sl
 80046d0:	0c02      	lsrs	r2, r0, #16
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	fb06 2303 	mla	r3, r6, r3, r2
 80046d8:	f8de 2000 	ldr.w	r2, [lr]
 80046dc:	b280      	uxth	r0, r0
 80046de:	b292      	uxth	r2, r2
 80046e0:	1a12      	subs	r2, r2, r0
 80046e2:	445a      	add	r2, fp
 80046e4:	f8de 0000 	ldr.w	r0, [lr]
 80046e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046f6:	b292      	uxth	r2, r2
 80046f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046fc:	45e1      	cmp	r9, ip
 80046fe:	f84e 2b04 	str.w	r2, [lr], #4
 8004702:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004706:	d2de      	bcs.n	80046c6 <quorem+0x42>
 8004708:	9b00      	ldr	r3, [sp, #0]
 800470a:	58eb      	ldr	r3, [r5, r3]
 800470c:	b92b      	cbnz	r3, 800471a <quorem+0x96>
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	3b04      	subs	r3, #4
 8004712:	429d      	cmp	r5, r3
 8004714:	461a      	mov	r2, r3
 8004716:	d32f      	bcc.n	8004778 <quorem+0xf4>
 8004718:	613c      	str	r4, [r7, #16]
 800471a:	4638      	mov	r0, r7
 800471c:	f001 f9c8 	bl	8005ab0 <__mcmp>
 8004720:	2800      	cmp	r0, #0
 8004722:	db25      	blt.n	8004770 <quorem+0xec>
 8004724:	4629      	mov	r1, r5
 8004726:	2000      	movs	r0, #0
 8004728:	f858 2b04 	ldr.w	r2, [r8], #4
 800472c:	f8d1 c000 	ldr.w	ip, [r1]
 8004730:	fa1f fe82 	uxth.w	lr, r2
 8004734:	fa1f f38c 	uxth.w	r3, ip
 8004738:	eba3 030e 	sub.w	r3, r3, lr
 800473c:	4403      	add	r3, r0
 800473e:	0c12      	lsrs	r2, r2, #16
 8004740:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004744:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800474e:	45c1      	cmp	r9, r8
 8004750:	f841 3b04 	str.w	r3, [r1], #4
 8004754:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004758:	d2e6      	bcs.n	8004728 <quorem+0xa4>
 800475a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800475e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004762:	b922      	cbnz	r2, 800476e <quorem+0xea>
 8004764:	3b04      	subs	r3, #4
 8004766:	429d      	cmp	r5, r3
 8004768:	461a      	mov	r2, r3
 800476a:	d30b      	bcc.n	8004784 <quorem+0x100>
 800476c:	613c      	str	r4, [r7, #16]
 800476e:	3601      	adds	r6, #1
 8004770:	4630      	mov	r0, r6
 8004772:	b003      	add	sp, #12
 8004774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	3b04      	subs	r3, #4
 800477c:	2a00      	cmp	r2, #0
 800477e:	d1cb      	bne.n	8004718 <quorem+0x94>
 8004780:	3c01      	subs	r4, #1
 8004782:	e7c6      	b.n	8004712 <quorem+0x8e>
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	3b04      	subs	r3, #4
 8004788:	2a00      	cmp	r2, #0
 800478a:	d1ef      	bne.n	800476c <quorem+0xe8>
 800478c:	3c01      	subs	r4, #1
 800478e:	e7ea      	b.n	8004766 <quorem+0xe2>
 8004790:	2000      	movs	r0, #0
 8004792:	e7ee      	b.n	8004772 <quorem+0xee>
 8004794:	0000      	movs	r0, r0
	...

08004798 <_dtoa_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	69c7      	ldr	r7, [r0, #28]
 800479e:	b097      	sub	sp, #92	@ 0x5c
 80047a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80047a4:	ec55 4b10 	vmov	r4, r5, d0
 80047a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80047aa:	9107      	str	r1, [sp, #28]
 80047ac:	4681      	mov	r9, r0
 80047ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80047b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80047b2:	b97f      	cbnz	r7, 80047d4 <_dtoa_r+0x3c>
 80047b4:	2010      	movs	r0, #16
 80047b6:	f000 fe09 	bl	80053cc <malloc>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80047c0:	b920      	cbnz	r0, 80047cc <_dtoa_r+0x34>
 80047c2:	4ba9      	ldr	r3, [pc, #676]	@ (8004a68 <_dtoa_r+0x2d0>)
 80047c4:	21ef      	movs	r1, #239	@ 0xef
 80047c6:	48a9      	ldr	r0, [pc, #676]	@ (8004a6c <_dtoa_r+0x2d4>)
 80047c8:	f002 fc3a 	bl	8007040 <__assert_func>
 80047cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80047d0:	6007      	str	r7, [r0, #0]
 80047d2:	60c7      	str	r7, [r0, #12]
 80047d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	b159      	cbz	r1, 80047f4 <_dtoa_r+0x5c>
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	604a      	str	r2, [r1, #4]
 80047e0:	2301      	movs	r3, #1
 80047e2:	4093      	lsls	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
 80047e6:	4648      	mov	r0, r9
 80047e8:	f000 fee6 	bl	80055b8 <_Bfree>
 80047ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	1e2b      	subs	r3, r5, #0
 80047f6:	bfb9      	ittee	lt
 80047f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047fc:	9305      	strlt	r3, [sp, #20]
 80047fe:	2300      	movge	r3, #0
 8004800:	6033      	strge	r3, [r6, #0]
 8004802:	9f05      	ldr	r7, [sp, #20]
 8004804:	4b9a      	ldr	r3, [pc, #616]	@ (8004a70 <_dtoa_r+0x2d8>)
 8004806:	bfbc      	itt	lt
 8004808:	2201      	movlt	r2, #1
 800480a:	6032      	strlt	r2, [r6, #0]
 800480c:	43bb      	bics	r3, r7
 800480e:	d112      	bne.n	8004836 <_dtoa_r+0x9e>
 8004810:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004812:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800481c:	4323      	orrs	r3, r4
 800481e:	f000 855a 	beq.w	80052d6 <_dtoa_r+0xb3e>
 8004822:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004824:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004a84 <_dtoa_r+0x2ec>
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 855c 	beq.w	80052e6 <_dtoa_r+0xb4e>
 800482e:	f10a 0303 	add.w	r3, sl, #3
 8004832:	f000 bd56 	b.w	80052e2 <_dtoa_r+0xb4a>
 8004836:	ed9d 7b04 	vldr	d7, [sp, #16]
 800483a:	2200      	movs	r2, #0
 800483c:	ec51 0b17 	vmov	r0, r1, d7
 8004840:	2300      	movs	r3, #0
 8004842:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004846:	f7fc f947 	bl	8000ad8 <__aeabi_dcmpeq>
 800484a:	4680      	mov	r8, r0
 800484c:	b158      	cbz	r0, 8004866 <_dtoa_r+0xce>
 800484e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004850:	2301      	movs	r3, #1
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004856:	b113      	cbz	r3, 800485e <_dtoa_r+0xc6>
 8004858:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800485a:	4b86      	ldr	r3, [pc, #536]	@ (8004a74 <_dtoa_r+0x2dc>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004a88 <_dtoa_r+0x2f0>
 8004862:	f000 bd40 	b.w	80052e6 <_dtoa_r+0xb4e>
 8004866:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800486a:	aa14      	add	r2, sp, #80	@ 0x50
 800486c:	a915      	add	r1, sp, #84	@ 0x54
 800486e:	4648      	mov	r0, r9
 8004870:	f001 fa3e 	bl	8005cf0 <__d2b>
 8004874:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004878:	9002      	str	r0, [sp, #8]
 800487a:	2e00      	cmp	r6, #0
 800487c:	d078      	beq.n	8004970 <_dtoa_r+0x1d8>
 800487e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004880:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800488c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004898:	4619      	mov	r1, r3
 800489a:	2200      	movs	r2, #0
 800489c:	4b76      	ldr	r3, [pc, #472]	@ (8004a78 <_dtoa_r+0x2e0>)
 800489e:	f7fb fcfb 	bl	8000298 <__aeabi_dsub>
 80048a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004a50 <_dtoa_r+0x2b8>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb feae 	bl	8000608 <__aeabi_dmul>
 80048ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8004a58 <_dtoa_r+0x2c0>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f7fb fcf3 	bl	800029c <__adddf3>
 80048b6:	4604      	mov	r4, r0
 80048b8:	4630      	mov	r0, r6
 80048ba:	460d      	mov	r5, r1
 80048bc:	f7fb fe3a 	bl	8000534 <__aeabi_i2d>
 80048c0:	a367      	add	r3, pc, #412	@ (adr r3, 8004a60 <_dtoa_r+0x2c8>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f7fb fe9f 	bl	8000608 <__aeabi_dmul>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4620      	mov	r0, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	f7fb fce3 	bl	800029c <__adddf3>
 80048d6:	4604      	mov	r4, r0
 80048d8:	460d      	mov	r5, r1
 80048da:	f7fc f945 	bl	8000b68 <__aeabi_d2iz>
 80048de:	2200      	movs	r2, #0
 80048e0:	4607      	mov	r7, r0
 80048e2:	2300      	movs	r3, #0
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fc f900 	bl	8000aec <__aeabi_dcmplt>
 80048ec:	b140      	cbz	r0, 8004900 <_dtoa_r+0x168>
 80048ee:	4638      	mov	r0, r7
 80048f0:	f7fb fe20 	bl	8000534 <__aeabi_i2d>
 80048f4:	4622      	mov	r2, r4
 80048f6:	462b      	mov	r3, r5
 80048f8:	f7fc f8ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80048fc:	b900      	cbnz	r0, 8004900 <_dtoa_r+0x168>
 80048fe:	3f01      	subs	r7, #1
 8004900:	2f16      	cmp	r7, #22
 8004902:	d852      	bhi.n	80049aa <_dtoa_r+0x212>
 8004904:	4b5d      	ldr	r3, [pc, #372]	@ (8004a7c <_dtoa_r+0x2e4>)
 8004906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004912:	f7fc f8eb 	bl	8000aec <__aeabi_dcmplt>
 8004916:	2800      	cmp	r0, #0
 8004918:	d049      	beq.n	80049ae <_dtoa_r+0x216>
 800491a:	3f01      	subs	r7, #1
 800491c:	2300      	movs	r3, #0
 800491e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004920:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004922:	1b9b      	subs	r3, r3, r6
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	bf45      	ittet	mi
 8004928:	f1c3 0301 	rsbmi	r3, r3, #1
 800492c:	9300      	strmi	r3, [sp, #0]
 800492e:	2300      	movpl	r3, #0
 8004930:	2300      	movmi	r3, #0
 8004932:	9206      	str	r2, [sp, #24]
 8004934:	bf54      	ite	pl
 8004936:	9300      	strpl	r3, [sp, #0]
 8004938:	9306      	strmi	r3, [sp, #24]
 800493a:	2f00      	cmp	r7, #0
 800493c:	db39      	blt.n	80049b2 <_dtoa_r+0x21a>
 800493e:	9b06      	ldr	r3, [sp, #24]
 8004940:	970d      	str	r7, [sp, #52]	@ 0x34
 8004942:	443b      	add	r3, r7
 8004944:	9306      	str	r3, [sp, #24]
 8004946:	2300      	movs	r3, #0
 8004948:	9308      	str	r3, [sp, #32]
 800494a:	9b07      	ldr	r3, [sp, #28]
 800494c:	2b09      	cmp	r3, #9
 800494e:	d863      	bhi.n	8004a18 <_dtoa_r+0x280>
 8004950:	2b05      	cmp	r3, #5
 8004952:	bfc4      	itt	gt
 8004954:	3b04      	subgt	r3, #4
 8004956:	9307      	strgt	r3, [sp, #28]
 8004958:	9b07      	ldr	r3, [sp, #28]
 800495a:	f1a3 0302 	sub.w	r3, r3, #2
 800495e:	bfcc      	ite	gt
 8004960:	2400      	movgt	r4, #0
 8004962:	2401      	movle	r4, #1
 8004964:	2b03      	cmp	r3, #3
 8004966:	d863      	bhi.n	8004a30 <_dtoa_r+0x298>
 8004968:	e8df f003 	tbb	[pc, r3]
 800496c:	2b375452 	.word	0x2b375452
 8004970:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004974:	441e      	add	r6, r3
 8004976:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800497a:	2b20      	cmp	r3, #32
 800497c:	bfc1      	itttt	gt
 800497e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004982:	409f      	lslgt	r7, r3
 8004984:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004988:	fa24 f303 	lsrgt.w	r3, r4, r3
 800498c:	bfd6      	itet	le
 800498e:	f1c3 0320 	rsble	r3, r3, #32
 8004992:	ea47 0003 	orrgt.w	r0, r7, r3
 8004996:	fa04 f003 	lslle.w	r0, r4, r3
 800499a:	f7fb fdbb 	bl	8000514 <__aeabi_ui2d>
 800499e:	2201      	movs	r2, #1
 80049a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049a4:	3e01      	subs	r6, #1
 80049a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80049a8:	e776      	b.n	8004898 <_dtoa_r+0x100>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e7b7      	b.n	800491e <_dtoa_r+0x186>
 80049ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80049b0:	e7b6      	b.n	8004920 <_dtoa_r+0x188>
 80049b2:	9b00      	ldr	r3, [sp, #0]
 80049b4:	1bdb      	subs	r3, r3, r7
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	427b      	negs	r3, r7
 80049ba:	9308      	str	r3, [sp, #32]
 80049bc:	2300      	movs	r3, #0
 80049be:	930d      	str	r3, [sp, #52]	@ 0x34
 80049c0:	e7c3      	b.n	800494a <_dtoa_r+0x1b2>
 80049c2:	2301      	movs	r3, #1
 80049c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80049c8:	eb07 0b03 	add.w	fp, r7, r3
 80049cc:	f10b 0301 	add.w	r3, fp, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	9303      	str	r3, [sp, #12]
 80049d4:	bfb8      	it	lt
 80049d6:	2301      	movlt	r3, #1
 80049d8:	e006      	b.n	80049e8 <_dtoa_r+0x250>
 80049da:	2301      	movs	r3, #1
 80049dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dd28      	ble.n	8004a36 <_dtoa_r+0x29e>
 80049e4:	469b      	mov	fp, r3
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80049ec:	2100      	movs	r1, #0
 80049ee:	2204      	movs	r2, #4
 80049f0:	f102 0514 	add.w	r5, r2, #20
 80049f4:	429d      	cmp	r5, r3
 80049f6:	d926      	bls.n	8004a46 <_dtoa_r+0x2ae>
 80049f8:	6041      	str	r1, [r0, #4]
 80049fa:	4648      	mov	r0, r9
 80049fc:	f000 fd9c 	bl	8005538 <_Balloc>
 8004a00:	4682      	mov	sl, r0
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d142      	bne.n	8004a8c <_dtoa_r+0x2f4>
 8004a06:	4b1e      	ldr	r3, [pc, #120]	@ (8004a80 <_dtoa_r+0x2e8>)
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a0e:	e6da      	b.n	80047c6 <_dtoa_r+0x2e>
 8004a10:	2300      	movs	r3, #0
 8004a12:	e7e3      	b.n	80049dc <_dtoa_r+0x244>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e7d5      	b.n	80049c4 <_dtoa_r+0x22c>
 8004a18:	2401      	movs	r4, #1
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	9409      	str	r4, [sp, #36]	@ 0x24
 8004a20:	f04f 3bff 	mov.w	fp, #4294967295
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8cd b00c 	str.w	fp, [sp, #12]
 8004a2a:	2312      	movs	r3, #18
 8004a2c:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a2e:	e7db      	b.n	80049e8 <_dtoa_r+0x250>
 8004a30:	2301      	movs	r3, #1
 8004a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a34:	e7f4      	b.n	8004a20 <_dtoa_r+0x288>
 8004a36:	f04f 0b01 	mov.w	fp, #1
 8004a3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8004a3e:	465b      	mov	r3, fp
 8004a40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004a44:	e7d0      	b.n	80049e8 <_dtoa_r+0x250>
 8004a46:	3101      	adds	r1, #1
 8004a48:	0052      	lsls	r2, r2, #1
 8004a4a:	e7d1      	b.n	80049f0 <_dtoa_r+0x258>
 8004a4c:	f3af 8000 	nop.w
 8004a50:	636f4361 	.word	0x636f4361
 8004a54:	3fd287a7 	.word	0x3fd287a7
 8004a58:	8b60c8b3 	.word	0x8b60c8b3
 8004a5c:	3fc68a28 	.word	0x3fc68a28
 8004a60:	509f79fb 	.word	0x509f79fb
 8004a64:	3fd34413 	.word	0x3fd34413
 8004a68:	08007e7c 	.word	0x08007e7c
 8004a6c:	08007e93 	.word	0x08007e93
 8004a70:	7ff00000 	.word	0x7ff00000
 8004a74:	08007e47 	.word	0x08007e47
 8004a78:	3ff80000 	.word	0x3ff80000
 8004a7c:	08008040 	.word	0x08008040
 8004a80:	08007eeb 	.word	0x08007eeb
 8004a84:	08007e78 	.word	0x08007e78
 8004a88:	08007e46 	.word	0x08007e46
 8004a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	2b0e      	cmp	r3, #14
 8004a96:	f200 80a1 	bhi.w	8004bdc <_dtoa_r+0x444>
 8004a9a:	2c00      	cmp	r4, #0
 8004a9c:	f000 809e 	beq.w	8004bdc <_dtoa_r+0x444>
 8004aa0:	2f00      	cmp	r7, #0
 8004aa2:	dd33      	ble.n	8004b0c <_dtoa_r+0x374>
 8004aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8004d18 <_dtoa_r+0x580>)
 8004aa6:	f007 020f 	and.w	r2, r7, #15
 8004aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aae:	ed93 7b00 	vldr	d7, [r3]
 8004ab2:	05f8      	lsls	r0, r7, #23
 8004ab4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004ab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004abc:	d516      	bpl.n	8004aec <_dtoa_r+0x354>
 8004abe:	4b97      	ldr	r3, [pc, #604]	@ (8004d1c <_dtoa_r+0x584>)
 8004ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ac8:	f7fb fec8 	bl	800085c <__aeabi_ddiv>
 8004acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ad0:	f004 040f 	and.w	r4, r4, #15
 8004ad4:	2603      	movs	r6, #3
 8004ad6:	4d91      	ldr	r5, [pc, #580]	@ (8004d1c <_dtoa_r+0x584>)
 8004ad8:	b954      	cbnz	r4, 8004af0 <_dtoa_r+0x358>
 8004ada:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ae2:	f7fb febb 	bl	800085c <__aeabi_ddiv>
 8004ae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aea:	e028      	b.n	8004b3e <_dtoa_r+0x3a6>
 8004aec:	2602      	movs	r6, #2
 8004aee:	e7f2      	b.n	8004ad6 <_dtoa_r+0x33e>
 8004af0:	07e1      	lsls	r1, r4, #31
 8004af2:	d508      	bpl.n	8004b06 <_dtoa_r+0x36e>
 8004af4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004afc:	f7fb fd84 	bl	8000608 <__aeabi_dmul>
 8004b00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004b04:	3601      	adds	r6, #1
 8004b06:	1064      	asrs	r4, r4, #1
 8004b08:	3508      	adds	r5, #8
 8004b0a:	e7e5      	b.n	8004ad8 <_dtoa_r+0x340>
 8004b0c:	f000 80af 	beq.w	8004c6e <_dtoa_r+0x4d6>
 8004b10:	427c      	negs	r4, r7
 8004b12:	4b81      	ldr	r3, [pc, #516]	@ (8004d18 <_dtoa_r+0x580>)
 8004b14:	4d81      	ldr	r5, [pc, #516]	@ (8004d1c <_dtoa_r+0x584>)
 8004b16:	f004 020f 	and.w	r2, r4, #15
 8004b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b26:	f7fb fd6f 	bl	8000608 <__aeabi_dmul>
 8004b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b2e:	1124      	asrs	r4, r4, #4
 8004b30:	2300      	movs	r3, #0
 8004b32:	2602      	movs	r6, #2
 8004b34:	2c00      	cmp	r4, #0
 8004b36:	f040 808f 	bne.w	8004c58 <_dtoa_r+0x4c0>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1d3      	bne.n	8004ae6 <_dtoa_r+0x34e>
 8004b3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8094 	beq.w	8004c72 <_dtoa_r+0x4da>
 8004b4a:	4b75      	ldr	r3, [pc, #468]	@ (8004d20 <_dtoa_r+0x588>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb ffcb 	bl	8000aec <__aeabi_dcmplt>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f000 808b 	beq.w	8004c72 <_dtoa_r+0x4da>
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8087 	beq.w	8004c72 <_dtoa_r+0x4da>
 8004b64:	f1bb 0f00 	cmp.w	fp, #0
 8004b68:	dd34      	ble.n	8004bd4 <_dtoa_r+0x43c>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	4b6d      	ldr	r3, [pc, #436]	@ (8004d24 <_dtoa_r+0x58c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7fb fd49 	bl	8000608 <__aeabi_dmul>
 8004b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b7a:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b7e:	3601      	adds	r6, #1
 8004b80:	465c      	mov	r4, fp
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7fb fcd6 	bl	8000534 <__aeabi_i2d>
 8004b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b8c:	f7fb fd3c 	bl	8000608 <__aeabi_dmul>
 8004b90:	4b65      	ldr	r3, [pc, #404]	@ (8004d28 <_dtoa_r+0x590>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	f7fb fb82 	bl	800029c <__adddf3>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	d16a      	bne.n	8004c78 <_dtoa_r+0x4e0>
 8004ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ba6:	4b61      	ldr	r3, [pc, #388]	@ (8004d2c <_dtoa_r+0x594>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f7fb fb75 	bl	8000298 <__aeabi_dsub>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	4633      	mov	r3, r6
 8004bba:	f7fb ffb5 	bl	8000b28 <__aeabi_dcmpgt>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f040 8298 	bne.w	80050f4 <_dtoa_r+0x95c>
 8004bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc8:	462a      	mov	r2, r5
 8004bca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004bce:	f7fb ff8d 	bl	8000aec <__aeabi_dcmplt>
 8004bd2:	bb38      	cbnz	r0, 8004c24 <_dtoa_r+0x48c>
 8004bd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004bd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f2c0 8157 	blt.w	8004e92 <_dtoa_r+0x6fa>
 8004be4:	2f0e      	cmp	r7, #14
 8004be6:	f300 8154 	bgt.w	8004e92 <_dtoa_r+0x6fa>
 8004bea:	4b4b      	ldr	r3, [pc, #300]	@ (8004d18 <_dtoa_r+0x580>)
 8004bec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bf0:	ed93 7b00 	vldr	d7, [r3]
 8004bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	ed8d 7b00 	vstr	d7, [sp]
 8004bfc:	f280 80e5 	bge.w	8004dca <_dtoa_r+0x632>
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f300 80e1 	bgt.w	8004dca <_dtoa_r+0x632>
 8004c08:	d10c      	bne.n	8004c24 <_dtoa_r+0x48c>
 8004c0a:	4b48      	ldr	r3, [pc, #288]	@ (8004d2c <_dtoa_r+0x594>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	ec51 0b17 	vmov	r0, r1, d7
 8004c12:	f7fb fcf9 	bl	8000608 <__aeabi_dmul>
 8004c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c1a:	f7fb ff7b 	bl	8000b14 <__aeabi_dcmpge>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f000 8266 	beq.w	80050f0 <_dtoa_r+0x958>
 8004c24:	2400      	movs	r4, #0
 8004c26:	4625      	mov	r5, r4
 8004c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c2a:	4656      	mov	r6, sl
 8004c2c:	ea6f 0803 	mvn.w	r8, r3
 8004c30:	2700      	movs	r7, #0
 8004c32:	4621      	mov	r1, r4
 8004c34:	4648      	mov	r0, r9
 8004c36:	f000 fcbf 	bl	80055b8 <_Bfree>
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	f000 80bd 	beq.w	8004dba <_dtoa_r+0x622>
 8004c40:	b12f      	cbz	r7, 8004c4e <_dtoa_r+0x4b6>
 8004c42:	42af      	cmp	r7, r5
 8004c44:	d003      	beq.n	8004c4e <_dtoa_r+0x4b6>
 8004c46:	4639      	mov	r1, r7
 8004c48:	4648      	mov	r0, r9
 8004c4a:	f000 fcb5 	bl	80055b8 <_Bfree>
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4648      	mov	r0, r9
 8004c52:	f000 fcb1 	bl	80055b8 <_Bfree>
 8004c56:	e0b0      	b.n	8004dba <_dtoa_r+0x622>
 8004c58:	07e2      	lsls	r2, r4, #31
 8004c5a:	d505      	bpl.n	8004c68 <_dtoa_r+0x4d0>
 8004c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c60:	f7fb fcd2 	bl	8000608 <__aeabi_dmul>
 8004c64:	3601      	adds	r6, #1
 8004c66:	2301      	movs	r3, #1
 8004c68:	1064      	asrs	r4, r4, #1
 8004c6a:	3508      	adds	r5, #8
 8004c6c:	e762      	b.n	8004b34 <_dtoa_r+0x39c>
 8004c6e:	2602      	movs	r6, #2
 8004c70:	e765      	b.n	8004b3e <_dtoa_r+0x3a6>
 8004c72:	9c03      	ldr	r4, [sp, #12]
 8004c74:	46b8      	mov	r8, r7
 8004c76:	e784      	b.n	8004b82 <_dtoa_r+0x3ea>
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <_dtoa_r+0x580>)
 8004c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c84:	4454      	add	r4, sl
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d054      	beq.n	8004d34 <_dtoa_r+0x59c>
 8004c8a:	4929      	ldr	r1, [pc, #164]	@ (8004d30 <_dtoa_r+0x598>)
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fb fde5 	bl	800085c <__aeabi_ddiv>
 8004c92:	4633      	mov	r3, r6
 8004c94:	462a      	mov	r2, r5
 8004c96:	f7fb faff 	bl	8000298 <__aeabi_dsub>
 8004c9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004c9e:	4656      	mov	r6, sl
 8004ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ca4:	f7fb ff60 	bl	8000b68 <__aeabi_d2iz>
 8004ca8:	4605      	mov	r5, r0
 8004caa:	f7fb fc43 	bl	8000534 <__aeabi_i2d>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cb6:	f7fb faef 	bl	8000298 <__aeabi_dsub>
 8004cba:	3530      	adds	r5, #48	@ 0x30
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cc4:	f806 5b01 	strb.w	r5, [r6], #1
 8004cc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004ccc:	f7fb ff0e 	bl	8000aec <__aeabi_dcmplt>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d172      	bne.n	8004dba <_dtoa_r+0x622>
 8004cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cd8:	4911      	ldr	r1, [pc, #68]	@ (8004d20 <_dtoa_r+0x588>)
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f7fb fadc 	bl	8000298 <__aeabi_dsub>
 8004ce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004ce4:	f7fb ff02 	bl	8000aec <__aeabi_dcmplt>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f040 80b4 	bne.w	8004e56 <_dtoa_r+0x6be>
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	f43f af70 	beq.w	8004bd4 <_dtoa_r+0x43c>
 8004cf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <_dtoa_r+0x58c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f7fb fc84 	bl	8000608 <__aeabi_dmul>
 8004d00:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <_dtoa_r+0x58c>)
 8004d02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004d06:	2200      	movs	r2, #0
 8004d08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d0c:	f7fb fc7c 	bl	8000608 <__aeabi_dmul>
 8004d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d14:	e7c4      	b.n	8004ca0 <_dtoa_r+0x508>
 8004d16:	bf00      	nop
 8004d18:	08008040 	.word	0x08008040
 8004d1c:	08008018 	.word	0x08008018
 8004d20:	3ff00000 	.word	0x3ff00000
 8004d24:	40240000 	.word	0x40240000
 8004d28:	401c0000 	.word	0x401c0000
 8004d2c:	40140000 	.word	0x40140000
 8004d30:	3fe00000 	.word	0x3fe00000
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	f7fb fc66 	bl	8000608 <__aeabi_dmul>
 8004d3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004d40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004d42:	4656      	mov	r6, sl
 8004d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d48:	f7fb ff0e 	bl	8000b68 <__aeabi_d2iz>
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	f7fb fbf1 	bl	8000534 <__aeabi_i2d>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d5a:	f7fb fa9d 	bl	8000298 <__aeabi_dsub>
 8004d5e:	3530      	adds	r5, #48	@ 0x30
 8004d60:	f806 5b01 	strb.w	r5, [r6], #1
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	42a6      	cmp	r6, r4
 8004d6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	d124      	bne.n	8004dbe <_dtoa_r+0x626>
 8004d74:	4baf      	ldr	r3, [pc, #700]	@ (8005034 <_dtoa_r+0x89c>)
 8004d76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004d7a:	f7fb fa8f 	bl	800029c <__adddf3>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d86:	f7fb fecf 	bl	8000b28 <__aeabi_dcmpgt>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d163      	bne.n	8004e56 <_dtoa_r+0x6be>
 8004d8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004d92:	49a8      	ldr	r1, [pc, #672]	@ (8005034 <_dtoa_r+0x89c>)
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fb fa7f 	bl	8000298 <__aeabi_dsub>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da2:	f7fb fea3 	bl	8000aec <__aeabi_dcmplt>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	f43f af14 	beq.w	8004bd4 <_dtoa_r+0x43c>
 8004dac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004dae:	1e73      	subs	r3, r6, #1
 8004db0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004db2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004db6:	2b30      	cmp	r3, #48	@ 0x30
 8004db8:	d0f8      	beq.n	8004dac <_dtoa_r+0x614>
 8004dba:	4647      	mov	r7, r8
 8004dbc:	e03b      	b.n	8004e36 <_dtoa_r+0x69e>
 8004dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8005038 <_dtoa_r+0x8a0>)
 8004dc0:	f7fb fc22 	bl	8000608 <__aeabi_dmul>
 8004dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dc8:	e7bc      	b.n	8004d44 <_dtoa_r+0x5ac>
 8004dca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004dce:	4656      	mov	r6, sl
 8004dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7fb fd40 	bl	800085c <__aeabi_ddiv>
 8004ddc:	f7fb fec4 	bl	8000b68 <__aeabi_d2iz>
 8004de0:	4680      	mov	r8, r0
 8004de2:	f7fb fba7 	bl	8000534 <__aeabi_i2d>
 8004de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dea:	f7fb fc0d 	bl	8000608 <__aeabi_dmul>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004dfa:	f7fb fa4d 	bl	8000298 <__aeabi_dsub>
 8004dfe:	f806 4b01 	strb.w	r4, [r6], #1
 8004e02:	9d03      	ldr	r5, [sp, #12]
 8004e04:	eba6 040a 	sub.w	r4, r6, sl
 8004e08:	42a5      	cmp	r5, r4
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	d133      	bne.n	8004e78 <_dtoa_r+0x6e0>
 8004e10:	f7fb fa44 	bl	800029c <__adddf3>
 8004e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e18:	4604      	mov	r4, r0
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	f7fb fe84 	bl	8000b28 <__aeabi_dcmpgt>
 8004e20:	b9c0      	cbnz	r0, 8004e54 <_dtoa_r+0x6bc>
 8004e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e26:	4620      	mov	r0, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	f7fb fe55 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e2e:	b110      	cbz	r0, 8004e36 <_dtoa_r+0x69e>
 8004e30:	f018 0f01 	tst.w	r8, #1
 8004e34:	d10e      	bne.n	8004e54 <_dtoa_r+0x6bc>
 8004e36:	9902      	ldr	r1, [sp, #8]
 8004e38:	4648      	mov	r0, r9
 8004e3a:	f000 fbbd 	bl	80055b8 <_Bfree>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	7033      	strb	r3, [r6, #0]
 8004e42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e44:	3701      	adds	r7, #1
 8004e46:	601f      	str	r7, [r3, #0]
 8004e48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 824b 	beq.w	80052e6 <_dtoa_r+0xb4e>
 8004e50:	601e      	str	r6, [r3, #0]
 8004e52:	e248      	b.n	80052e6 <_dtoa_r+0xb4e>
 8004e54:	46b8      	mov	r8, r7
 8004e56:	4633      	mov	r3, r6
 8004e58:	461e      	mov	r6, r3
 8004e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e5e:	2a39      	cmp	r2, #57	@ 0x39
 8004e60:	d106      	bne.n	8004e70 <_dtoa_r+0x6d8>
 8004e62:	459a      	cmp	sl, r3
 8004e64:	d1f8      	bne.n	8004e58 <_dtoa_r+0x6c0>
 8004e66:	2230      	movs	r2, #48	@ 0x30
 8004e68:	f108 0801 	add.w	r8, r8, #1
 8004e6c:	f88a 2000 	strb.w	r2, [sl]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	3201      	adds	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e7a0      	b.n	8004dba <_dtoa_r+0x622>
 8004e78:	4b6f      	ldr	r3, [pc, #444]	@ (8005038 <_dtoa_r+0x8a0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f7fb fbc4 	bl	8000608 <__aeabi_dmul>
 8004e80:	2200      	movs	r2, #0
 8004e82:	2300      	movs	r3, #0
 8004e84:	4604      	mov	r4, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	f7fb fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d09f      	beq.n	8004dd0 <_dtoa_r+0x638>
 8004e90:	e7d1      	b.n	8004e36 <_dtoa_r+0x69e>
 8004e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	f000 80ea 	beq.w	800506e <_dtoa_r+0x8d6>
 8004e9a:	9a07      	ldr	r2, [sp, #28]
 8004e9c:	2a01      	cmp	r2, #1
 8004e9e:	f300 80cd 	bgt.w	800503c <_dtoa_r+0x8a4>
 8004ea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	f000 80c1 	beq.w	800502c <_dtoa_r+0x894>
 8004eaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004eae:	9c08      	ldr	r4, [sp, #32]
 8004eb0:	9e00      	ldr	r6, [sp, #0]
 8004eb2:	9a00      	ldr	r2, [sp, #0]
 8004eb4:	441a      	add	r2, r3
 8004eb6:	9200      	str	r2, [sp, #0]
 8004eb8:	9a06      	ldr	r2, [sp, #24]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	441a      	add	r2, r3
 8004ebe:	4648      	mov	r0, r9
 8004ec0:	9206      	str	r2, [sp, #24]
 8004ec2:	f000 fc77 	bl	80057b4 <__i2b>
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b166      	cbz	r6, 8004ee4 <_dtoa_r+0x74c>
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd09      	ble.n	8004ee4 <_dtoa_r+0x74c>
 8004ed0:	42b3      	cmp	r3, r6
 8004ed2:	9a00      	ldr	r2, [sp, #0]
 8004ed4:	bfa8      	it	ge
 8004ed6:	4633      	movge	r3, r6
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	9200      	str	r2, [sp, #0]
 8004edc:	9a06      	ldr	r2, [sp, #24]
 8004ede:	1af6      	subs	r6, r6, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	9306      	str	r3, [sp, #24]
 8004ee4:	9b08      	ldr	r3, [sp, #32]
 8004ee6:	b30b      	cbz	r3, 8004f2c <_dtoa_r+0x794>
 8004ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80c6 	beq.w	800507c <_dtoa_r+0x8e4>
 8004ef0:	2c00      	cmp	r4, #0
 8004ef2:	f000 80c0 	beq.w	8005076 <_dtoa_r+0x8de>
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4648      	mov	r0, r9
 8004efc:	f000 fd12 	bl	8005924 <__pow5mult>
 8004f00:	9a02      	ldr	r2, [sp, #8]
 8004f02:	4601      	mov	r1, r0
 8004f04:	4605      	mov	r5, r0
 8004f06:	4648      	mov	r0, r9
 8004f08:	f000 fc6a 	bl	80057e0 <__multiply>
 8004f0c:	9902      	ldr	r1, [sp, #8]
 8004f0e:	4680      	mov	r8, r0
 8004f10:	4648      	mov	r0, r9
 8004f12:	f000 fb51 	bl	80055b8 <_Bfree>
 8004f16:	9b08      	ldr	r3, [sp, #32]
 8004f18:	1b1b      	subs	r3, r3, r4
 8004f1a:	9308      	str	r3, [sp, #32]
 8004f1c:	f000 80b1 	beq.w	8005082 <_dtoa_r+0x8ea>
 8004f20:	9a08      	ldr	r2, [sp, #32]
 8004f22:	4641      	mov	r1, r8
 8004f24:	4648      	mov	r0, r9
 8004f26:	f000 fcfd 	bl	8005924 <__pow5mult>
 8004f2a:	9002      	str	r0, [sp, #8]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4648      	mov	r0, r9
 8004f30:	f000 fc40 	bl	80057b4 <__i2b>
 8004f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f36:	4604      	mov	r4, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 81d8 	beq.w	80052ee <_dtoa_r+0xb56>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4601      	mov	r1, r0
 8004f42:	4648      	mov	r0, r9
 8004f44:	f000 fcee 	bl	8005924 <__pow5mult>
 8004f48:	9b07      	ldr	r3, [sp, #28]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	f300 809f 	bgt.w	8005090 <_dtoa_r+0x8f8>
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8097 	bne.w	8005088 <_dtoa_r+0x8f0>
 8004f5a:	9b05      	ldr	r3, [sp, #20]
 8004f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 8093 	bne.w	800508c <_dtoa_r+0x8f4>
 8004f66:	9b05      	ldr	r3, [sp, #20]
 8004f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f6c:	0d1b      	lsrs	r3, r3, #20
 8004f6e:	051b      	lsls	r3, r3, #20
 8004f70:	b133      	cbz	r3, 8004f80 <_dtoa_r+0x7e8>
 8004f72:	9b00      	ldr	r3, [sp, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	9b06      	ldr	r3, [sp, #24]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	9306      	str	r3, [sp, #24]
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9308      	str	r3, [sp, #32]
 8004f82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 81b8 	beq.w	80052fa <_dtoa_r+0xb62>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f90:	6918      	ldr	r0, [r3, #16]
 8004f92:	f000 fbc3 	bl	800571c <__hi0bits>
 8004f96:	f1c0 0020 	rsb	r0, r0, #32
 8004f9a:	9b06      	ldr	r3, [sp, #24]
 8004f9c:	4418      	add	r0, r3
 8004f9e:	f010 001f 	ands.w	r0, r0, #31
 8004fa2:	f000 8082 	beq.w	80050aa <_dtoa_r+0x912>
 8004fa6:	f1c0 0320 	rsb	r3, r0, #32
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	dd73      	ble.n	8005096 <_dtoa_r+0x8fe>
 8004fae:	9b00      	ldr	r3, [sp, #0]
 8004fb0:	f1c0 001c 	rsb	r0, r0, #28
 8004fb4:	4403      	add	r3, r0
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	9b06      	ldr	r3, [sp, #24]
 8004fba:	4403      	add	r3, r0
 8004fbc:	4406      	add	r6, r0
 8004fbe:	9306      	str	r3, [sp, #24]
 8004fc0:	9b00      	ldr	r3, [sp, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd05      	ble.n	8004fd2 <_dtoa_r+0x83a>
 8004fc6:	9902      	ldr	r1, [sp, #8]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4648      	mov	r0, r9
 8004fcc:	f000 fd04 	bl	80059d8 <__lshift>
 8004fd0:	9002      	str	r0, [sp, #8]
 8004fd2:	9b06      	ldr	r3, [sp, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dd05      	ble.n	8004fe4 <_dtoa_r+0x84c>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4648      	mov	r0, r9
 8004fde:	f000 fcfb 	bl	80059d8 <__lshift>
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d061      	beq.n	80050ae <_dtoa_r+0x916>
 8004fea:	9802      	ldr	r0, [sp, #8]
 8004fec:	4621      	mov	r1, r4
 8004fee:	f000 fd5f 	bl	8005ab0 <__mcmp>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	da5b      	bge.n	80050ae <_dtoa_r+0x916>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9902      	ldr	r1, [sp, #8]
 8004ffa:	220a      	movs	r2, #10
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	f000 fafd 	bl	80055fc <__multadd>
 8005002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005004:	9002      	str	r0, [sp, #8]
 8005006:	f107 38ff 	add.w	r8, r7, #4294967295
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8177 	beq.w	80052fe <_dtoa_r+0xb66>
 8005010:	4629      	mov	r1, r5
 8005012:	2300      	movs	r3, #0
 8005014:	220a      	movs	r2, #10
 8005016:	4648      	mov	r0, r9
 8005018:	f000 faf0 	bl	80055fc <__multadd>
 800501c:	f1bb 0f00 	cmp.w	fp, #0
 8005020:	4605      	mov	r5, r0
 8005022:	dc6f      	bgt.n	8005104 <_dtoa_r+0x96c>
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	2b02      	cmp	r3, #2
 8005028:	dc49      	bgt.n	80050be <_dtoa_r+0x926>
 800502a:	e06b      	b.n	8005104 <_dtoa_r+0x96c>
 800502c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800502e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005032:	e73c      	b.n	8004eae <_dtoa_r+0x716>
 8005034:	3fe00000 	.word	0x3fe00000
 8005038:	40240000 	.word	0x40240000
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1e5c      	subs	r4, r3, #1
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	42a3      	cmp	r3, r4
 8005044:	db09      	blt.n	800505a <_dtoa_r+0x8c2>
 8005046:	1b1c      	subs	r4, r3, r4
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f6bf af30 	bge.w	8004eb0 <_dtoa_r+0x718>
 8005050:	9b00      	ldr	r3, [sp, #0]
 8005052:	9a03      	ldr	r2, [sp, #12]
 8005054:	1a9e      	subs	r6, r3, r2
 8005056:	2300      	movs	r3, #0
 8005058:	e72b      	b.n	8004eb2 <_dtoa_r+0x71a>
 800505a:	9b08      	ldr	r3, [sp, #32]
 800505c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800505e:	9408      	str	r4, [sp, #32]
 8005060:	1ae3      	subs	r3, r4, r3
 8005062:	441a      	add	r2, r3
 8005064:	9e00      	ldr	r6, [sp, #0]
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	920d      	str	r2, [sp, #52]	@ 0x34
 800506a:	2400      	movs	r4, #0
 800506c:	e721      	b.n	8004eb2 <_dtoa_r+0x71a>
 800506e:	9c08      	ldr	r4, [sp, #32]
 8005070:	9e00      	ldr	r6, [sp, #0]
 8005072:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005074:	e728      	b.n	8004ec8 <_dtoa_r+0x730>
 8005076:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800507a:	e751      	b.n	8004f20 <_dtoa_r+0x788>
 800507c:	9a08      	ldr	r2, [sp, #32]
 800507e:	9902      	ldr	r1, [sp, #8]
 8005080:	e750      	b.n	8004f24 <_dtoa_r+0x78c>
 8005082:	f8cd 8008 	str.w	r8, [sp, #8]
 8005086:	e751      	b.n	8004f2c <_dtoa_r+0x794>
 8005088:	2300      	movs	r3, #0
 800508a:	e779      	b.n	8004f80 <_dtoa_r+0x7e8>
 800508c:	9b04      	ldr	r3, [sp, #16]
 800508e:	e777      	b.n	8004f80 <_dtoa_r+0x7e8>
 8005090:	2300      	movs	r3, #0
 8005092:	9308      	str	r3, [sp, #32]
 8005094:	e779      	b.n	8004f8a <_dtoa_r+0x7f2>
 8005096:	d093      	beq.n	8004fc0 <_dtoa_r+0x828>
 8005098:	9a00      	ldr	r2, [sp, #0]
 800509a:	331c      	adds	r3, #28
 800509c:	441a      	add	r2, r3
 800509e:	9200      	str	r2, [sp, #0]
 80050a0:	9a06      	ldr	r2, [sp, #24]
 80050a2:	441a      	add	r2, r3
 80050a4:	441e      	add	r6, r3
 80050a6:	9206      	str	r2, [sp, #24]
 80050a8:	e78a      	b.n	8004fc0 <_dtoa_r+0x828>
 80050aa:	4603      	mov	r3, r0
 80050ac:	e7f4      	b.n	8005098 <_dtoa_r+0x900>
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	46b8      	mov	r8, r7
 80050b4:	dc20      	bgt.n	80050f8 <_dtoa_r+0x960>
 80050b6:	469b      	mov	fp, r3
 80050b8:	9b07      	ldr	r3, [sp, #28]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	dd1e      	ble.n	80050fc <_dtoa_r+0x964>
 80050be:	f1bb 0f00 	cmp.w	fp, #0
 80050c2:	f47f adb1 	bne.w	8004c28 <_dtoa_r+0x490>
 80050c6:	4621      	mov	r1, r4
 80050c8:	465b      	mov	r3, fp
 80050ca:	2205      	movs	r2, #5
 80050cc:	4648      	mov	r0, r9
 80050ce:	f000 fa95 	bl	80055fc <__multadd>
 80050d2:	4601      	mov	r1, r0
 80050d4:	4604      	mov	r4, r0
 80050d6:	9802      	ldr	r0, [sp, #8]
 80050d8:	f000 fcea 	bl	8005ab0 <__mcmp>
 80050dc:	2800      	cmp	r0, #0
 80050de:	f77f ada3 	ble.w	8004c28 <_dtoa_r+0x490>
 80050e2:	4656      	mov	r6, sl
 80050e4:	2331      	movs	r3, #49	@ 0x31
 80050e6:	f806 3b01 	strb.w	r3, [r6], #1
 80050ea:	f108 0801 	add.w	r8, r8, #1
 80050ee:	e59f      	b.n	8004c30 <_dtoa_r+0x498>
 80050f0:	9c03      	ldr	r4, [sp, #12]
 80050f2:	46b8      	mov	r8, r7
 80050f4:	4625      	mov	r5, r4
 80050f6:	e7f4      	b.n	80050e2 <_dtoa_r+0x94a>
 80050f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80050fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8101 	beq.w	8005306 <_dtoa_r+0xb6e>
 8005104:	2e00      	cmp	r6, #0
 8005106:	dd05      	ble.n	8005114 <_dtoa_r+0x97c>
 8005108:	4629      	mov	r1, r5
 800510a:	4632      	mov	r2, r6
 800510c:	4648      	mov	r0, r9
 800510e:	f000 fc63 	bl	80059d8 <__lshift>
 8005112:	4605      	mov	r5, r0
 8005114:	9b08      	ldr	r3, [sp, #32]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d05c      	beq.n	80051d4 <_dtoa_r+0xa3c>
 800511a:	6869      	ldr	r1, [r5, #4]
 800511c:	4648      	mov	r0, r9
 800511e:	f000 fa0b 	bl	8005538 <_Balloc>
 8005122:	4606      	mov	r6, r0
 8005124:	b928      	cbnz	r0, 8005132 <_dtoa_r+0x99a>
 8005126:	4b82      	ldr	r3, [pc, #520]	@ (8005330 <_dtoa_r+0xb98>)
 8005128:	4602      	mov	r2, r0
 800512a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800512e:	f7ff bb4a 	b.w	80047c6 <_dtoa_r+0x2e>
 8005132:	692a      	ldr	r2, [r5, #16]
 8005134:	3202      	adds	r2, #2
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	f105 010c 	add.w	r1, r5, #12
 800513c:	300c      	adds	r0, #12
 800513e:	f001 ff69 	bl	8007014 <memcpy>
 8005142:	2201      	movs	r2, #1
 8005144:	4631      	mov	r1, r6
 8005146:	4648      	mov	r0, r9
 8005148:	f000 fc46 	bl	80059d8 <__lshift>
 800514c:	f10a 0301 	add.w	r3, sl, #1
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	eb0a 030b 	add.w	r3, sl, fp
 8005156:	9308      	str	r3, [sp, #32]
 8005158:	9b04      	ldr	r3, [sp, #16]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	462f      	mov	r7, r5
 8005160:	9306      	str	r3, [sp, #24]
 8005162:	4605      	mov	r5, r0
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	9802      	ldr	r0, [sp, #8]
 8005168:	4621      	mov	r1, r4
 800516a:	f103 3bff 	add.w	fp, r3, #4294967295
 800516e:	f7ff fa89 	bl	8004684 <quorem>
 8005172:	4603      	mov	r3, r0
 8005174:	3330      	adds	r3, #48	@ 0x30
 8005176:	9003      	str	r0, [sp, #12]
 8005178:	4639      	mov	r1, r7
 800517a:	9802      	ldr	r0, [sp, #8]
 800517c:	9309      	str	r3, [sp, #36]	@ 0x24
 800517e:	f000 fc97 	bl	8005ab0 <__mcmp>
 8005182:	462a      	mov	r2, r5
 8005184:	9004      	str	r0, [sp, #16]
 8005186:	4621      	mov	r1, r4
 8005188:	4648      	mov	r0, r9
 800518a:	f000 fcad 	bl	8005ae8 <__mdiff>
 800518e:	68c2      	ldr	r2, [r0, #12]
 8005190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005192:	4606      	mov	r6, r0
 8005194:	bb02      	cbnz	r2, 80051d8 <_dtoa_r+0xa40>
 8005196:	4601      	mov	r1, r0
 8005198:	9802      	ldr	r0, [sp, #8]
 800519a:	f000 fc89 	bl	8005ab0 <__mcmp>
 800519e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a0:	4602      	mov	r2, r0
 80051a2:	4631      	mov	r1, r6
 80051a4:	4648      	mov	r0, r9
 80051a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80051a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051aa:	f000 fa05 	bl	80055b8 <_Bfree>
 80051ae:	9b07      	ldr	r3, [sp, #28]
 80051b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051b2:	9e00      	ldr	r6, [sp, #0]
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
 80051b8:	9b06      	ldr	r3, [sp, #24]
 80051ba:	4319      	orrs	r1, r3
 80051bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051be:	d10d      	bne.n	80051dc <_dtoa_r+0xa44>
 80051c0:	2b39      	cmp	r3, #57	@ 0x39
 80051c2:	d027      	beq.n	8005214 <_dtoa_r+0xa7c>
 80051c4:	9a04      	ldr	r2, [sp, #16]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	dd01      	ble.n	80051ce <_dtoa_r+0xa36>
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	3331      	adds	r3, #49	@ 0x31
 80051ce:	f88b 3000 	strb.w	r3, [fp]
 80051d2:	e52e      	b.n	8004c32 <_dtoa_r+0x49a>
 80051d4:	4628      	mov	r0, r5
 80051d6:	e7b9      	b.n	800514c <_dtoa_r+0x9b4>
 80051d8:	2201      	movs	r2, #1
 80051da:	e7e2      	b.n	80051a2 <_dtoa_r+0xa0a>
 80051dc:	9904      	ldr	r1, [sp, #16]
 80051de:	2900      	cmp	r1, #0
 80051e0:	db04      	blt.n	80051ec <_dtoa_r+0xa54>
 80051e2:	9807      	ldr	r0, [sp, #28]
 80051e4:	4301      	orrs	r1, r0
 80051e6:	9806      	ldr	r0, [sp, #24]
 80051e8:	4301      	orrs	r1, r0
 80051ea:	d120      	bne.n	800522e <_dtoa_r+0xa96>
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	ddee      	ble.n	80051ce <_dtoa_r+0xa36>
 80051f0:	9902      	ldr	r1, [sp, #8]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	4648      	mov	r0, r9
 80051f8:	f000 fbee 	bl	80059d8 <__lshift>
 80051fc:	4621      	mov	r1, r4
 80051fe:	9002      	str	r0, [sp, #8]
 8005200:	f000 fc56 	bl	8005ab0 <__mcmp>
 8005204:	2800      	cmp	r0, #0
 8005206:	9b00      	ldr	r3, [sp, #0]
 8005208:	dc02      	bgt.n	8005210 <_dtoa_r+0xa78>
 800520a:	d1e0      	bne.n	80051ce <_dtoa_r+0xa36>
 800520c:	07da      	lsls	r2, r3, #31
 800520e:	d5de      	bpl.n	80051ce <_dtoa_r+0xa36>
 8005210:	2b39      	cmp	r3, #57	@ 0x39
 8005212:	d1da      	bne.n	80051ca <_dtoa_r+0xa32>
 8005214:	2339      	movs	r3, #57	@ 0x39
 8005216:	f88b 3000 	strb.w	r3, [fp]
 800521a:	4633      	mov	r3, r6
 800521c:	461e      	mov	r6, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005224:	2a39      	cmp	r2, #57	@ 0x39
 8005226:	d04e      	beq.n	80052c6 <_dtoa_r+0xb2e>
 8005228:	3201      	adds	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e501      	b.n	8004c32 <_dtoa_r+0x49a>
 800522e:	2a00      	cmp	r2, #0
 8005230:	dd03      	ble.n	800523a <_dtoa_r+0xaa2>
 8005232:	2b39      	cmp	r3, #57	@ 0x39
 8005234:	d0ee      	beq.n	8005214 <_dtoa_r+0xa7c>
 8005236:	3301      	adds	r3, #1
 8005238:	e7c9      	b.n	80051ce <_dtoa_r+0xa36>
 800523a:	9a00      	ldr	r2, [sp, #0]
 800523c:	9908      	ldr	r1, [sp, #32]
 800523e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005242:	428a      	cmp	r2, r1
 8005244:	d028      	beq.n	8005298 <_dtoa_r+0xb00>
 8005246:	9902      	ldr	r1, [sp, #8]
 8005248:	2300      	movs	r3, #0
 800524a:	220a      	movs	r2, #10
 800524c:	4648      	mov	r0, r9
 800524e:	f000 f9d5 	bl	80055fc <__multadd>
 8005252:	42af      	cmp	r7, r5
 8005254:	9002      	str	r0, [sp, #8]
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	f04f 020a 	mov.w	r2, #10
 800525e:	4639      	mov	r1, r7
 8005260:	4648      	mov	r0, r9
 8005262:	d107      	bne.n	8005274 <_dtoa_r+0xadc>
 8005264:	f000 f9ca 	bl	80055fc <__multadd>
 8005268:	4607      	mov	r7, r0
 800526a:	4605      	mov	r5, r0
 800526c:	9b00      	ldr	r3, [sp, #0]
 800526e:	3301      	adds	r3, #1
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	e777      	b.n	8005164 <_dtoa_r+0x9cc>
 8005274:	f000 f9c2 	bl	80055fc <__multadd>
 8005278:	4629      	mov	r1, r5
 800527a:	4607      	mov	r7, r0
 800527c:	2300      	movs	r3, #0
 800527e:	220a      	movs	r2, #10
 8005280:	4648      	mov	r0, r9
 8005282:	f000 f9bb 	bl	80055fc <__multadd>
 8005286:	4605      	mov	r5, r0
 8005288:	e7f0      	b.n	800526c <_dtoa_r+0xad4>
 800528a:	f1bb 0f00 	cmp.w	fp, #0
 800528e:	bfcc      	ite	gt
 8005290:	465e      	movgt	r6, fp
 8005292:	2601      	movle	r6, #1
 8005294:	4456      	add	r6, sl
 8005296:	2700      	movs	r7, #0
 8005298:	9902      	ldr	r1, [sp, #8]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	4648      	mov	r0, r9
 80052a0:	f000 fb9a 	bl	80059d8 <__lshift>
 80052a4:	4621      	mov	r1, r4
 80052a6:	9002      	str	r0, [sp, #8]
 80052a8:	f000 fc02 	bl	8005ab0 <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	dcb4      	bgt.n	800521a <_dtoa_r+0xa82>
 80052b0:	d102      	bne.n	80052b8 <_dtoa_r+0xb20>
 80052b2:	9b00      	ldr	r3, [sp, #0]
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d4b0      	bmi.n	800521a <_dtoa_r+0xa82>
 80052b8:	4633      	mov	r3, r6
 80052ba:	461e      	mov	r6, r3
 80052bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052c0:	2a30      	cmp	r2, #48	@ 0x30
 80052c2:	d0fa      	beq.n	80052ba <_dtoa_r+0xb22>
 80052c4:	e4b5      	b.n	8004c32 <_dtoa_r+0x49a>
 80052c6:	459a      	cmp	sl, r3
 80052c8:	d1a8      	bne.n	800521c <_dtoa_r+0xa84>
 80052ca:	2331      	movs	r3, #49	@ 0x31
 80052cc:	f108 0801 	add.w	r8, r8, #1
 80052d0:	f88a 3000 	strb.w	r3, [sl]
 80052d4:	e4ad      	b.n	8004c32 <_dtoa_r+0x49a>
 80052d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005334 <_dtoa_r+0xb9c>
 80052dc:	b11b      	cbz	r3, 80052e6 <_dtoa_r+0xb4e>
 80052de:	f10a 0308 	add.w	r3, sl, #8
 80052e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4650      	mov	r0, sl
 80052e8:	b017      	add	sp, #92	@ 0x5c
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f77f ae2e 	ble.w	8004f52 <_dtoa_r+0x7ba>
 80052f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052f8:	9308      	str	r3, [sp, #32]
 80052fa:	2001      	movs	r0, #1
 80052fc:	e64d      	b.n	8004f9a <_dtoa_r+0x802>
 80052fe:	f1bb 0f00 	cmp.w	fp, #0
 8005302:	f77f aed9 	ble.w	80050b8 <_dtoa_r+0x920>
 8005306:	4656      	mov	r6, sl
 8005308:	9802      	ldr	r0, [sp, #8]
 800530a:	4621      	mov	r1, r4
 800530c:	f7ff f9ba 	bl	8004684 <quorem>
 8005310:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005314:	f806 3b01 	strb.w	r3, [r6], #1
 8005318:	eba6 020a 	sub.w	r2, r6, sl
 800531c:	4593      	cmp	fp, r2
 800531e:	ddb4      	ble.n	800528a <_dtoa_r+0xaf2>
 8005320:	9902      	ldr	r1, [sp, #8]
 8005322:	2300      	movs	r3, #0
 8005324:	220a      	movs	r2, #10
 8005326:	4648      	mov	r0, r9
 8005328:	f000 f968 	bl	80055fc <__multadd>
 800532c:	9002      	str	r0, [sp, #8]
 800532e:	e7eb      	b.n	8005308 <_dtoa_r+0xb70>
 8005330:	08007eeb 	.word	0x08007eeb
 8005334:	08007e6f 	.word	0x08007e6f

08005338 <_free_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4605      	mov	r5, r0
 800533c:	2900      	cmp	r1, #0
 800533e:	d041      	beq.n	80053c4 <_free_r+0x8c>
 8005340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005344:	1f0c      	subs	r4, r1, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfb8      	it	lt
 800534a:	18e4      	addlt	r4, r4, r3
 800534c:	f000 f8e8 	bl	8005520 <__malloc_lock>
 8005350:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <_free_r+0x90>)
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	b933      	cbnz	r3, 8005364 <_free_r+0x2c>
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	6014      	str	r4, [r2, #0]
 800535a:	4628      	mov	r0, r5
 800535c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005360:	f000 b8e4 	b.w	800552c <__malloc_unlock>
 8005364:	42a3      	cmp	r3, r4
 8005366:	d908      	bls.n	800537a <_free_r+0x42>
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	1821      	adds	r1, r4, r0
 800536c:	428b      	cmp	r3, r1
 800536e:	bf01      	itttt	eq
 8005370:	6819      	ldreq	r1, [r3, #0]
 8005372:	685b      	ldreq	r3, [r3, #4]
 8005374:	1809      	addeq	r1, r1, r0
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	e7ed      	b.n	8005356 <_free_r+0x1e>
 800537a:	461a      	mov	r2, r3
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b10b      	cbz	r3, 8005384 <_free_r+0x4c>
 8005380:	42a3      	cmp	r3, r4
 8005382:	d9fa      	bls.n	800537a <_free_r+0x42>
 8005384:	6811      	ldr	r1, [r2, #0]
 8005386:	1850      	adds	r0, r2, r1
 8005388:	42a0      	cmp	r0, r4
 800538a:	d10b      	bne.n	80053a4 <_free_r+0x6c>
 800538c:	6820      	ldr	r0, [r4, #0]
 800538e:	4401      	add	r1, r0
 8005390:	1850      	adds	r0, r2, r1
 8005392:	4283      	cmp	r3, r0
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	d1e0      	bne.n	800535a <_free_r+0x22>
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	6053      	str	r3, [r2, #4]
 800539e:	4408      	add	r0, r1
 80053a0:	6010      	str	r0, [r2, #0]
 80053a2:	e7da      	b.n	800535a <_free_r+0x22>
 80053a4:	d902      	bls.n	80053ac <_free_r+0x74>
 80053a6:	230c      	movs	r3, #12
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	e7d6      	b.n	800535a <_free_r+0x22>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	1821      	adds	r1, r4, r0
 80053b0:	428b      	cmp	r3, r1
 80053b2:	bf04      	itt	eq
 80053b4:	6819      	ldreq	r1, [r3, #0]
 80053b6:	685b      	ldreq	r3, [r3, #4]
 80053b8:	6063      	str	r3, [r4, #4]
 80053ba:	bf04      	itt	eq
 80053bc:	1809      	addeq	r1, r1, r0
 80053be:	6021      	streq	r1, [r4, #0]
 80053c0:	6054      	str	r4, [r2, #4]
 80053c2:	e7ca      	b.n	800535a <_free_r+0x22>
 80053c4:	bd38      	pop	{r3, r4, r5, pc}
 80053c6:	bf00      	nop
 80053c8:	20000428 	.word	0x20000428

080053cc <malloc>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	@ (80053d8 <malloc+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f000 b825 	b.w	8005420 <_malloc_r>
 80053d6:	bf00      	nop
 80053d8:	20000070 	.word	0x20000070

080053dc <sbrk_aligned>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	4e0f      	ldr	r6, [pc, #60]	@ (800541c <sbrk_aligned+0x40>)
 80053e0:	460c      	mov	r4, r1
 80053e2:	6831      	ldr	r1, [r6, #0]
 80053e4:	4605      	mov	r5, r0
 80053e6:	b911      	cbnz	r1, 80053ee <sbrk_aligned+0x12>
 80053e8:	f001 fe04 	bl	8006ff4 <_sbrk_r>
 80053ec:	6030      	str	r0, [r6, #0]
 80053ee:	4621      	mov	r1, r4
 80053f0:	4628      	mov	r0, r5
 80053f2:	f001 fdff 	bl	8006ff4 <_sbrk_r>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d103      	bne.n	8005402 <sbrk_aligned+0x26>
 80053fa:	f04f 34ff 	mov.w	r4, #4294967295
 80053fe:	4620      	mov	r0, r4
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d0f8      	beq.n	80053fe <sbrk_aligned+0x22>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4628      	mov	r0, r5
 8005410:	f001 fdf0 	bl	8006ff4 <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d1f2      	bne.n	80053fe <sbrk_aligned+0x22>
 8005418:	e7ef      	b.n	80053fa <sbrk_aligned+0x1e>
 800541a:	bf00      	nop
 800541c:	20000424 	.word	0x20000424

08005420 <_malloc_r>:
 8005420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005424:	1ccd      	adds	r5, r1, #3
 8005426:	f025 0503 	bic.w	r5, r5, #3
 800542a:	3508      	adds	r5, #8
 800542c:	2d0c      	cmp	r5, #12
 800542e:	bf38      	it	cc
 8005430:	250c      	movcc	r5, #12
 8005432:	2d00      	cmp	r5, #0
 8005434:	4606      	mov	r6, r0
 8005436:	db01      	blt.n	800543c <_malloc_r+0x1c>
 8005438:	42a9      	cmp	r1, r5
 800543a:	d904      	bls.n	8005446 <_malloc_r+0x26>
 800543c:	230c      	movs	r3, #12
 800543e:	6033      	str	r3, [r6, #0]
 8005440:	2000      	movs	r0, #0
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800551c <_malloc_r+0xfc>
 800544a:	f000 f869 	bl	8005520 <__malloc_lock>
 800544e:	f8d8 3000 	ldr.w	r3, [r8]
 8005452:	461c      	mov	r4, r3
 8005454:	bb44      	cbnz	r4, 80054a8 <_malloc_r+0x88>
 8005456:	4629      	mov	r1, r5
 8005458:	4630      	mov	r0, r6
 800545a:	f7ff ffbf 	bl	80053dc <sbrk_aligned>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	4604      	mov	r4, r0
 8005462:	d158      	bne.n	8005516 <_malloc_r+0xf6>
 8005464:	f8d8 4000 	ldr.w	r4, [r8]
 8005468:	4627      	mov	r7, r4
 800546a:	2f00      	cmp	r7, #0
 800546c:	d143      	bne.n	80054f6 <_malloc_r+0xd6>
 800546e:	2c00      	cmp	r4, #0
 8005470:	d04b      	beq.n	800550a <_malloc_r+0xea>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	4639      	mov	r1, r7
 8005476:	4630      	mov	r0, r6
 8005478:	eb04 0903 	add.w	r9, r4, r3
 800547c:	f001 fdba 	bl	8006ff4 <_sbrk_r>
 8005480:	4581      	cmp	r9, r0
 8005482:	d142      	bne.n	800550a <_malloc_r+0xea>
 8005484:	6821      	ldr	r1, [r4, #0]
 8005486:	1a6d      	subs	r5, r5, r1
 8005488:	4629      	mov	r1, r5
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff ffa6 	bl	80053dc <sbrk_aligned>
 8005490:	3001      	adds	r0, #1
 8005492:	d03a      	beq.n	800550a <_malloc_r+0xea>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	442b      	add	r3, r5
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	f8d8 3000 	ldr.w	r3, [r8]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	bb62      	cbnz	r2, 80054fc <_malloc_r+0xdc>
 80054a2:	f8c8 7000 	str.w	r7, [r8]
 80054a6:	e00f      	b.n	80054c8 <_malloc_r+0xa8>
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	1b52      	subs	r2, r2, r5
 80054ac:	d420      	bmi.n	80054f0 <_malloc_r+0xd0>
 80054ae:	2a0b      	cmp	r2, #11
 80054b0:	d917      	bls.n	80054e2 <_malloc_r+0xc2>
 80054b2:	1961      	adds	r1, r4, r5
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	6025      	str	r5, [r4, #0]
 80054b8:	bf18      	it	ne
 80054ba:	6059      	strne	r1, [r3, #4]
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	bf08      	it	eq
 80054c0:	f8c8 1000 	streq.w	r1, [r8]
 80054c4:	5162      	str	r2, [r4, r5]
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f82f 	bl	800552c <__malloc_unlock>
 80054ce:	f104 000b 	add.w	r0, r4, #11
 80054d2:	1d23      	adds	r3, r4, #4
 80054d4:	f020 0007 	bic.w	r0, r0, #7
 80054d8:	1ac2      	subs	r2, r0, r3
 80054da:	bf1c      	itt	ne
 80054dc:	1a1b      	subne	r3, r3, r0
 80054de:	50a3      	strne	r3, [r4, r2]
 80054e0:	e7af      	b.n	8005442 <_malloc_r+0x22>
 80054e2:	6862      	ldr	r2, [r4, #4]
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	bf0c      	ite	eq
 80054e8:	f8c8 2000 	streq.w	r2, [r8]
 80054ec:	605a      	strne	r2, [r3, #4]
 80054ee:	e7eb      	b.n	80054c8 <_malloc_r+0xa8>
 80054f0:	4623      	mov	r3, r4
 80054f2:	6864      	ldr	r4, [r4, #4]
 80054f4:	e7ae      	b.n	8005454 <_malloc_r+0x34>
 80054f6:	463c      	mov	r4, r7
 80054f8:	687f      	ldr	r7, [r7, #4]
 80054fa:	e7b6      	b.n	800546a <_malloc_r+0x4a>
 80054fc:	461a      	mov	r2, r3
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	42a3      	cmp	r3, r4
 8005502:	d1fb      	bne.n	80054fc <_malloc_r+0xdc>
 8005504:	2300      	movs	r3, #0
 8005506:	6053      	str	r3, [r2, #4]
 8005508:	e7de      	b.n	80054c8 <_malloc_r+0xa8>
 800550a:	230c      	movs	r3, #12
 800550c:	6033      	str	r3, [r6, #0]
 800550e:	4630      	mov	r0, r6
 8005510:	f000 f80c 	bl	800552c <__malloc_unlock>
 8005514:	e794      	b.n	8005440 <_malloc_r+0x20>
 8005516:	6005      	str	r5, [r0, #0]
 8005518:	e7d6      	b.n	80054c8 <_malloc_r+0xa8>
 800551a:	bf00      	nop
 800551c:	20000428 	.word	0x20000428

08005520 <__malloc_lock>:
 8005520:	4801      	ldr	r0, [pc, #4]	@ (8005528 <__malloc_lock+0x8>)
 8005522:	f7ff b89e 	b.w	8004662 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	20000420 	.word	0x20000420

0800552c <__malloc_unlock>:
 800552c:	4801      	ldr	r0, [pc, #4]	@ (8005534 <__malloc_unlock+0x8>)
 800552e:	f7ff b899 	b.w	8004664 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	20000420 	.word	0x20000420

08005538 <_Balloc>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	69c6      	ldr	r6, [r0, #28]
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	b976      	cbnz	r6, 8005560 <_Balloc+0x28>
 8005542:	2010      	movs	r0, #16
 8005544:	f7ff ff42 	bl	80053cc <malloc>
 8005548:	4602      	mov	r2, r0
 800554a:	61e0      	str	r0, [r4, #28]
 800554c:	b920      	cbnz	r0, 8005558 <_Balloc+0x20>
 800554e:	4b18      	ldr	r3, [pc, #96]	@ (80055b0 <_Balloc+0x78>)
 8005550:	4818      	ldr	r0, [pc, #96]	@ (80055b4 <_Balloc+0x7c>)
 8005552:	216b      	movs	r1, #107	@ 0x6b
 8005554:	f001 fd74 	bl	8007040 <__assert_func>
 8005558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800555c:	6006      	str	r6, [r0, #0]
 800555e:	60c6      	str	r6, [r0, #12]
 8005560:	69e6      	ldr	r6, [r4, #28]
 8005562:	68f3      	ldr	r3, [r6, #12]
 8005564:	b183      	cbz	r3, 8005588 <_Balloc+0x50>
 8005566:	69e3      	ldr	r3, [r4, #28]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800556e:	b9b8      	cbnz	r0, 80055a0 <_Balloc+0x68>
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f605 	lsl.w	r6, r1, r5
 8005576:	1d72      	adds	r2, r6, #5
 8005578:	0092      	lsls	r2, r2, #2
 800557a:	4620      	mov	r0, r4
 800557c:	f001 fd7e 	bl	800707c <_calloc_r>
 8005580:	b160      	cbz	r0, 800559c <_Balloc+0x64>
 8005582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005586:	e00e      	b.n	80055a6 <_Balloc+0x6e>
 8005588:	2221      	movs	r2, #33	@ 0x21
 800558a:	2104      	movs	r1, #4
 800558c:	4620      	mov	r0, r4
 800558e:	f001 fd75 	bl	800707c <_calloc_r>
 8005592:	69e3      	ldr	r3, [r4, #28]
 8005594:	60f0      	str	r0, [r6, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e4      	bne.n	8005566 <_Balloc+0x2e>
 800559c:	2000      	movs	r0, #0
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	6802      	ldr	r2, [r0, #0]
 80055a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055a6:	2300      	movs	r3, #0
 80055a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055ac:	e7f7      	b.n	800559e <_Balloc+0x66>
 80055ae:	bf00      	nop
 80055b0:	08007e7c 	.word	0x08007e7c
 80055b4:	08007efc 	.word	0x08007efc

080055b8 <_Bfree>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	69c6      	ldr	r6, [r0, #28]
 80055bc:	4605      	mov	r5, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b976      	cbnz	r6, 80055e0 <_Bfree+0x28>
 80055c2:	2010      	movs	r0, #16
 80055c4:	f7ff ff02 	bl	80053cc <malloc>
 80055c8:	4602      	mov	r2, r0
 80055ca:	61e8      	str	r0, [r5, #28]
 80055cc:	b920      	cbnz	r0, 80055d8 <_Bfree+0x20>
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <_Bfree+0x3c>)
 80055d0:	4809      	ldr	r0, [pc, #36]	@ (80055f8 <_Bfree+0x40>)
 80055d2:	218f      	movs	r1, #143	@ 0x8f
 80055d4:	f001 fd34 	bl	8007040 <__assert_func>
 80055d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055dc:	6006      	str	r6, [r0, #0]
 80055de:	60c6      	str	r6, [r0, #12]
 80055e0:	b13c      	cbz	r4, 80055f2 <_Bfree+0x3a>
 80055e2:	69eb      	ldr	r3, [r5, #28]
 80055e4:	6862      	ldr	r2, [r4, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055ec:	6021      	str	r1, [r4, #0]
 80055ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	08007e7c 	.word	0x08007e7c
 80055f8:	08007efc 	.word	0x08007efc

080055fc <__multadd>:
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	690d      	ldr	r5, [r1, #16]
 8005602:	4607      	mov	r7, r0
 8005604:	460c      	mov	r4, r1
 8005606:	461e      	mov	r6, r3
 8005608:	f101 0c14 	add.w	ip, r1, #20
 800560c:	2000      	movs	r0, #0
 800560e:	f8dc 3000 	ldr.w	r3, [ip]
 8005612:	b299      	uxth	r1, r3
 8005614:	fb02 6101 	mla	r1, r2, r1, r6
 8005618:	0c1e      	lsrs	r6, r3, #16
 800561a:	0c0b      	lsrs	r3, r1, #16
 800561c:	fb02 3306 	mla	r3, r2, r6, r3
 8005620:	b289      	uxth	r1, r1
 8005622:	3001      	adds	r0, #1
 8005624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005628:	4285      	cmp	r5, r0
 800562a:	f84c 1b04 	str.w	r1, [ip], #4
 800562e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005632:	dcec      	bgt.n	800560e <__multadd+0x12>
 8005634:	b30e      	cbz	r6, 800567a <__multadd+0x7e>
 8005636:	68a3      	ldr	r3, [r4, #8]
 8005638:	42ab      	cmp	r3, r5
 800563a:	dc19      	bgt.n	8005670 <__multadd+0x74>
 800563c:	6861      	ldr	r1, [r4, #4]
 800563e:	4638      	mov	r0, r7
 8005640:	3101      	adds	r1, #1
 8005642:	f7ff ff79 	bl	8005538 <_Balloc>
 8005646:	4680      	mov	r8, r0
 8005648:	b928      	cbnz	r0, 8005656 <__multadd+0x5a>
 800564a:	4602      	mov	r2, r0
 800564c:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <__multadd+0x84>)
 800564e:	480d      	ldr	r0, [pc, #52]	@ (8005684 <__multadd+0x88>)
 8005650:	21ba      	movs	r1, #186	@ 0xba
 8005652:	f001 fcf5 	bl	8007040 <__assert_func>
 8005656:	6922      	ldr	r2, [r4, #16]
 8005658:	3202      	adds	r2, #2
 800565a:	f104 010c 	add.w	r1, r4, #12
 800565e:	0092      	lsls	r2, r2, #2
 8005660:	300c      	adds	r0, #12
 8005662:	f001 fcd7 	bl	8007014 <memcpy>
 8005666:	4621      	mov	r1, r4
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ffa5 	bl	80055b8 <_Bfree>
 800566e:	4644      	mov	r4, r8
 8005670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005674:	3501      	adds	r5, #1
 8005676:	615e      	str	r6, [r3, #20]
 8005678:	6125      	str	r5, [r4, #16]
 800567a:	4620      	mov	r0, r4
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005680:	08007eeb 	.word	0x08007eeb
 8005684:	08007efc 	.word	0x08007efc

08005688 <__s2b>:
 8005688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800568c:	460c      	mov	r4, r1
 800568e:	4615      	mov	r5, r2
 8005690:	461f      	mov	r7, r3
 8005692:	2209      	movs	r2, #9
 8005694:	3308      	adds	r3, #8
 8005696:	4606      	mov	r6, r0
 8005698:	fb93 f3f2 	sdiv	r3, r3, r2
 800569c:	2100      	movs	r1, #0
 800569e:	2201      	movs	r2, #1
 80056a0:	429a      	cmp	r2, r3
 80056a2:	db09      	blt.n	80056b8 <__s2b+0x30>
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff ff47 	bl	8005538 <_Balloc>
 80056aa:	b940      	cbnz	r0, 80056be <__s2b+0x36>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b19      	ldr	r3, [pc, #100]	@ (8005714 <__s2b+0x8c>)
 80056b0:	4819      	ldr	r0, [pc, #100]	@ (8005718 <__s2b+0x90>)
 80056b2:	21d3      	movs	r1, #211	@ 0xd3
 80056b4:	f001 fcc4 	bl	8007040 <__assert_func>
 80056b8:	0052      	lsls	r2, r2, #1
 80056ba:	3101      	adds	r1, #1
 80056bc:	e7f0      	b.n	80056a0 <__s2b+0x18>
 80056be:	9b08      	ldr	r3, [sp, #32]
 80056c0:	6143      	str	r3, [r0, #20]
 80056c2:	2d09      	cmp	r5, #9
 80056c4:	f04f 0301 	mov.w	r3, #1
 80056c8:	6103      	str	r3, [r0, #16]
 80056ca:	dd16      	ble.n	80056fa <__s2b+0x72>
 80056cc:	f104 0909 	add.w	r9, r4, #9
 80056d0:	46c8      	mov	r8, r9
 80056d2:	442c      	add	r4, r5
 80056d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80056d8:	4601      	mov	r1, r0
 80056da:	3b30      	subs	r3, #48	@ 0x30
 80056dc:	220a      	movs	r2, #10
 80056de:	4630      	mov	r0, r6
 80056e0:	f7ff ff8c 	bl	80055fc <__multadd>
 80056e4:	45a0      	cmp	r8, r4
 80056e6:	d1f5      	bne.n	80056d4 <__s2b+0x4c>
 80056e8:	f1a5 0408 	sub.w	r4, r5, #8
 80056ec:	444c      	add	r4, r9
 80056ee:	1b2d      	subs	r5, r5, r4
 80056f0:	1963      	adds	r3, r4, r5
 80056f2:	42bb      	cmp	r3, r7
 80056f4:	db04      	blt.n	8005700 <__s2b+0x78>
 80056f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056fa:	340a      	adds	r4, #10
 80056fc:	2509      	movs	r5, #9
 80056fe:	e7f6      	b.n	80056ee <__s2b+0x66>
 8005700:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005704:	4601      	mov	r1, r0
 8005706:	3b30      	subs	r3, #48	@ 0x30
 8005708:	220a      	movs	r2, #10
 800570a:	4630      	mov	r0, r6
 800570c:	f7ff ff76 	bl	80055fc <__multadd>
 8005710:	e7ee      	b.n	80056f0 <__s2b+0x68>
 8005712:	bf00      	nop
 8005714:	08007eeb 	.word	0x08007eeb
 8005718:	08007efc 	.word	0x08007efc

0800571c <__hi0bits>:
 800571c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005720:	4603      	mov	r3, r0
 8005722:	bf36      	itet	cc
 8005724:	0403      	lslcc	r3, r0, #16
 8005726:	2000      	movcs	r0, #0
 8005728:	2010      	movcc	r0, #16
 800572a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800572e:	bf3c      	itt	cc
 8005730:	021b      	lslcc	r3, r3, #8
 8005732:	3008      	addcc	r0, #8
 8005734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005738:	bf3c      	itt	cc
 800573a:	011b      	lslcc	r3, r3, #4
 800573c:	3004      	addcc	r0, #4
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	bf3c      	itt	cc
 8005744:	009b      	lslcc	r3, r3, #2
 8005746:	3002      	addcc	r0, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	db05      	blt.n	8005758 <__hi0bits+0x3c>
 800574c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005750:	f100 0001 	add.w	r0, r0, #1
 8005754:	bf08      	it	eq
 8005756:	2020      	moveq	r0, #32
 8005758:	4770      	bx	lr

0800575a <__lo0bits>:
 800575a:	6803      	ldr	r3, [r0, #0]
 800575c:	4602      	mov	r2, r0
 800575e:	f013 0007 	ands.w	r0, r3, #7
 8005762:	d00b      	beq.n	800577c <__lo0bits+0x22>
 8005764:	07d9      	lsls	r1, r3, #31
 8005766:	d421      	bmi.n	80057ac <__lo0bits+0x52>
 8005768:	0798      	lsls	r0, r3, #30
 800576a:	bf49      	itett	mi
 800576c:	085b      	lsrmi	r3, r3, #1
 800576e:	089b      	lsrpl	r3, r3, #2
 8005770:	2001      	movmi	r0, #1
 8005772:	6013      	strmi	r3, [r2, #0]
 8005774:	bf5c      	itt	pl
 8005776:	6013      	strpl	r3, [r2, #0]
 8005778:	2002      	movpl	r0, #2
 800577a:	4770      	bx	lr
 800577c:	b299      	uxth	r1, r3
 800577e:	b909      	cbnz	r1, 8005784 <__lo0bits+0x2a>
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	2010      	movs	r0, #16
 8005784:	b2d9      	uxtb	r1, r3
 8005786:	b909      	cbnz	r1, 800578c <__lo0bits+0x32>
 8005788:	3008      	adds	r0, #8
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	0719      	lsls	r1, r3, #28
 800578e:	bf04      	itt	eq
 8005790:	091b      	lsreq	r3, r3, #4
 8005792:	3004      	addeq	r0, #4
 8005794:	0799      	lsls	r1, r3, #30
 8005796:	bf04      	itt	eq
 8005798:	089b      	lsreq	r3, r3, #2
 800579a:	3002      	addeq	r0, #2
 800579c:	07d9      	lsls	r1, r3, #31
 800579e:	d403      	bmi.n	80057a8 <__lo0bits+0x4e>
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	f100 0001 	add.w	r0, r0, #1
 80057a6:	d003      	beq.n	80057b0 <__lo0bits+0x56>
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4770      	bx	lr
 80057ac:	2000      	movs	r0, #0
 80057ae:	4770      	bx	lr
 80057b0:	2020      	movs	r0, #32
 80057b2:	4770      	bx	lr

080057b4 <__i2b>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	2101      	movs	r1, #1
 80057ba:	f7ff febd 	bl	8005538 <_Balloc>
 80057be:	4602      	mov	r2, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__i2b+0x1a>
 80057c2:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <__i2b+0x24>)
 80057c4:	4805      	ldr	r0, [pc, #20]	@ (80057dc <__i2b+0x28>)
 80057c6:	f240 1145 	movw	r1, #325	@ 0x145
 80057ca:	f001 fc39 	bl	8007040 <__assert_func>
 80057ce:	2301      	movs	r3, #1
 80057d0:	6144      	str	r4, [r0, #20]
 80057d2:	6103      	str	r3, [r0, #16]
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	bf00      	nop
 80057d8:	08007eeb 	.word	0x08007eeb
 80057dc:	08007efc 	.word	0x08007efc

080057e0 <__multiply>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	4617      	mov	r7, r2
 80057e6:	690a      	ldr	r2, [r1, #16]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	bfa8      	it	ge
 80057ee:	463b      	movge	r3, r7
 80057f0:	4689      	mov	r9, r1
 80057f2:	bfa4      	itt	ge
 80057f4:	460f      	movge	r7, r1
 80057f6:	4699      	movge	r9, r3
 80057f8:	693d      	ldr	r5, [r7, #16]
 80057fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	eb05 060a 	add.w	r6, r5, sl
 8005806:	42b3      	cmp	r3, r6
 8005808:	b085      	sub	sp, #20
 800580a:	bfb8      	it	lt
 800580c:	3101      	addlt	r1, #1
 800580e:	f7ff fe93 	bl	8005538 <_Balloc>
 8005812:	b930      	cbnz	r0, 8005822 <__multiply+0x42>
 8005814:	4602      	mov	r2, r0
 8005816:	4b41      	ldr	r3, [pc, #260]	@ (800591c <__multiply+0x13c>)
 8005818:	4841      	ldr	r0, [pc, #260]	@ (8005920 <__multiply+0x140>)
 800581a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800581e:	f001 fc0f 	bl	8007040 <__assert_func>
 8005822:	f100 0414 	add.w	r4, r0, #20
 8005826:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800582a:	4623      	mov	r3, r4
 800582c:	2200      	movs	r2, #0
 800582e:	4573      	cmp	r3, lr
 8005830:	d320      	bcc.n	8005874 <__multiply+0x94>
 8005832:	f107 0814 	add.w	r8, r7, #20
 8005836:	f109 0114 	add.w	r1, r9, #20
 800583a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800583e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	1beb      	subs	r3, r5, r7
 8005846:	3b15      	subs	r3, #21
 8005848:	f023 0303 	bic.w	r3, r3, #3
 800584c:	3304      	adds	r3, #4
 800584e:	3715      	adds	r7, #21
 8005850:	42bd      	cmp	r5, r7
 8005852:	bf38      	it	cc
 8005854:	2304      	movcc	r3, #4
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	9b02      	ldr	r3, [sp, #8]
 800585a:	9103      	str	r1, [sp, #12]
 800585c:	428b      	cmp	r3, r1
 800585e:	d80c      	bhi.n	800587a <__multiply+0x9a>
 8005860:	2e00      	cmp	r6, #0
 8005862:	dd03      	ble.n	800586c <__multiply+0x8c>
 8005864:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005868:	2b00      	cmp	r3, #0
 800586a:	d055      	beq.n	8005918 <__multiply+0x138>
 800586c:	6106      	str	r6, [r0, #16]
 800586e:	b005      	add	sp, #20
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005874:	f843 2b04 	str.w	r2, [r3], #4
 8005878:	e7d9      	b.n	800582e <__multiply+0x4e>
 800587a:	f8b1 a000 	ldrh.w	sl, [r1]
 800587e:	f1ba 0f00 	cmp.w	sl, #0
 8005882:	d01f      	beq.n	80058c4 <__multiply+0xe4>
 8005884:	46c4      	mov	ip, r8
 8005886:	46a1      	mov	r9, r4
 8005888:	2700      	movs	r7, #0
 800588a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800588e:	f8d9 3000 	ldr.w	r3, [r9]
 8005892:	fa1f fb82 	uxth.w	fp, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	fb0a 330b 	mla	r3, sl, fp, r3
 800589c:	443b      	add	r3, r7
 800589e:	f8d9 7000 	ldr.w	r7, [r9]
 80058a2:	0c12      	lsrs	r2, r2, #16
 80058a4:	0c3f      	lsrs	r7, r7, #16
 80058a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80058aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058b4:	4565      	cmp	r5, ip
 80058b6:	f849 3b04 	str.w	r3, [r9], #4
 80058ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80058be:	d8e4      	bhi.n	800588a <__multiply+0xaa>
 80058c0:	9b01      	ldr	r3, [sp, #4]
 80058c2:	50e7      	str	r7, [r4, r3]
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058ca:	3104      	adds	r1, #4
 80058cc:	f1b9 0f00 	cmp.w	r9, #0
 80058d0:	d020      	beq.n	8005914 <__multiply+0x134>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4647      	mov	r7, r8
 80058d6:	46a4      	mov	ip, r4
 80058d8:	f04f 0a00 	mov.w	sl, #0
 80058dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80058e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80058e4:	fb09 220b 	mla	r2, r9, fp, r2
 80058e8:	4452      	add	r2, sl
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058f0:	f84c 3b04 	str.w	r3, [ip], #4
 80058f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80058f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8005900:	fb09 330a 	mla	r3, r9, sl, r3
 8005904:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005908:	42bd      	cmp	r5, r7
 800590a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800590e:	d8e5      	bhi.n	80058dc <__multiply+0xfc>
 8005910:	9a01      	ldr	r2, [sp, #4]
 8005912:	50a3      	str	r3, [r4, r2]
 8005914:	3404      	adds	r4, #4
 8005916:	e79f      	b.n	8005858 <__multiply+0x78>
 8005918:	3e01      	subs	r6, #1
 800591a:	e7a1      	b.n	8005860 <__multiply+0x80>
 800591c:	08007eeb 	.word	0x08007eeb
 8005920:	08007efc 	.word	0x08007efc

08005924 <__pow5mult>:
 8005924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005928:	4615      	mov	r5, r2
 800592a:	f012 0203 	ands.w	r2, r2, #3
 800592e:	4607      	mov	r7, r0
 8005930:	460e      	mov	r6, r1
 8005932:	d007      	beq.n	8005944 <__pow5mult+0x20>
 8005934:	4c25      	ldr	r4, [pc, #148]	@ (80059cc <__pow5mult+0xa8>)
 8005936:	3a01      	subs	r2, #1
 8005938:	2300      	movs	r3, #0
 800593a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800593e:	f7ff fe5d 	bl	80055fc <__multadd>
 8005942:	4606      	mov	r6, r0
 8005944:	10ad      	asrs	r5, r5, #2
 8005946:	d03d      	beq.n	80059c4 <__pow5mult+0xa0>
 8005948:	69fc      	ldr	r4, [r7, #28]
 800594a:	b97c      	cbnz	r4, 800596c <__pow5mult+0x48>
 800594c:	2010      	movs	r0, #16
 800594e:	f7ff fd3d 	bl	80053cc <malloc>
 8005952:	4602      	mov	r2, r0
 8005954:	61f8      	str	r0, [r7, #28]
 8005956:	b928      	cbnz	r0, 8005964 <__pow5mult+0x40>
 8005958:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <__pow5mult+0xac>)
 800595a:	481e      	ldr	r0, [pc, #120]	@ (80059d4 <__pow5mult+0xb0>)
 800595c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005960:	f001 fb6e 	bl	8007040 <__assert_func>
 8005964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005968:	6004      	str	r4, [r0, #0]
 800596a:	60c4      	str	r4, [r0, #12]
 800596c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005974:	b94c      	cbnz	r4, 800598a <__pow5mult+0x66>
 8005976:	f240 2171 	movw	r1, #625	@ 0x271
 800597a:	4638      	mov	r0, r7
 800597c:	f7ff ff1a 	bl	80057b4 <__i2b>
 8005980:	2300      	movs	r3, #0
 8005982:	f8c8 0008 	str.w	r0, [r8, #8]
 8005986:	4604      	mov	r4, r0
 8005988:	6003      	str	r3, [r0, #0]
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	07eb      	lsls	r3, r5, #31
 8005990:	d50a      	bpl.n	80059a8 <__pow5mult+0x84>
 8005992:	4631      	mov	r1, r6
 8005994:	4622      	mov	r2, r4
 8005996:	4638      	mov	r0, r7
 8005998:	f7ff ff22 	bl	80057e0 <__multiply>
 800599c:	4631      	mov	r1, r6
 800599e:	4680      	mov	r8, r0
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff fe09 	bl	80055b8 <_Bfree>
 80059a6:	4646      	mov	r6, r8
 80059a8:	106d      	asrs	r5, r5, #1
 80059aa:	d00b      	beq.n	80059c4 <__pow5mult+0xa0>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	b938      	cbnz	r0, 80059c0 <__pow5mult+0x9c>
 80059b0:	4622      	mov	r2, r4
 80059b2:	4621      	mov	r1, r4
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ff13 	bl	80057e0 <__multiply>
 80059ba:	6020      	str	r0, [r4, #0]
 80059bc:	f8c0 9000 	str.w	r9, [r0]
 80059c0:	4604      	mov	r4, r0
 80059c2:	e7e4      	b.n	800598e <__pow5mult+0x6a>
 80059c4:	4630      	mov	r0, r6
 80059c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ca:	bf00      	nop
 80059cc:	0800800c 	.word	0x0800800c
 80059d0:	08007e7c 	.word	0x08007e7c
 80059d4:	08007efc 	.word	0x08007efc

080059d8 <__lshift>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	460c      	mov	r4, r1
 80059de:	6849      	ldr	r1, [r1, #4]
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	4607      	mov	r7, r0
 80059ea:	4691      	mov	r9, r2
 80059ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059f0:	f108 0601 	add.w	r6, r8, #1
 80059f4:	42b3      	cmp	r3, r6
 80059f6:	db0b      	blt.n	8005a10 <__lshift+0x38>
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff fd9d 	bl	8005538 <_Balloc>
 80059fe:	4605      	mov	r5, r0
 8005a00:	b948      	cbnz	r0, 8005a16 <__lshift+0x3e>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4b28      	ldr	r3, [pc, #160]	@ (8005aa8 <__lshift+0xd0>)
 8005a06:	4829      	ldr	r0, [pc, #164]	@ (8005aac <__lshift+0xd4>)
 8005a08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a0c:	f001 fb18 	bl	8007040 <__assert_func>
 8005a10:	3101      	adds	r1, #1
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	e7ee      	b.n	80059f4 <__lshift+0x1c>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f100 0114 	add.w	r1, r0, #20
 8005a1c:	f100 0210 	add.w	r2, r0, #16
 8005a20:	4618      	mov	r0, r3
 8005a22:	4553      	cmp	r3, sl
 8005a24:	db33      	blt.n	8005a8e <__lshift+0xb6>
 8005a26:	6920      	ldr	r0, [r4, #16]
 8005a28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a2c:	f104 0314 	add.w	r3, r4, #20
 8005a30:	f019 091f 	ands.w	r9, r9, #31
 8005a34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a3c:	d02b      	beq.n	8005a96 <__lshift+0xbe>
 8005a3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005a42:	468a      	mov	sl, r1
 8005a44:	2200      	movs	r2, #0
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	fa00 f009 	lsl.w	r0, r0, r9
 8005a4c:	4310      	orrs	r0, r2
 8005a4e:	f84a 0b04 	str.w	r0, [sl], #4
 8005a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a56:	459c      	cmp	ip, r3
 8005a58:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a5c:	d8f3      	bhi.n	8005a46 <__lshift+0x6e>
 8005a5e:	ebac 0304 	sub.w	r3, ip, r4
 8005a62:	3b15      	subs	r3, #21
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	3304      	adds	r3, #4
 8005a6a:	f104 0015 	add.w	r0, r4, #21
 8005a6e:	4560      	cmp	r0, ip
 8005a70:	bf88      	it	hi
 8005a72:	2304      	movhi	r3, #4
 8005a74:	50ca      	str	r2, [r1, r3]
 8005a76:	b10a      	cbz	r2, 8005a7c <__lshift+0xa4>
 8005a78:	f108 0602 	add.w	r6, r8, #2
 8005a7c:	3e01      	subs	r6, #1
 8005a7e:	4638      	mov	r0, r7
 8005a80:	612e      	str	r6, [r5, #16]
 8005a82:	4621      	mov	r1, r4
 8005a84:	f7ff fd98 	bl	80055b8 <_Bfree>
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a92:	3301      	adds	r3, #1
 8005a94:	e7c5      	b.n	8005a22 <__lshift+0x4a>
 8005a96:	3904      	subs	r1, #4
 8005a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005aa0:	459c      	cmp	ip, r3
 8005aa2:	d8f9      	bhi.n	8005a98 <__lshift+0xc0>
 8005aa4:	e7ea      	b.n	8005a7c <__lshift+0xa4>
 8005aa6:	bf00      	nop
 8005aa8:	08007eeb 	.word	0x08007eeb
 8005aac:	08007efc 	.word	0x08007efc

08005ab0 <__mcmp>:
 8005ab0:	690a      	ldr	r2, [r1, #16]
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	6900      	ldr	r0, [r0, #16]
 8005ab6:	1a80      	subs	r0, r0, r2
 8005ab8:	b530      	push	{r4, r5, lr}
 8005aba:	d10e      	bne.n	8005ada <__mcmp+0x2a>
 8005abc:	3314      	adds	r3, #20
 8005abe:	3114      	adds	r1, #20
 8005ac0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ac4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ac8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005acc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ad0:	4295      	cmp	r5, r2
 8005ad2:	d003      	beq.n	8005adc <__mcmp+0x2c>
 8005ad4:	d205      	bcs.n	8005ae2 <__mcmp+0x32>
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	bd30      	pop	{r4, r5, pc}
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d3f3      	bcc.n	8005ac8 <__mcmp+0x18>
 8005ae0:	e7fb      	b.n	8005ada <__mcmp+0x2a>
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	e7f9      	b.n	8005ada <__mcmp+0x2a>
	...

08005ae8 <__mdiff>:
 8005ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	4689      	mov	r9, r1
 8005aee:	4606      	mov	r6, r0
 8005af0:	4611      	mov	r1, r2
 8005af2:	4648      	mov	r0, r9
 8005af4:	4614      	mov	r4, r2
 8005af6:	f7ff ffdb 	bl	8005ab0 <__mcmp>
 8005afa:	1e05      	subs	r5, r0, #0
 8005afc:	d112      	bne.n	8005b24 <__mdiff+0x3c>
 8005afe:	4629      	mov	r1, r5
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff fd19 	bl	8005538 <_Balloc>
 8005b06:	4602      	mov	r2, r0
 8005b08:	b928      	cbnz	r0, 8005b16 <__mdiff+0x2e>
 8005b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c08 <__mdiff+0x120>)
 8005b0c:	f240 2137 	movw	r1, #567	@ 0x237
 8005b10:	483e      	ldr	r0, [pc, #248]	@ (8005c0c <__mdiff+0x124>)
 8005b12:	f001 fa95 	bl	8007040 <__assert_func>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	b003      	add	sp, #12
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b24:	bfbc      	itt	lt
 8005b26:	464b      	movlt	r3, r9
 8005b28:	46a1      	movlt	r9, r4
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b30:	bfba      	itte	lt
 8005b32:	461c      	movlt	r4, r3
 8005b34:	2501      	movlt	r5, #1
 8005b36:	2500      	movge	r5, #0
 8005b38:	f7ff fcfe 	bl	8005538 <_Balloc>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	b918      	cbnz	r0, 8005b48 <__mdiff+0x60>
 8005b40:	4b31      	ldr	r3, [pc, #196]	@ (8005c08 <__mdiff+0x120>)
 8005b42:	f240 2145 	movw	r1, #581	@ 0x245
 8005b46:	e7e3      	b.n	8005b10 <__mdiff+0x28>
 8005b48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b4c:	6926      	ldr	r6, [r4, #16]
 8005b4e:	60c5      	str	r5, [r0, #12]
 8005b50:	f109 0310 	add.w	r3, r9, #16
 8005b54:	f109 0514 	add.w	r5, r9, #20
 8005b58:	f104 0e14 	add.w	lr, r4, #20
 8005b5c:	f100 0b14 	add.w	fp, r0, #20
 8005b60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	46d9      	mov	r9, fp
 8005b6c:	f04f 0c00 	mov.w	ip, #0
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	fa1f f38a 	uxth.w	r3, sl
 8005b80:	4619      	mov	r1, r3
 8005b82:	b283      	uxth	r3, r0
 8005b84:	1acb      	subs	r3, r1, r3
 8005b86:	0c00      	lsrs	r0, r0, #16
 8005b88:	4463      	add	r3, ip
 8005b8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b98:	4576      	cmp	r6, lr
 8005b9a:	f849 3b04 	str.w	r3, [r9], #4
 8005b9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ba2:	d8e5      	bhi.n	8005b70 <__mdiff+0x88>
 8005ba4:	1b33      	subs	r3, r6, r4
 8005ba6:	3b15      	subs	r3, #21
 8005ba8:	f023 0303 	bic.w	r3, r3, #3
 8005bac:	3415      	adds	r4, #21
 8005bae:	3304      	adds	r3, #4
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	bf38      	it	cc
 8005bb4:	2304      	movcc	r3, #4
 8005bb6:	441d      	add	r5, r3
 8005bb8:	445b      	add	r3, fp
 8005bba:	461e      	mov	r6, r3
 8005bbc:	462c      	mov	r4, r5
 8005bbe:	4544      	cmp	r4, r8
 8005bc0:	d30e      	bcc.n	8005be0 <__mdiff+0xf8>
 8005bc2:	f108 0103 	add.w	r1, r8, #3
 8005bc6:	1b49      	subs	r1, r1, r5
 8005bc8:	f021 0103 	bic.w	r1, r1, #3
 8005bcc:	3d03      	subs	r5, #3
 8005bce:	45a8      	cmp	r8, r5
 8005bd0:	bf38      	it	cc
 8005bd2:	2100      	movcc	r1, #0
 8005bd4:	440b      	add	r3, r1
 8005bd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bda:	b191      	cbz	r1, 8005c02 <__mdiff+0x11a>
 8005bdc:	6117      	str	r7, [r2, #16]
 8005bde:	e79d      	b.n	8005b1c <__mdiff+0x34>
 8005be0:	f854 1b04 	ldr.w	r1, [r4], #4
 8005be4:	46e6      	mov	lr, ip
 8005be6:	0c08      	lsrs	r0, r1, #16
 8005be8:	fa1c fc81 	uxtah	ip, ip, r1
 8005bec:	4471      	add	r1, lr
 8005bee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005bf2:	b289      	uxth	r1, r1
 8005bf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005bf8:	f846 1b04 	str.w	r1, [r6], #4
 8005bfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c00:	e7dd      	b.n	8005bbe <__mdiff+0xd6>
 8005c02:	3f01      	subs	r7, #1
 8005c04:	e7e7      	b.n	8005bd6 <__mdiff+0xee>
 8005c06:	bf00      	nop
 8005c08:	08007eeb 	.word	0x08007eeb
 8005c0c:	08007efc 	.word	0x08007efc

08005c10 <__ulp>:
 8005c10:	b082      	sub	sp, #8
 8005c12:	ed8d 0b00 	vstr	d0, [sp]
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	4b0f      	ldr	r3, [pc, #60]	@ (8005c58 <__ulp+0x48>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc08      	bgt.n	8005c36 <__ulp+0x26>
 8005c24:	425b      	negs	r3, r3
 8005c26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005c2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005c2e:	da04      	bge.n	8005c3a <__ulp+0x2a>
 8005c30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005c34:	4113      	asrs	r3, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	e008      	b.n	8005c4c <__ulp+0x3c>
 8005c3a:	f1a2 0314 	sub.w	r3, r2, #20
 8005c3e:	2b1e      	cmp	r3, #30
 8005c40:	bfda      	itte	le
 8005c42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005c46:	40da      	lsrle	r2, r3
 8005c48:	2201      	movgt	r2, #1
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	ec41 0b10 	vmov	d0, r0, r1
 8005c54:	b002      	add	sp, #8
 8005c56:	4770      	bx	lr
 8005c58:	7ff00000 	.word	0x7ff00000

08005c5c <__b2d>:
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	6906      	ldr	r6, [r0, #16]
 8005c62:	f100 0814 	add.w	r8, r0, #20
 8005c66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005c6a:	1f37      	subs	r7, r6, #4
 8005c6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005c70:	4610      	mov	r0, r2
 8005c72:	f7ff fd53 	bl	800571c <__hi0bits>
 8005c76:	f1c0 0320 	rsb	r3, r0, #32
 8005c7a:	280a      	cmp	r0, #10
 8005c7c:	600b      	str	r3, [r1, #0]
 8005c7e:	491b      	ldr	r1, [pc, #108]	@ (8005cec <__b2d+0x90>)
 8005c80:	dc15      	bgt.n	8005cae <__b2d+0x52>
 8005c82:	f1c0 0c0b 	rsb	ip, r0, #11
 8005c86:	fa22 f30c 	lsr.w	r3, r2, ip
 8005c8a:	45b8      	cmp	r8, r7
 8005c8c:	ea43 0501 	orr.w	r5, r3, r1
 8005c90:	bf34      	ite	cc
 8005c92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005c96:	2300      	movcs	r3, #0
 8005c98:	3015      	adds	r0, #21
 8005c9a:	fa02 f000 	lsl.w	r0, r2, r0
 8005c9e:	fa23 f30c 	lsr.w	r3, r3, ip
 8005ca2:	4303      	orrs	r3, r0
 8005ca4:	461c      	mov	r4, r3
 8005ca6:	ec45 4b10 	vmov	d0, r4, r5
 8005caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cae:	45b8      	cmp	r8, r7
 8005cb0:	bf3a      	itte	cc
 8005cb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005cb6:	f1a6 0708 	subcc.w	r7, r6, #8
 8005cba:	2300      	movcs	r3, #0
 8005cbc:	380b      	subs	r0, #11
 8005cbe:	d012      	beq.n	8005ce6 <__b2d+0x8a>
 8005cc0:	f1c0 0120 	rsb	r1, r0, #32
 8005cc4:	fa23 f401 	lsr.w	r4, r3, r1
 8005cc8:	4082      	lsls	r2, r0
 8005cca:	4322      	orrs	r2, r4
 8005ccc:	4547      	cmp	r7, r8
 8005cce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005cd2:	bf8c      	ite	hi
 8005cd4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005cd8:	2200      	movls	r2, #0
 8005cda:	4083      	lsls	r3, r0
 8005cdc:	40ca      	lsrs	r2, r1
 8005cde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	e7de      	b.n	8005ca4 <__b2d+0x48>
 8005ce6:	ea42 0501 	orr.w	r5, r2, r1
 8005cea:	e7db      	b.n	8005ca4 <__b2d+0x48>
 8005cec:	3ff00000 	.word	0x3ff00000

08005cf0 <__d2b>:
 8005cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cf4:	460f      	mov	r7, r1
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	ec59 8b10 	vmov	r8, r9, d0
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	f7ff fc1b 	bl	8005538 <_Balloc>
 8005d02:	4604      	mov	r4, r0
 8005d04:	b930      	cbnz	r0, 8005d14 <__d2b+0x24>
 8005d06:	4602      	mov	r2, r0
 8005d08:	4b23      	ldr	r3, [pc, #140]	@ (8005d98 <__d2b+0xa8>)
 8005d0a:	4824      	ldr	r0, [pc, #144]	@ (8005d9c <__d2b+0xac>)
 8005d0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d10:	f001 f996 	bl	8007040 <__assert_func>
 8005d14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d1c:	b10d      	cbz	r5, 8005d22 <__d2b+0x32>
 8005d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	f1b8 0300 	subs.w	r3, r8, #0
 8005d28:	d023      	beq.n	8005d72 <__d2b+0x82>
 8005d2a:	4668      	mov	r0, sp
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	f7ff fd14 	bl	800575a <__lo0bits>
 8005d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d36:	b1d0      	cbz	r0, 8005d6e <__d2b+0x7e>
 8005d38:	f1c0 0320 	rsb	r3, r0, #32
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	430b      	orrs	r3, r1
 8005d42:	40c2      	lsrs	r2, r0
 8005d44:	6163      	str	r3, [r4, #20]
 8005d46:	9201      	str	r2, [sp, #4]
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	61a3      	str	r3, [r4, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf0c      	ite	eq
 8005d50:	2201      	moveq	r2, #1
 8005d52:	2202      	movne	r2, #2
 8005d54:	6122      	str	r2, [r4, #16]
 8005d56:	b1a5      	cbz	r5, 8005d82 <__d2b+0x92>
 8005d58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d5c:	4405      	add	r5, r0
 8005d5e:	603d      	str	r5, [r7, #0]
 8005d60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d64:	6030      	str	r0, [r6, #0]
 8005d66:	4620      	mov	r0, r4
 8005d68:	b003      	add	sp, #12
 8005d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d6e:	6161      	str	r1, [r4, #20]
 8005d70:	e7ea      	b.n	8005d48 <__d2b+0x58>
 8005d72:	a801      	add	r0, sp, #4
 8005d74:	f7ff fcf1 	bl	800575a <__lo0bits>
 8005d78:	9b01      	ldr	r3, [sp, #4]
 8005d7a:	6163      	str	r3, [r4, #20]
 8005d7c:	3020      	adds	r0, #32
 8005d7e:	2201      	movs	r2, #1
 8005d80:	e7e8      	b.n	8005d54 <__d2b+0x64>
 8005d82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005d8a:	6038      	str	r0, [r7, #0]
 8005d8c:	6918      	ldr	r0, [r3, #16]
 8005d8e:	f7ff fcc5 	bl	800571c <__hi0bits>
 8005d92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d96:	e7e5      	b.n	8005d64 <__d2b+0x74>
 8005d98:	08007eeb 	.word	0x08007eeb
 8005d9c:	08007efc 	.word	0x08007efc

08005da0 <__ratio>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b085      	sub	sp, #20
 8005da6:	e9cd 1000 	strd	r1, r0, [sp]
 8005daa:	a902      	add	r1, sp, #8
 8005dac:	f7ff ff56 	bl	8005c5c <__b2d>
 8005db0:	9800      	ldr	r0, [sp, #0]
 8005db2:	a903      	add	r1, sp, #12
 8005db4:	ec55 4b10 	vmov	r4, r5, d0
 8005db8:	f7ff ff50 	bl	8005c5c <__b2d>
 8005dbc:	9b01      	ldr	r3, [sp, #4]
 8005dbe:	6919      	ldr	r1, [r3, #16]
 8005dc0:	9b00      	ldr	r3, [sp, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	1ac9      	subs	r1, r1, r3
 8005dc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	ec5b ab10 	vmov	sl, fp, d0
 8005dd0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bfce      	itee	gt
 8005dd8:	462a      	movgt	r2, r5
 8005dda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005dde:	465a      	movle	r2, fp
 8005de0:	462f      	mov	r7, r5
 8005de2:	46d9      	mov	r9, fp
 8005de4:	bfcc      	ite	gt
 8005de6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005dea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005dee:	464b      	mov	r3, r9
 8005df0:	4652      	mov	r2, sl
 8005df2:	4620      	mov	r0, r4
 8005df4:	4639      	mov	r1, r7
 8005df6:	f7fa fd31 	bl	800085c <__aeabi_ddiv>
 8005dfa:	ec41 0b10 	vmov	d0, r0, r1
 8005dfe:	b005      	add	sp, #20
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e04 <__copybits>:
 8005e04:	3901      	subs	r1, #1
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	1149      	asrs	r1, r1, #5
 8005e0a:	6914      	ldr	r4, [r2, #16]
 8005e0c:	3101      	adds	r1, #1
 8005e0e:	f102 0314 	add.w	r3, r2, #20
 8005e12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005e16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005e1a:	1f05      	subs	r5, r0, #4
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	d30c      	bcc.n	8005e3a <__copybits+0x36>
 8005e20:	1aa3      	subs	r3, r4, r2
 8005e22:	3b11      	subs	r3, #17
 8005e24:	f023 0303 	bic.w	r3, r3, #3
 8005e28:	3211      	adds	r2, #17
 8005e2a:	42a2      	cmp	r2, r4
 8005e2c:	bf88      	it	hi
 8005e2e:	2300      	movhi	r3, #0
 8005e30:	4418      	add	r0, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	4288      	cmp	r0, r1
 8005e36:	d305      	bcc.n	8005e44 <__copybits+0x40>
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
 8005e3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8005e3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005e42:	e7eb      	b.n	8005e1c <__copybits+0x18>
 8005e44:	f840 3b04 	str.w	r3, [r0], #4
 8005e48:	e7f4      	b.n	8005e34 <__copybits+0x30>

08005e4a <__any_on>:
 8005e4a:	f100 0214 	add.w	r2, r0, #20
 8005e4e:	6900      	ldr	r0, [r0, #16]
 8005e50:	114b      	asrs	r3, r1, #5
 8005e52:	4298      	cmp	r0, r3
 8005e54:	b510      	push	{r4, lr}
 8005e56:	db11      	blt.n	8005e7c <__any_on+0x32>
 8005e58:	dd0a      	ble.n	8005e70 <__any_on+0x26>
 8005e5a:	f011 011f 	ands.w	r1, r1, #31
 8005e5e:	d007      	beq.n	8005e70 <__any_on+0x26>
 8005e60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005e64:	fa24 f001 	lsr.w	r0, r4, r1
 8005e68:	fa00 f101 	lsl.w	r1, r0, r1
 8005e6c:	428c      	cmp	r4, r1
 8005e6e:	d10b      	bne.n	8005e88 <__any_on+0x3e>
 8005e70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d803      	bhi.n	8005e80 <__any_on+0x36>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	bd10      	pop	{r4, pc}
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	e7f7      	b.n	8005e70 <__any_on+0x26>
 8005e80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d0f5      	beq.n	8005e74 <__any_on+0x2a>
 8005e88:	2001      	movs	r0, #1
 8005e8a:	e7f6      	b.n	8005e7a <__any_on+0x30>

08005e8c <sulp>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	460d      	mov	r5, r1
 8005e92:	ec45 4b10 	vmov	d0, r4, r5
 8005e96:	4616      	mov	r6, r2
 8005e98:	f7ff feba 	bl	8005c10 <__ulp>
 8005e9c:	ec51 0b10 	vmov	r0, r1, d0
 8005ea0:	b17e      	cbz	r6, 8005ec2 <sulp+0x36>
 8005ea2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ea6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dd09      	ble.n	8005ec2 <sulp+0x36>
 8005eae:	051b      	lsls	r3, r3, #20
 8005eb0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005eb4:	2400      	movs	r4, #0
 8005eb6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005eba:	4622      	mov	r2, r4
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	f7fa fba3 	bl	8000608 <__aeabi_dmul>
 8005ec2:	ec41 0b10 	vmov	d0, r0, r1
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}

08005ec8 <_strtod_l>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b09f      	sub	sp, #124	@ 0x7c
 8005ece:	460c      	mov	r4, r1
 8005ed0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005ed6:	9005      	str	r0, [sp, #20]
 8005ed8:	f04f 0a00 	mov.w	sl, #0
 8005edc:	f04f 0b00 	mov.w	fp, #0
 8005ee0:	460a      	mov	r2, r1
 8005ee2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ee4:	7811      	ldrb	r1, [r2, #0]
 8005ee6:	292b      	cmp	r1, #43	@ 0x2b
 8005ee8:	d04a      	beq.n	8005f80 <_strtod_l+0xb8>
 8005eea:	d838      	bhi.n	8005f5e <_strtod_l+0x96>
 8005eec:	290d      	cmp	r1, #13
 8005eee:	d832      	bhi.n	8005f56 <_strtod_l+0x8e>
 8005ef0:	2908      	cmp	r1, #8
 8005ef2:	d832      	bhi.n	8005f5a <_strtod_l+0x92>
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d03b      	beq.n	8005f70 <_strtod_l+0xa8>
 8005ef8:	2200      	movs	r2, #0
 8005efa:	920e      	str	r2, [sp, #56]	@ 0x38
 8005efc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005efe:	782a      	ldrb	r2, [r5, #0]
 8005f00:	2a30      	cmp	r2, #48	@ 0x30
 8005f02:	f040 80b2 	bne.w	800606a <_strtod_l+0x1a2>
 8005f06:	786a      	ldrb	r2, [r5, #1]
 8005f08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f0c:	2a58      	cmp	r2, #88	@ 0x58
 8005f0e:	d16e      	bne.n	8005fee <_strtod_l+0x126>
 8005f10:	9302      	str	r3, [sp, #8]
 8005f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4a8f      	ldr	r2, [pc, #572]	@ (8006158 <_strtod_l+0x290>)
 8005f1c:	9805      	ldr	r0, [sp, #20]
 8005f1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f20:	a919      	add	r1, sp, #100	@ 0x64
 8005f22:	f001 f927 	bl	8007174 <__gethex>
 8005f26:	f010 060f 	ands.w	r6, r0, #15
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d005      	beq.n	8005f3a <_strtod_l+0x72>
 8005f2e:	2e06      	cmp	r6, #6
 8005f30:	d128      	bne.n	8005f84 <_strtod_l+0xbc>
 8005f32:	3501      	adds	r5, #1
 8005f34:	2300      	movs	r3, #0
 8005f36:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f38:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f040 858e 	bne.w	8006a5e <_strtod_l+0xb96>
 8005f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f44:	b1cb      	cbz	r3, 8005f7a <_strtod_l+0xb2>
 8005f46:	4652      	mov	r2, sl
 8005f48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005f4c:	ec43 2b10 	vmov	d0, r2, r3
 8005f50:	b01f      	add	sp, #124	@ 0x7c
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	2920      	cmp	r1, #32
 8005f58:	d1ce      	bne.n	8005ef8 <_strtod_l+0x30>
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	e7c1      	b.n	8005ee2 <_strtod_l+0x1a>
 8005f5e:	292d      	cmp	r1, #45	@ 0x2d
 8005f60:	d1ca      	bne.n	8005ef8 <_strtod_l+0x30>
 8005f62:	2101      	movs	r1, #1
 8005f64:	910e      	str	r1, [sp, #56]	@ 0x38
 8005f66:	1c51      	adds	r1, r2, #1
 8005f68:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f6a:	7852      	ldrb	r2, [r2, #1]
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d1c5      	bne.n	8005efc <_strtod_l+0x34>
 8005f70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f72:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8570 	bne.w	8006a5a <_strtod_l+0xb92>
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	465b      	mov	r3, fp
 8005f7e:	e7e5      	b.n	8005f4c <_strtod_l+0x84>
 8005f80:	2100      	movs	r1, #0
 8005f82:	e7ef      	b.n	8005f64 <_strtod_l+0x9c>
 8005f84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f86:	b13a      	cbz	r2, 8005f98 <_strtod_l+0xd0>
 8005f88:	2135      	movs	r1, #53	@ 0x35
 8005f8a:	a81c      	add	r0, sp, #112	@ 0x70
 8005f8c:	f7ff ff3a 	bl	8005e04 <__copybits>
 8005f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f92:	9805      	ldr	r0, [sp, #20]
 8005f94:	f7ff fb10 	bl	80055b8 <_Bfree>
 8005f98:	3e01      	subs	r6, #1
 8005f9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f9c:	2e04      	cmp	r6, #4
 8005f9e:	d806      	bhi.n	8005fae <_strtod_l+0xe6>
 8005fa0:	e8df f006 	tbb	[pc, r6]
 8005fa4:	201d0314 	.word	0x201d0314
 8005fa8:	14          	.byte	0x14
 8005fa9:	00          	.byte	0x00
 8005faa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005fae:	05e1      	lsls	r1, r4, #23
 8005fb0:	bf48      	it	mi
 8005fb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fba:	0d1b      	lsrs	r3, r3, #20
 8005fbc:	051b      	lsls	r3, r3, #20
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1bb      	bne.n	8005f3a <_strtod_l+0x72>
 8005fc2:	f7fe fb23 	bl	800460c <__errno>
 8005fc6:	2322      	movs	r3, #34	@ 0x22
 8005fc8:	6003      	str	r3, [r0, #0]
 8005fca:	e7b6      	b.n	8005f3a <_strtod_l+0x72>
 8005fcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005fd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005fd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fdc:	e7e7      	b.n	8005fae <_strtod_l+0xe6>
 8005fde:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006160 <_strtod_l+0x298>
 8005fe2:	e7e4      	b.n	8005fae <_strtod_l+0xe6>
 8005fe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005fe8:	f04f 3aff 	mov.w	sl, #4294967295
 8005fec:	e7df      	b.n	8005fae <_strtod_l+0xe6>
 8005fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b30      	cmp	r3, #48	@ 0x30
 8005ff8:	d0f9      	beq.n	8005fee <_strtod_l+0x126>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d09d      	beq.n	8005f3a <_strtod_l+0x72>
 8005ffe:	2301      	movs	r3, #1
 8006000:	2700      	movs	r7, #0
 8006002:	9308      	str	r3, [sp, #32]
 8006004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006006:	930c      	str	r3, [sp, #48]	@ 0x30
 8006008:	970b      	str	r7, [sp, #44]	@ 0x2c
 800600a:	46b9      	mov	r9, r7
 800600c:	220a      	movs	r2, #10
 800600e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006010:	7805      	ldrb	r5, [r0, #0]
 8006012:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006016:	b2d9      	uxtb	r1, r3
 8006018:	2909      	cmp	r1, #9
 800601a:	d928      	bls.n	800606e <_strtod_l+0x1a6>
 800601c:	494f      	ldr	r1, [pc, #316]	@ (800615c <_strtod_l+0x294>)
 800601e:	2201      	movs	r2, #1
 8006020:	f000 ffd6 	bl	8006fd0 <strncmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	d032      	beq.n	800608e <_strtod_l+0x1c6>
 8006028:	2000      	movs	r0, #0
 800602a:	462a      	mov	r2, r5
 800602c:	900a      	str	r0, [sp, #40]	@ 0x28
 800602e:	464d      	mov	r5, r9
 8006030:	4603      	mov	r3, r0
 8006032:	2a65      	cmp	r2, #101	@ 0x65
 8006034:	d001      	beq.n	800603a <_strtod_l+0x172>
 8006036:	2a45      	cmp	r2, #69	@ 0x45
 8006038:	d114      	bne.n	8006064 <_strtod_l+0x19c>
 800603a:	b91d      	cbnz	r5, 8006044 <_strtod_l+0x17c>
 800603c:	9a08      	ldr	r2, [sp, #32]
 800603e:	4302      	orrs	r2, r0
 8006040:	d096      	beq.n	8005f70 <_strtod_l+0xa8>
 8006042:	2500      	movs	r5, #0
 8006044:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006046:	1c62      	adds	r2, r4, #1
 8006048:	9219      	str	r2, [sp, #100]	@ 0x64
 800604a:	7862      	ldrb	r2, [r4, #1]
 800604c:	2a2b      	cmp	r2, #43	@ 0x2b
 800604e:	d07a      	beq.n	8006146 <_strtod_l+0x27e>
 8006050:	2a2d      	cmp	r2, #45	@ 0x2d
 8006052:	d07e      	beq.n	8006152 <_strtod_l+0x28a>
 8006054:	f04f 0c00 	mov.w	ip, #0
 8006058:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800605c:	2909      	cmp	r1, #9
 800605e:	f240 8085 	bls.w	800616c <_strtod_l+0x2a4>
 8006062:	9419      	str	r4, [sp, #100]	@ 0x64
 8006064:	f04f 0800 	mov.w	r8, #0
 8006068:	e0a5      	b.n	80061b6 <_strtod_l+0x2ee>
 800606a:	2300      	movs	r3, #0
 800606c:	e7c8      	b.n	8006000 <_strtod_l+0x138>
 800606e:	f1b9 0f08 	cmp.w	r9, #8
 8006072:	bfd8      	it	le
 8006074:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006076:	f100 0001 	add.w	r0, r0, #1
 800607a:	bfda      	itte	le
 800607c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006080:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006082:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006086:	f109 0901 	add.w	r9, r9, #1
 800608a:	9019      	str	r0, [sp, #100]	@ 0x64
 800608c:	e7bf      	b.n	800600e <_strtod_l+0x146>
 800608e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	9219      	str	r2, [sp, #100]	@ 0x64
 8006094:	785a      	ldrb	r2, [r3, #1]
 8006096:	f1b9 0f00 	cmp.w	r9, #0
 800609a:	d03b      	beq.n	8006114 <_strtod_l+0x24c>
 800609c:	900a      	str	r0, [sp, #40]	@ 0x28
 800609e:	464d      	mov	r5, r9
 80060a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80060a4:	2b09      	cmp	r3, #9
 80060a6:	d912      	bls.n	80060ce <_strtod_l+0x206>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e7c2      	b.n	8006032 <_strtod_l+0x16a>
 80060ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80060b2:	785a      	ldrb	r2, [r3, #1]
 80060b4:	3001      	adds	r0, #1
 80060b6:	2a30      	cmp	r2, #48	@ 0x30
 80060b8:	d0f8      	beq.n	80060ac <_strtod_l+0x1e4>
 80060ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80060be:	2b08      	cmp	r3, #8
 80060c0:	f200 84d2 	bhi.w	8006a68 <_strtod_l+0xba0>
 80060c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80060c8:	2000      	movs	r0, #0
 80060ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80060cc:	4605      	mov	r5, r0
 80060ce:	3a30      	subs	r2, #48	@ 0x30
 80060d0:	f100 0301 	add.w	r3, r0, #1
 80060d4:	d018      	beq.n	8006108 <_strtod_l+0x240>
 80060d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060d8:	4419      	add	r1, r3
 80060da:	910a      	str	r1, [sp, #40]	@ 0x28
 80060dc:	462e      	mov	r6, r5
 80060de:	f04f 0e0a 	mov.w	lr, #10
 80060e2:	1c71      	adds	r1, r6, #1
 80060e4:	eba1 0c05 	sub.w	ip, r1, r5
 80060e8:	4563      	cmp	r3, ip
 80060ea:	dc15      	bgt.n	8006118 <_strtod_l+0x250>
 80060ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80060f0:	182b      	adds	r3, r5, r0
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	f105 0501 	add.w	r5, r5, #1
 80060f8:	4405      	add	r5, r0
 80060fa:	dc1a      	bgt.n	8006132 <_strtod_l+0x26a>
 80060fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fe:	230a      	movs	r3, #10
 8006100:	fb03 2301 	mla	r3, r3, r1, r2
 8006104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006106:	2300      	movs	r3, #0
 8006108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800610a:	1c51      	adds	r1, r2, #1
 800610c:	9119      	str	r1, [sp, #100]	@ 0x64
 800610e:	7852      	ldrb	r2, [r2, #1]
 8006110:	4618      	mov	r0, r3
 8006112:	e7c5      	b.n	80060a0 <_strtod_l+0x1d8>
 8006114:	4648      	mov	r0, r9
 8006116:	e7ce      	b.n	80060b6 <_strtod_l+0x1ee>
 8006118:	2e08      	cmp	r6, #8
 800611a:	dc05      	bgt.n	8006128 <_strtod_l+0x260>
 800611c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800611e:	fb0e f606 	mul.w	r6, lr, r6
 8006122:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006124:	460e      	mov	r6, r1
 8006126:	e7dc      	b.n	80060e2 <_strtod_l+0x21a>
 8006128:	2910      	cmp	r1, #16
 800612a:	bfd8      	it	le
 800612c:	fb0e f707 	mulle.w	r7, lr, r7
 8006130:	e7f8      	b.n	8006124 <_strtod_l+0x25c>
 8006132:	2b0f      	cmp	r3, #15
 8006134:	bfdc      	itt	le
 8006136:	230a      	movle	r3, #10
 8006138:	fb03 2707 	mlale	r7, r3, r7, r2
 800613c:	e7e3      	b.n	8006106 <_strtod_l+0x23e>
 800613e:	2300      	movs	r3, #0
 8006140:	930a      	str	r3, [sp, #40]	@ 0x28
 8006142:	2301      	movs	r3, #1
 8006144:	e77a      	b.n	800603c <_strtod_l+0x174>
 8006146:	f04f 0c00 	mov.w	ip, #0
 800614a:	1ca2      	adds	r2, r4, #2
 800614c:	9219      	str	r2, [sp, #100]	@ 0x64
 800614e:	78a2      	ldrb	r2, [r4, #2]
 8006150:	e782      	b.n	8006058 <_strtod_l+0x190>
 8006152:	f04f 0c01 	mov.w	ip, #1
 8006156:	e7f8      	b.n	800614a <_strtod_l+0x282>
 8006158:	0800811c 	.word	0x0800811c
 800615c:	08007f55 	.word	0x08007f55
 8006160:	7ff00000 	.word	0x7ff00000
 8006164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006166:	1c51      	adds	r1, r2, #1
 8006168:	9119      	str	r1, [sp, #100]	@ 0x64
 800616a:	7852      	ldrb	r2, [r2, #1]
 800616c:	2a30      	cmp	r2, #48	@ 0x30
 800616e:	d0f9      	beq.n	8006164 <_strtod_l+0x29c>
 8006170:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006174:	2908      	cmp	r1, #8
 8006176:	f63f af75 	bhi.w	8006064 <_strtod_l+0x19c>
 800617a:	3a30      	subs	r2, #48	@ 0x30
 800617c:	9209      	str	r2, [sp, #36]	@ 0x24
 800617e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006180:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006182:	f04f 080a 	mov.w	r8, #10
 8006186:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006188:	1c56      	adds	r6, r2, #1
 800618a:	9619      	str	r6, [sp, #100]	@ 0x64
 800618c:	7852      	ldrb	r2, [r2, #1]
 800618e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006192:	f1be 0f09 	cmp.w	lr, #9
 8006196:	d939      	bls.n	800620c <_strtod_l+0x344>
 8006198:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800619a:	1a76      	subs	r6, r6, r1
 800619c:	2e08      	cmp	r6, #8
 800619e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80061a2:	dc03      	bgt.n	80061ac <_strtod_l+0x2e4>
 80061a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061a6:	4588      	cmp	r8, r1
 80061a8:	bfa8      	it	ge
 80061aa:	4688      	movge	r8, r1
 80061ac:	f1bc 0f00 	cmp.w	ip, #0
 80061b0:	d001      	beq.n	80061b6 <_strtod_l+0x2ee>
 80061b2:	f1c8 0800 	rsb	r8, r8, #0
 80061b6:	2d00      	cmp	r5, #0
 80061b8:	d14e      	bne.n	8006258 <_strtod_l+0x390>
 80061ba:	9908      	ldr	r1, [sp, #32]
 80061bc:	4308      	orrs	r0, r1
 80061be:	f47f aebc 	bne.w	8005f3a <_strtod_l+0x72>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f47f aed4 	bne.w	8005f70 <_strtod_l+0xa8>
 80061c8:	2a69      	cmp	r2, #105	@ 0x69
 80061ca:	d028      	beq.n	800621e <_strtod_l+0x356>
 80061cc:	dc25      	bgt.n	800621a <_strtod_l+0x352>
 80061ce:	2a49      	cmp	r2, #73	@ 0x49
 80061d0:	d025      	beq.n	800621e <_strtod_l+0x356>
 80061d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80061d4:	f47f aecc 	bne.w	8005f70 <_strtod_l+0xa8>
 80061d8:	499a      	ldr	r1, [pc, #616]	@ (8006444 <_strtod_l+0x57c>)
 80061da:	a819      	add	r0, sp, #100	@ 0x64
 80061dc:	f001 f9ec 	bl	80075b8 <__match>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f43f aec5 	beq.w	8005f70 <_strtod_l+0xa8>
 80061e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b28      	cmp	r3, #40	@ 0x28
 80061ec:	d12e      	bne.n	800624c <_strtod_l+0x384>
 80061ee:	4996      	ldr	r1, [pc, #600]	@ (8006448 <_strtod_l+0x580>)
 80061f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80061f2:	a819      	add	r0, sp, #100	@ 0x64
 80061f4:	f001 f9f4 	bl	80075e0 <__hexnan>
 80061f8:	2805      	cmp	r0, #5
 80061fa:	d127      	bne.n	800624c <_strtod_l+0x384>
 80061fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006202:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006206:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800620a:	e696      	b.n	8005f3a <_strtod_l+0x72>
 800620c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800620e:	fb08 2101 	mla	r1, r8, r1, r2
 8006212:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006216:	9209      	str	r2, [sp, #36]	@ 0x24
 8006218:	e7b5      	b.n	8006186 <_strtod_l+0x2be>
 800621a:	2a6e      	cmp	r2, #110	@ 0x6e
 800621c:	e7da      	b.n	80061d4 <_strtod_l+0x30c>
 800621e:	498b      	ldr	r1, [pc, #556]	@ (800644c <_strtod_l+0x584>)
 8006220:	a819      	add	r0, sp, #100	@ 0x64
 8006222:	f001 f9c9 	bl	80075b8 <__match>
 8006226:	2800      	cmp	r0, #0
 8006228:	f43f aea2 	beq.w	8005f70 <_strtod_l+0xa8>
 800622c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800622e:	4988      	ldr	r1, [pc, #544]	@ (8006450 <_strtod_l+0x588>)
 8006230:	3b01      	subs	r3, #1
 8006232:	a819      	add	r0, sp, #100	@ 0x64
 8006234:	9319      	str	r3, [sp, #100]	@ 0x64
 8006236:	f001 f9bf 	bl	80075b8 <__match>
 800623a:	b910      	cbnz	r0, 8006242 <_strtod_l+0x37a>
 800623c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800623e:	3301      	adds	r3, #1
 8006240:	9319      	str	r3, [sp, #100]	@ 0x64
 8006242:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006460 <_strtod_l+0x598>
 8006246:	f04f 0a00 	mov.w	sl, #0
 800624a:	e676      	b.n	8005f3a <_strtod_l+0x72>
 800624c:	4881      	ldr	r0, [pc, #516]	@ (8006454 <_strtod_l+0x58c>)
 800624e:	f000 feef 	bl	8007030 <nan>
 8006252:	ec5b ab10 	vmov	sl, fp, d0
 8006256:	e670      	b.n	8005f3a <_strtod_l+0x72>
 8006258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800625c:	eba8 0303 	sub.w	r3, r8, r3
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	bf08      	it	eq
 8006266:	46a9      	moveq	r9, r5
 8006268:	2d10      	cmp	r5, #16
 800626a:	9309      	str	r3, [sp, #36]	@ 0x24
 800626c:	462c      	mov	r4, r5
 800626e:	bfa8      	it	ge
 8006270:	2410      	movge	r4, #16
 8006272:	f7fa f94f 	bl	8000514 <__aeabi_ui2d>
 8006276:	2d09      	cmp	r5, #9
 8006278:	4682      	mov	sl, r0
 800627a:	468b      	mov	fp, r1
 800627c:	dc13      	bgt.n	80062a6 <_strtod_l+0x3de>
 800627e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	f43f ae5a 	beq.w	8005f3a <_strtod_l+0x72>
 8006286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006288:	dd78      	ble.n	800637c <_strtod_l+0x4b4>
 800628a:	2b16      	cmp	r3, #22
 800628c:	dc5f      	bgt.n	800634e <_strtod_l+0x486>
 800628e:	4972      	ldr	r1, [pc, #456]	@ (8006458 <_strtod_l+0x590>)
 8006290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006298:	4652      	mov	r2, sl
 800629a:	465b      	mov	r3, fp
 800629c:	f7fa f9b4 	bl	8000608 <__aeabi_dmul>
 80062a0:	4682      	mov	sl, r0
 80062a2:	468b      	mov	fp, r1
 80062a4:	e649      	b.n	8005f3a <_strtod_l+0x72>
 80062a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006458 <_strtod_l+0x590>)
 80062a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80062b0:	f7fa f9aa 	bl	8000608 <__aeabi_dmul>
 80062b4:	4682      	mov	sl, r0
 80062b6:	4638      	mov	r0, r7
 80062b8:	468b      	mov	fp, r1
 80062ba:	f7fa f92b 	bl	8000514 <__aeabi_ui2d>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4650      	mov	r0, sl
 80062c4:	4659      	mov	r1, fp
 80062c6:	f7f9 ffe9 	bl	800029c <__adddf3>
 80062ca:	2d0f      	cmp	r5, #15
 80062cc:	4682      	mov	sl, r0
 80062ce:	468b      	mov	fp, r1
 80062d0:	ddd5      	ble.n	800627e <_strtod_l+0x3b6>
 80062d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d4:	1b2c      	subs	r4, r5, r4
 80062d6:	441c      	add	r4, r3
 80062d8:	2c00      	cmp	r4, #0
 80062da:	f340 8093 	ble.w	8006404 <_strtod_l+0x53c>
 80062de:	f014 030f 	ands.w	r3, r4, #15
 80062e2:	d00a      	beq.n	80062fa <_strtod_l+0x432>
 80062e4:	495c      	ldr	r1, [pc, #368]	@ (8006458 <_strtod_l+0x590>)
 80062e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062ea:	4652      	mov	r2, sl
 80062ec:	465b      	mov	r3, fp
 80062ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f2:	f7fa f989 	bl	8000608 <__aeabi_dmul>
 80062f6:	4682      	mov	sl, r0
 80062f8:	468b      	mov	fp, r1
 80062fa:	f034 040f 	bics.w	r4, r4, #15
 80062fe:	d073      	beq.n	80063e8 <_strtod_l+0x520>
 8006300:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006304:	dd49      	ble.n	800639a <_strtod_l+0x4d2>
 8006306:	2400      	movs	r4, #0
 8006308:	46a0      	mov	r8, r4
 800630a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800630c:	46a1      	mov	r9, r4
 800630e:	9a05      	ldr	r2, [sp, #20]
 8006310:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006460 <_strtod_l+0x598>
 8006314:	2322      	movs	r3, #34	@ 0x22
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	f04f 0a00 	mov.w	sl, #0
 800631c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	f43f ae0b 	beq.w	8005f3a <_strtod_l+0x72>
 8006324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006326:	9805      	ldr	r0, [sp, #20]
 8006328:	f7ff f946 	bl	80055b8 <_Bfree>
 800632c:	9805      	ldr	r0, [sp, #20]
 800632e:	4649      	mov	r1, r9
 8006330:	f7ff f942 	bl	80055b8 <_Bfree>
 8006334:	9805      	ldr	r0, [sp, #20]
 8006336:	4641      	mov	r1, r8
 8006338:	f7ff f93e 	bl	80055b8 <_Bfree>
 800633c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800633e:	9805      	ldr	r0, [sp, #20]
 8006340:	f7ff f93a 	bl	80055b8 <_Bfree>
 8006344:	9805      	ldr	r0, [sp, #20]
 8006346:	4621      	mov	r1, r4
 8006348:	f7ff f936 	bl	80055b8 <_Bfree>
 800634c:	e5f5      	b.n	8005f3a <_strtod_l+0x72>
 800634e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006350:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006354:	4293      	cmp	r3, r2
 8006356:	dbbc      	blt.n	80062d2 <_strtod_l+0x40a>
 8006358:	4c3f      	ldr	r4, [pc, #252]	@ (8006458 <_strtod_l+0x590>)
 800635a:	f1c5 050f 	rsb	r5, r5, #15
 800635e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006362:	4652      	mov	r2, sl
 8006364:	465b      	mov	r3, fp
 8006366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800636a:	f7fa f94d 	bl	8000608 <__aeabi_dmul>
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	1b5d      	subs	r5, r3, r5
 8006372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006376:	e9d4 2300 	ldrd	r2, r3, [r4]
 800637a:	e78f      	b.n	800629c <_strtod_l+0x3d4>
 800637c:	3316      	adds	r3, #22
 800637e:	dba8      	blt.n	80062d2 <_strtod_l+0x40a>
 8006380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006382:	eba3 0808 	sub.w	r8, r3, r8
 8006386:	4b34      	ldr	r3, [pc, #208]	@ (8006458 <_strtod_l+0x590>)
 8006388:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800638c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006390:	4650      	mov	r0, sl
 8006392:	4659      	mov	r1, fp
 8006394:	f7fa fa62 	bl	800085c <__aeabi_ddiv>
 8006398:	e782      	b.n	80062a0 <_strtod_l+0x3d8>
 800639a:	2300      	movs	r3, #0
 800639c:	4f2f      	ldr	r7, [pc, #188]	@ (800645c <_strtod_l+0x594>)
 800639e:	1124      	asrs	r4, r4, #4
 80063a0:	4650      	mov	r0, sl
 80063a2:	4659      	mov	r1, fp
 80063a4:	461e      	mov	r6, r3
 80063a6:	2c01      	cmp	r4, #1
 80063a8:	dc21      	bgt.n	80063ee <_strtod_l+0x526>
 80063aa:	b10b      	cbz	r3, 80063b0 <_strtod_l+0x4e8>
 80063ac:	4682      	mov	sl, r0
 80063ae:	468b      	mov	fp, r1
 80063b0:	492a      	ldr	r1, [pc, #168]	@ (800645c <_strtod_l+0x594>)
 80063b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80063b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80063ba:	4652      	mov	r2, sl
 80063bc:	465b      	mov	r3, fp
 80063be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c2:	f7fa f921 	bl	8000608 <__aeabi_dmul>
 80063c6:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <_strtod_l+0x598>)
 80063c8:	460a      	mov	r2, r1
 80063ca:	400b      	ands	r3, r1
 80063cc:	4925      	ldr	r1, [pc, #148]	@ (8006464 <_strtod_l+0x59c>)
 80063ce:	428b      	cmp	r3, r1
 80063d0:	4682      	mov	sl, r0
 80063d2:	d898      	bhi.n	8006306 <_strtod_l+0x43e>
 80063d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80063d8:	428b      	cmp	r3, r1
 80063da:	bf86      	itte	hi
 80063dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006468 <_strtod_l+0x5a0>
 80063e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80063e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80063e8:	2300      	movs	r3, #0
 80063ea:	9308      	str	r3, [sp, #32]
 80063ec:	e076      	b.n	80064dc <_strtod_l+0x614>
 80063ee:	07e2      	lsls	r2, r4, #31
 80063f0:	d504      	bpl.n	80063fc <_strtod_l+0x534>
 80063f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f6:	f7fa f907 	bl	8000608 <__aeabi_dmul>
 80063fa:	2301      	movs	r3, #1
 80063fc:	3601      	adds	r6, #1
 80063fe:	1064      	asrs	r4, r4, #1
 8006400:	3708      	adds	r7, #8
 8006402:	e7d0      	b.n	80063a6 <_strtod_l+0x4de>
 8006404:	d0f0      	beq.n	80063e8 <_strtod_l+0x520>
 8006406:	4264      	negs	r4, r4
 8006408:	f014 020f 	ands.w	r2, r4, #15
 800640c:	d00a      	beq.n	8006424 <_strtod_l+0x55c>
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <_strtod_l+0x590>)
 8006410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006414:	4650      	mov	r0, sl
 8006416:	4659      	mov	r1, fp
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa fa1e 	bl	800085c <__aeabi_ddiv>
 8006420:	4682      	mov	sl, r0
 8006422:	468b      	mov	fp, r1
 8006424:	1124      	asrs	r4, r4, #4
 8006426:	d0df      	beq.n	80063e8 <_strtod_l+0x520>
 8006428:	2c1f      	cmp	r4, #31
 800642a:	dd1f      	ble.n	800646c <_strtod_l+0x5a4>
 800642c:	2400      	movs	r4, #0
 800642e:	46a0      	mov	r8, r4
 8006430:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006432:	46a1      	mov	r9, r4
 8006434:	9a05      	ldr	r2, [sp, #20]
 8006436:	2322      	movs	r3, #34	@ 0x22
 8006438:	f04f 0a00 	mov.w	sl, #0
 800643c:	f04f 0b00 	mov.w	fp, #0
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e76b      	b.n	800631c <_strtod_l+0x454>
 8006444:	08007e43 	.word	0x08007e43
 8006448:	08008108 	.word	0x08008108
 800644c:	08007e3b 	.word	0x08007e3b
 8006450:	08007e72 	.word	0x08007e72
 8006454:	08007fab 	.word	0x08007fab
 8006458:	08008040 	.word	0x08008040
 800645c:	08008018 	.word	0x08008018
 8006460:	7ff00000 	.word	0x7ff00000
 8006464:	7ca00000 	.word	0x7ca00000
 8006468:	7fefffff 	.word	0x7fefffff
 800646c:	f014 0310 	ands.w	r3, r4, #16
 8006470:	bf18      	it	ne
 8006472:	236a      	movne	r3, #106	@ 0x6a
 8006474:	4ea9      	ldr	r6, [pc, #676]	@ (800671c <_strtod_l+0x854>)
 8006476:	9308      	str	r3, [sp, #32]
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	2300      	movs	r3, #0
 800647e:	07e7      	lsls	r7, r4, #31
 8006480:	d504      	bpl.n	800648c <_strtod_l+0x5c4>
 8006482:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006486:	f7fa f8bf 	bl	8000608 <__aeabi_dmul>
 800648a:	2301      	movs	r3, #1
 800648c:	1064      	asrs	r4, r4, #1
 800648e:	f106 0608 	add.w	r6, r6, #8
 8006492:	d1f4      	bne.n	800647e <_strtod_l+0x5b6>
 8006494:	b10b      	cbz	r3, 800649a <_strtod_l+0x5d2>
 8006496:	4682      	mov	sl, r0
 8006498:	468b      	mov	fp, r1
 800649a:	9b08      	ldr	r3, [sp, #32]
 800649c:	b1b3      	cbz	r3, 80064cc <_strtod_l+0x604>
 800649e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80064a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	4659      	mov	r1, fp
 80064aa:	dd0f      	ble.n	80064cc <_strtod_l+0x604>
 80064ac:	2b1f      	cmp	r3, #31
 80064ae:	dd56      	ble.n	800655e <_strtod_l+0x696>
 80064b0:	2b34      	cmp	r3, #52	@ 0x34
 80064b2:	bfde      	ittt	le
 80064b4:	f04f 33ff 	movle.w	r3, #4294967295
 80064b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80064bc:	4093      	lslle	r3, r2
 80064be:	f04f 0a00 	mov.w	sl, #0
 80064c2:	bfcc      	ite	gt
 80064c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80064c8:	ea03 0b01 	andle.w	fp, r3, r1
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	4650      	mov	r0, sl
 80064d2:	4659      	mov	r1, fp
 80064d4:	f7fa fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1a7      	bne.n	800642c <_strtod_l+0x564>
 80064dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80064e2:	9805      	ldr	r0, [sp, #20]
 80064e4:	462b      	mov	r3, r5
 80064e6:	464a      	mov	r2, r9
 80064e8:	f7ff f8ce 	bl	8005688 <__s2b>
 80064ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f43f af09 	beq.w	8006306 <_strtod_l+0x43e>
 80064f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064f8:	2a00      	cmp	r2, #0
 80064fa:	eba3 0308 	sub.w	r3, r3, r8
 80064fe:	bfa8      	it	ge
 8006500:	2300      	movge	r3, #0
 8006502:	9312      	str	r3, [sp, #72]	@ 0x48
 8006504:	2400      	movs	r4, #0
 8006506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800650a:	9316      	str	r3, [sp, #88]	@ 0x58
 800650c:	46a0      	mov	r8, r4
 800650e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006510:	9805      	ldr	r0, [sp, #20]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	f7ff f810 	bl	8005538 <_Balloc>
 8006518:	4681      	mov	r9, r0
 800651a:	2800      	cmp	r0, #0
 800651c:	f43f aef7 	beq.w	800630e <_strtod_l+0x446>
 8006520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	3202      	adds	r2, #2
 8006526:	f103 010c 	add.w	r1, r3, #12
 800652a:	0092      	lsls	r2, r2, #2
 800652c:	300c      	adds	r0, #12
 800652e:	f000 fd71 	bl	8007014 <memcpy>
 8006532:	ec4b ab10 	vmov	d0, sl, fp
 8006536:	9805      	ldr	r0, [sp, #20]
 8006538:	aa1c      	add	r2, sp, #112	@ 0x70
 800653a:	a91b      	add	r1, sp, #108	@ 0x6c
 800653c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006540:	f7ff fbd6 	bl	8005cf0 <__d2b>
 8006544:	901a      	str	r0, [sp, #104]	@ 0x68
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f aee1 	beq.w	800630e <_strtod_l+0x446>
 800654c:	9805      	ldr	r0, [sp, #20]
 800654e:	2101      	movs	r1, #1
 8006550:	f7ff f930 	bl	80057b4 <__i2b>
 8006554:	4680      	mov	r8, r0
 8006556:	b948      	cbnz	r0, 800656c <_strtod_l+0x6a4>
 8006558:	f04f 0800 	mov.w	r8, #0
 800655c:	e6d7      	b.n	800630e <_strtod_l+0x446>
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	ea03 0a0a 	and.w	sl, r3, sl
 800656a:	e7af      	b.n	80064cc <_strtod_l+0x604>
 800656c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800656e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006570:	2d00      	cmp	r5, #0
 8006572:	bfab      	itete	ge
 8006574:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006576:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006578:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800657a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800657c:	bfac      	ite	ge
 800657e:	18ef      	addge	r7, r5, r3
 8006580:	1b5e      	sublt	r6, r3, r5
 8006582:	9b08      	ldr	r3, [sp, #32]
 8006584:	1aed      	subs	r5, r5, r3
 8006586:	4415      	add	r5, r2
 8006588:	4b65      	ldr	r3, [pc, #404]	@ (8006720 <_strtod_l+0x858>)
 800658a:	3d01      	subs	r5, #1
 800658c:	429d      	cmp	r5, r3
 800658e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006592:	da50      	bge.n	8006636 <_strtod_l+0x76e>
 8006594:	1b5b      	subs	r3, r3, r5
 8006596:	2b1f      	cmp	r3, #31
 8006598:	eba2 0203 	sub.w	r2, r2, r3
 800659c:	f04f 0101 	mov.w	r1, #1
 80065a0:	dc3d      	bgt.n	800661e <_strtod_l+0x756>
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065a8:	2300      	movs	r3, #0
 80065aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80065ac:	18bd      	adds	r5, r7, r2
 80065ae:	9b08      	ldr	r3, [sp, #32]
 80065b0:	42af      	cmp	r7, r5
 80065b2:	4416      	add	r6, r2
 80065b4:	441e      	add	r6, r3
 80065b6:	463b      	mov	r3, r7
 80065b8:	bfa8      	it	ge
 80065ba:	462b      	movge	r3, r5
 80065bc:	42b3      	cmp	r3, r6
 80065be:	bfa8      	it	ge
 80065c0:	4633      	movge	r3, r6
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfc2      	ittt	gt
 80065c6:	1aed      	subgt	r5, r5, r3
 80065c8:	1af6      	subgt	r6, r6, r3
 80065ca:	1aff      	subgt	r7, r7, r3
 80065cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	dd16      	ble.n	8006600 <_strtod_l+0x738>
 80065d2:	4641      	mov	r1, r8
 80065d4:	9805      	ldr	r0, [sp, #20]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f7ff f9a4 	bl	8005924 <__pow5mult>
 80065dc:	4680      	mov	r8, r0
 80065de:	2800      	cmp	r0, #0
 80065e0:	d0ba      	beq.n	8006558 <_strtod_l+0x690>
 80065e2:	4601      	mov	r1, r0
 80065e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065e6:	9805      	ldr	r0, [sp, #20]
 80065e8:	f7ff f8fa 	bl	80057e0 <__multiply>
 80065ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f43f ae8d 	beq.w	800630e <_strtod_l+0x446>
 80065f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065f6:	9805      	ldr	r0, [sp, #20]
 80065f8:	f7fe ffde 	bl	80055b8 <_Bfree>
 80065fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006600:	2d00      	cmp	r5, #0
 8006602:	dc1d      	bgt.n	8006640 <_strtod_l+0x778>
 8006604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	dd23      	ble.n	8006652 <_strtod_l+0x78a>
 800660a:	4649      	mov	r1, r9
 800660c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800660e:	9805      	ldr	r0, [sp, #20]
 8006610:	f7ff f988 	bl	8005924 <__pow5mult>
 8006614:	4681      	mov	r9, r0
 8006616:	b9e0      	cbnz	r0, 8006652 <_strtod_l+0x78a>
 8006618:	f04f 0900 	mov.w	r9, #0
 800661c:	e677      	b.n	800630e <_strtod_l+0x446>
 800661e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006622:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006626:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800662a:	35e2      	adds	r5, #226	@ 0xe2
 800662c:	fa01 f305 	lsl.w	r3, r1, r5
 8006630:	9310      	str	r3, [sp, #64]	@ 0x40
 8006632:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006634:	e7ba      	b.n	80065ac <_strtod_l+0x6e4>
 8006636:	2300      	movs	r3, #0
 8006638:	9310      	str	r3, [sp, #64]	@ 0x40
 800663a:	2301      	movs	r3, #1
 800663c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800663e:	e7b5      	b.n	80065ac <_strtod_l+0x6e4>
 8006640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006642:	9805      	ldr	r0, [sp, #20]
 8006644:	462a      	mov	r2, r5
 8006646:	f7ff f9c7 	bl	80059d8 <__lshift>
 800664a:	901a      	str	r0, [sp, #104]	@ 0x68
 800664c:	2800      	cmp	r0, #0
 800664e:	d1d9      	bne.n	8006604 <_strtod_l+0x73c>
 8006650:	e65d      	b.n	800630e <_strtod_l+0x446>
 8006652:	2e00      	cmp	r6, #0
 8006654:	dd07      	ble.n	8006666 <_strtod_l+0x79e>
 8006656:	4649      	mov	r1, r9
 8006658:	9805      	ldr	r0, [sp, #20]
 800665a:	4632      	mov	r2, r6
 800665c:	f7ff f9bc 	bl	80059d8 <__lshift>
 8006660:	4681      	mov	r9, r0
 8006662:	2800      	cmp	r0, #0
 8006664:	d0d8      	beq.n	8006618 <_strtod_l+0x750>
 8006666:	2f00      	cmp	r7, #0
 8006668:	dd08      	ble.n	800667c <_strtod_l+0x7b4>
 800666a:	4641      	mov	r1, r8
 800666c:	9805      	ldr	r0, [sp, #20]
 800666e:	463a      	mov	r2, r7
 8006670:	f7ff f9b2 	bl	80059d8 <__lshift>
 8006674:	4680      	mov	r8, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	f43f ae49 	beq.w	800630e <_strtod_l+0x446>
 800667c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800667e:	9805      	ldr	r0, [sp, #20]
 8006680:	464a      	mov	r2, r9
 8006682:	f7ff fa31 	bl	8005ae8 <__mdiff>
 8006686:	4604      	mov	r4, r0
 8006688:	2800      	cmp	r0, #0
 800668a:	f43f ae40 	beq.w	800630e <_strtod_l+0x446>
 800668e:	68c3      	ldr	r3, [r0, #12]
 8006690:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006692:	2300      	movs	r3, #0
 8006694:	60c3      	str	r3, [r0, #12]
 8006696:	4641      	mov	r1, r8
 8006698:	f7ff fa0a 	bl	8005ab0 <__mcmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	da45      	bge.n	800672c <_strtod_l+0x864>
 80066a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066a2:	ea53 030a 	orrs.w	r3, r3, sl
 80066a6:	d16b      	bne.n	8006780 <_strtod_l+0x8b8>
 80066a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d167      	bne.n	8006780 <_strtod_l+0x8b8>
 80066b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066b4:	0d1b      	lsrs	r3, r3, #20
 80066b6:	051b      	lsls	r3, r3, #20
 80066b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066bc:	d960      	bls.n	8006780 <_strtod_l+0x8b8>
 80066be:	6963      	ldr	r3, [r4, #20]
 80066c0:	b913      	cbnz	r3, 80066c8 <_strtod_l+0x800>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	dd5b      	ble.n	8006780 <_strtod_l+0x8b8>
 80066c8:	4621      	mov	r1, r4
 80066ca:	2201      	movs	r2, #1
 80066cc:	9805      	ldr	r0, [sp, #20]
 80066ce:	f7ff f983 	bl	80059d8 <__lshift>
 80066d2:	4641      	mov	r1, r8
 80066d4:	4604      	mov	r4, r0
 80066d6:	f7ff f9eb 	bl	8005ab0 <__mcmp>
 80066da:	2800      	cmp	r0, #0
 80066dc:	dd50      	ble.n	8006780 <_strtod_l+0x8b8>
 80066de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066e2:	9a08      	ldr	r2, [sp, #32]
 80066e4:	0d1b      	lsrs	r3, r3, #20
 80066e6:	051b      	lsls	r3, r3, #20
 80066e8:	2a00      	cmp	r2, #0
 80066ea:	d06a      	beq.n	80067c2 <_strtod_l+0x8fa>
 80066ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066f0:	d867      	bhi.n	80067c2 <_strtod_l+0x8fa>
 80066f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80066f6:	f67f ae9d 	bls.w	8006434 <_strtod_l+0x56c>
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <_strtod_l+0x85c>)
 80066fc:	4650      	mov	r0, sl
 80066fe:	4659      	mov	r1, fp
 8006700:	2200      	movs	r2, #0
 8006702:	f7f9 ff81 	bl	8000608 <__aeabi_dmul>
 8006706:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <_strtod_l+0x860>)
 8006708:	400b      	ands	r3, r1
 800670a:	4682      	mov	sl, r0
 800670c:	468b      	mov	fp, r1
 800670e:	2b00      	cmp	r3, #0
 8006710:	f47f ae08 	bne.w	8006324 <_strtod_l+0x45c>
 8006714:	9a05      	ldr	r2, [sp, #20]
 8006716:	2322      	movs	r3, #34	@ 0x22
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e603      	b.n	8006324 <_strtod_l+0x45c>
 800671c:	08008130 	.word	0x08008130
 8006720:	fffffc02 	.word	0xfffffc02
 8006724:	39500000 	.word	0x39500000
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006730:	d165      	bne.n	80067fe <_strtod_l+0x936>
 8006732:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006738:	b35a      	cbz	r2, 8006792 <_strtod_l+0x8ca>
 800673a:	4a9f      	ldr	r2, [pc, #636]	@ (80069b8 <_strtod_l+0xaf0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d12b      	bne.n	8006798 <_strtod_l+0x8d0>
 8006740:	9b08      	ldr	r3, [sp, #32]
 8006742:	4651      	mov	r1, sl
 8006744:	b303      	cbz	r3, 8006788 <_strtod_l+0x8c0>
 8006746:	4b9d      	ldr	r3, [pc, #628]	@ (80069bc <_strtod_l+0xaf4>)
 8006748:	465a      	mov	r2, fp
 800674a:	4013      	ands	r3, r2
 800674c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
 8006754:	d81b      	bhi.n	800678e <_strtod_l+0x8c6>
 8006756:	0d1b      	lsrs	r3, r3, #20
 8006758:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	4299      	cmp	r1, r3
 8006762:	d119      	bne.n	8006798 <_strtod_l+0x8d0>
 8006764:	4b96      	ldr	r3, [pc, #600]	@ (80069c0 <_strtod_l+0xaf8>)
 8006766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006768:	429a      	cmp	r2, r3
 800676a:	d102      	bne.n	8006772 <_strtod_l+0x8aa>
 800676c:	3101      	adds	r1, #1
 800676e:	f43f adce 	beq.w	800630e <_strtod_l+0x446>
 8006772:	4b92      	ldr	r3, [pc, #584]	@ (80069bc <_strtod_l+0xaf4>)
 8006774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006776:	401a      	ands	r2, r3
 8006778:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800677c:	f04f 0a00 	mov.w	sl, #0
 8006780:	9b08      	ldr	r3, [sp, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1b9      	bne.n	80066fa <_strtod_l+0x832>
 8006786:	e5cd      	b.n	8006324 <_strtod_l+0x45c>
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	e7e8      	b.n	8006760 <_strtod_l+0x898>
 800678e:	4613      	mov	r3, r2
 8006790:	e7e6      	b.n	8006760 <_strtod_l+0x898>
 8006792:	ea53 030a 	orrs.w	r3, r3, sl
 8006796:	d0a2      	beq.n	80066de <_strtod_l+0x816>
 8006798:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800679a:	b1db      	cbz	r3, 80067d4 <_strtod_l+0x90c>
 800679c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800679e:	4213      	tst	r3, r2
 80067a0:	d0ee      	beq.n	8006780 <_strtod_l+0x8b8>
 80067a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067a4:	9a08      	ldr	r2, [sp, #32]
 80067a6:	4650      	mov	r0, sl
 80067a8:	4659      	mov	r1, fp
 80067aa:	b1bb      	cbz	r3, 80067dc <_strtod_l+0x914>
 80067ac:	f7ff fb6e 	bl	8005e8c <sulp>
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067b4:	ec53 2b10 	vmov	r2, r3, d0
 80067b8:	f7f9 fd70 	bl	800029c <__adddf3>
 80067bc:	4682      	mov	sl, r0
 80067be:	468b      	mov	fp, r1
 80067c0:	e7de      	b.n	8006780 <_strtod_l+0x8b8>
 80067c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80067c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067ce:	f04f 3aff 	mov.w	sl, #4294967295
 80067d2:	e7d5      	b.n	8006780 <_strtod_l+0x8b8>
 80067d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067d6:	ea13 0f0a 	tst.w	r3, sl
 80067da:	e7e1      	b.n	80067a0 <_strtod_l+0x8d8>
 80067dc:	f7ff fb56 	bl	8005e8c <sulp>
 80067e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e4:	ec53 2b10 	vmov	r2, r3, d0
 80067e8:	f7f9 fd56 	bl	8000298 <__aeabi_dsub>
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	f7fa f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d0c1      	beq.n	8006780 <_strtod_l+0x8b8>
 80067fc:	e61a      	b.n	8006434 <_strtod_l+0x56c>
 80067fe:	4641      	mov	r1, r8
 8006800:	4620      	mov	r0, r4
 8006802:	f7ff facd 	bl	8005da0 <__ratio>
 8006806:	ec57 6b10 	vmov	r6, r7, d0
 800680a:	2200      	movs	r2, #0
 800680c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7fa f974 	bl	8000b00 <__aeabi_dcmple>
 8006818:	2800      	cmp	r0, #0
 800681a:	d06f      	beq.n	80068fc <_strtod_l+0xa34>
 800681c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d17a      	bne.n	8006918 <_strtod_l+0xa50>
 8006822:	f1ba 0f00 	cmp.w	sl, #0
 8006826:	d158      	bne.n	80068da <_strtod_l+0xa12>
 8006828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800682e:	2b00      	cmp	r3, #0
 8006830:	d15a      	bne.n	80068e8 <_strtod_l+0xa20>
 8006832:	4b64      	ldr	r3, [pc, #400]	@ (80069c4 <_strtod_l+0xafc>)
 8006834:	2200      	movs	r2, #0
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7fa f957 	bl	8000aec <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	d159      	bne.n	80068f6 <_strtod_l+0xa2e>
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	4b60      	ldr	r3, [pc, #384]	@ (80069c8 <_strtod_l+0xb00>)
 8006848:	2200      	movs	r2, #0
 800684a:	f7f9 fedd 	bl	8000608 <__aeabi_dmul>
 800684e:	4606      	mov	r6, r0
 8006850:	460f      	mov	r7, r1
 8006852:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006856:	9606      	str	r6, [sp, #24]
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800685e:	4d57      	ldr	r5, [pc, #348]	@ (80069bc <_strtod_l+0xaf4>)
 8006860:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006866:	401d      	ands	r5, r3
 8006868:	4b58      	ldr	r3, [pc, #352]	@ (80069cc <_strtod_l+0xb04>)
 800686a:	429d      	cmp	r5, r3
 800686c:	f040 80b2 	bne.w	80069d4 <_strtod_l+0xb0c>
 8006870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006872:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006876:	ec4b ab10 	vmov	d0, sl, fp
 800687a:	f7ff f9c9 	bl	8005c10 <__ulp>
 800687e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006882:	ec51 0b10 	vmov	r0, r1, d0
 8006886:	f7f9 febf 	bl	8000608 <__aeabi_dmul>
 800688a:	4652      	mov	r2, sl
 800688c:	465b      	mov	r3, fp
 800688e:	f7f9 fd05 	bl	800029c <__adddf3>
 8006892:	460b      	mov	r3, r1
 8006894:	4949      	ldr	r1, [pc, #292]	@ (80069bc <_strtod_l+0xaf4>)
 8006896:	4a4e      	ldr	r2, [pc, #312]	@ (80069d0 <_strtod_l+0xb08>)
 8006898:	4019      	ands	r1, r3
 800689a:	4291      	cmp	r1, r2
 800689c:	4682      	mov	sl, r0
 800689e:	d942      	bls.n	8006926 <_strtod_l+0xa5e>
 80068a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068a2:	4b47      	ldr	r3, [pc, #284]	@ (80069c0 <_strtod_l+0xaf8>)
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d103      	bne.n	80068b0 <_strtod_l+0x9e8>
 80068a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068aa:	3301      	adds	r3, #1
 80068ac:	f43f ad2f 	beq.w	800630e <_strtod_l+0x446>
 80068b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80069c0 <_strtod_l+0xaf8>
 80068b4:	f04f 3aff 	mov.w	sl, #4294967295
 80068b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068ba:	9805      	ldr	r0, [sp, #20]
 80068bc:	f7fe fe7c 	bl	80055b8 <_Bfree>
 80068c0:	9805      	ldr	r0, [sp, #20]
 80068c2:	4649      	mov	r1, r9
 80068c4:	f7fe fe78 	bl	80055b8 <_Bfree>
 80068c8:	9805      	ldr	r0, [sp, #20]
 80068ca:	4641      	mov	r1, r8
 80068cc:	f7fe fe74 	bl	80055b8 <_Bfree>
 80068d0:	9805      	ldr	r0, [sp, #20]
 80068d2:	4621      	mov	r1, r4
 80068d4:	f7fe fe70 	bl	80055b8 <_Bfree>
 80068d8:	e619      	b.n	800650e <_strtod_l+0x646>
 80068da:	f1ba 0f01 	cmp.w	sl, #1
 80068de:	d103      	bne.n	80068e8 <_strtod_l+0xa20>
 80068e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f43f ada6 	beq.w	8006434 <_strtod_l+0x56c>
 80068e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006998 <_strtod_l+0xad0>
 80068ec:	4f35      	ldr	r7, [pc, #212]	@ (80069c4 <_strtod_l+0xafc>)
 80068ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068f2:	2600      	movs	r6, #0
 80068f4:	e7b1      	b.n	800685a <_strtod_l+0x992>
 80068f6:	4f34      	ldr	r7, [pc, #208]	@ (80069c8 <_strtod_l+0xb00>)
 80068f8:	2600      	movs	r6, #0
 80068fa:	e7aa      	b.n	8006852 <_strtod_l+0x98a>
 80068fc:	4b32      	ldr	r3, [pc, #200]	@ (80069c8 <_strtod_l+0xb00>)
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fe80 	bl	8000608 <__aeabi_dmul>
 8006908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d09f      	beq.n	8006852 <_strtod_l+0x98a>
 8006912:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006916:	e7a0      	b.n	800685a <_strtod_l+0x992>
 8006918:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80069a0 <_strtod_l+0xad8>
 800691c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006920:	ec57 6b17 	vmov	r6, r7, d7
 8006924:	e799      	b.n	800685a <_strtod_l+0x992>
 8006926:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1c1      	bne.n	80068b8 <_strtod_l+0x9f0>
 8006934:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006938:	0d1b      	lsrs	r3, r3, #20
 800693a:	051b      	lsls	r3, r3, #20
 800693c:	429d      	cmp	r5, r3
 800693e:	d1bb      	bne.n	80068b8 <_strtod_l+0x9f0>
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	f7fa f9c0 	bl	8000cc8 <__aeabi_d2lz>
 8006948:	f7f9 fe30 	bl	80005ac <__aeabi_l2d>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4630      	mov	r0, r6
 8006952:	4639      	mov	r1, r7
 8006954:	f7f9 fca0 	bl	8000298 <__aeabi_dsub>
 8006958:	460b      	mov	r3, r1
 800695a:	4602      	mov	r2, r0
 800695c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006960:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006966:	ea46 060a 	orr.w	r6, r6, sl
 800696a:	431e      	orrs	r6, r3
 800696c:	d06f      	beq.n	8006a4e <_strtod_l+0xb86>
 800696e:	a30e      	add	r3, pc, #56	@ (adr r3, 80069a8 <_strtod_l+0xae0>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7fa f8ba 	bl	8000aec <__aeabi_dcmplt>
 8006978:	2800      	cmp	r0, #0
 800697a:	f47f acd3 	bne.w	8006324 <_strtod_l+0x45c>
 800697e:	a30c      	add	r3, pc, #48	@ (adr r3, 80069b0 <_strtod_l+0xae8>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006988:	f7fa f8ce 	bl	8000b28 <__aeabi_dcmpgt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d093      	beq.n	80068b8 <_strtod_l+0x9f0>
 8006990:	e4c8      	b.n	8006324 <_strtod_l+0x45c>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
 8006998:	00000000 	.word	0x00000000
 800699c:	bff00000 	.word	0xbff00000
 80069a0:	00000000 	.word	0x00000000
 80069a4:	3ff00000 	.word	0x3ff00000
 80069a8:	94a03595 	.word	0x94a03595
 80069ac:	3fdfffff 	.word	0x3fdfffff
 80069b0:	35afe535 	.word	0x35afe535
 80069b4:	3fe00000 	.word	0x3fe00000
 80069b8:	000fffff 	.word	0x000fffff
 80069bc:	7ff00000 	.word	0x7ff00000
 80069c0:	7fefffff 	.word	0x7fefffff
 80069c4:	3ff00000 	.word	0x3ff00000
 80069c8:	3fe00000 	.word	0x3fe00000
 80069cc:	7fe00000 	.word	0x7fe00000
 80069d0:	7c9fffff 	.word	0x7c9fffff
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	b323      	cbz	r3, 8006a22 <_strtod_l+0xb5a>
 80069d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80069dc:	d821      	bhi.n	8006a22 <_strtod_l+0xb5a>
 80069de:	a328      	add	r3, pc, #160	@ (adr r3, 8006a80 <_strtod_l+0xbb8>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7fa f88a 	bl	8000b00 <__aeabi_dcmple>
 80069ec:	b1a0      	cbz	r0, 8006a18 <_strtod_l+0xb50>
 80069ee:	4639      	mov	r1, r7
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7fa f8e1 	bl	8000bb8 <__aeabi_d2uiz>
 80069f6:	2801      	cmp	r0, #1
 80069f8:	bf38      	it	cc
 80069fa:	2001      	movcc	r0, #1
 80069fc:	f7f9 fd8a 	bl	8000514 <__aeabi_ui2d>
 8006a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	b9fb      	cbnz	r3, 8006a48 <_strtod_l+0xb80>
 8006a08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006a0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a1e:	1b5b      	subs	r3, r3, r5
 8006a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a2a:	f7ff f8f1 	bl	8005c10 <__ulp>
 8006a2e:	4650      	mov	r0, sl
 8006a30:	ec53 2b10 	vmov	r2, r3, d0
 8006a34:	4659      	mov	r1, fp
 8006a36:	f7f9 fde7 	bl	8000608 <__aeabi_dmul>
 8006a3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a3e:	f7f9 fc2d 	bl	800029c <__adddf3>
 8006a42:	4682      	mov	sl, r0
 8006a44:	468b      	mov	fp, r1
 8006a46:	e770      	b.n	800692a <_strtod_l+0xa62>
 8006a48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a4c:	e7e0      	b.n	8006a10 <_strtod_l+0xb48>
 8006a4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a88 <_strtod_l+0xbc0>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7fa f84a 	bl	8000aec <__aeabi_dcmplt>
 8006a58:	e798      	b.n	800698c <_strtod_l+0xac4>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006a60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	f7ff ba6d 	b.w	8005f42 <_strtod_l+0x7a>
 8006a68:	2a65      	cmp	r2, #101	@ 0x65
 8006a6a:	f43f ab68 	beq.w	800613e <_strtod_l+0x276>
 8006a6e:	2a45      	cmp	r2, #69	@ 0x45
 8006a70:	f43f ab65 	beq.w	800613e <_strtod_l+0x276>
 8006a74:	2301      	movs	r3, #1
 8006a76:	f7ff bba0 	b.w	80061ba <_strtod_l+0x2f2>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	ffc00000 	.word	0xffc00000
 8006a84:	41dfffff 	.word	0x41dfffff
 8006a88:	94a03595 	.word	0x94a03595
 8006a8c:	3fcfffff 	.word	0x3fcfffff

08006a90 <_strtod_r>:
 8006a90:	4b01      	ldr	r3, [pc, #4]	@ (8006a98 <_strtod_r+0x8>)
 8006a92:	f7ff ba19 	b.w	8005ec8 <_strtod_l>
 8006a96:	bf00      	nop
 8006a98:	200000c0 	.word	0x200000c0

08006a9c <_strtol_l.isra.0>:
 8006a9c:	2b24      	cmp	r3, #36	@ 0x24
 8006a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa2:	4686      	mov	lr, r0
 8006aa4:	4690      	mov	r8, r2
 8006aa6:	d801      	bhi.n	8006aac <_strtol_l.isra.0+0x10>
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d106      	bne.n	8006aba <_strtol_l.isra.0+0x1e>
 8006aac:	f7fd fdae 	bl	800460c <__errno>
 8006ab0:	2316      	movs	r3, #22
 8006ab2:	6003      	str	r3, [r0, #0]
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	4834      	ldr	r0, [pc, #208]	@ (8006b8c <_strtol_l.isra.0+0xf0>)
 8006abc:	460d      	mov	r5, r1
 8006abe:	462a      	mov	r2, r5
 8006ac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac4:	5d06      	ldrb	r6, [r0, r4]
 8006ac6:	f016 0608 	ands.w	r6, r6, #8
 8006aca:	d1f8      	bne.n	8006abe <_strtol_l.isra.0+0x22>
 8006acc:	2c2d      	cmp	r4, #45	@ 0x2d
 8006ace:	d110      	bne.n	8006af2 <_strtol_l.isra.0+0x56>
 8006ad0:	782c      	ldrb	r4, [r5, #0]
 8006ad2:	2601      	movs	r6, #1
 8006ad4:	1c95      	adds	r5, r2, #2
 8006ad6:	f033 0210 	bics.w	r2, r3, #16
 8006ada:	d115      	bne.n	8006b08 <_strtol_l.isra.0+0x6c>
 8006adc:	2c30      	cmp	r4, #48	@ 0x30
 8006ade:	d10d      	bne.n	8006afc <_strtol_l.isra.0+0x60>
 8006ae0:	782a      	ldrb	r2, [r5, #0]
 8006ae2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ae6:	2a58      	cmp	r2, #88	@ 0x58
 8006ae8:	d108      	bne.n	8006afc <_strtol_l.isra.0+0x60>
 8006aea:	786c      	ldrb	r4, [r5, #1]
 8006aec:	3502      	adds	r5, #2
 8006aee:	2310      	movs	r3, #16
 8006af0:	e00a      	b.n	8006b08 <_strtol_l.isra.0+0x6c>
 8006af2:	2c2b      	cmp	r4, #43	@ 0x2b
 8006af4:	bf04      	itt	eq
 8006af6:	782c      	ldrbeq	r4, [r5, #0]
 8006af8:	1c95      	addeq	r5, r2, #2
 8006afa:	e7ec      	b.n	8006ad6 <_strtol_l.isra.0+0x3a>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1f6      	bne.n	8006aee <_strtol_l.isra.0+0x52>
 8006b00:	2c30      	cmp	r4, #48	@ 0x30
 8006b02:	bf14      	ite	ne
 8006b04:	230a      	movne	r3, #10
 8006b06:	2308      	moveq	r3, #8
 8006b08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b10:	2200      	movs	r2, #0
 8006b12:	fbbc f9f3 	udiv	r9, ip, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b20:	2f09      	cmp	r7, #9
 8006b22:	d80f      	bhi.n	8006b44 <_strtol_l.isra.0+0xa8>
 8006b24:	463c      	mov	r4, r7
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	dd1b      	ble.n	8006b62 <_strtol_l.isra.0+0xc6>
 8006b2a:	1c57      	adds	r7, r2, #1
 8006b2c:	d007      	beq.n	8006b3e <_strtol_l.isra.0+0xa2>
 8006b2e:	4581      	cmp	r9, r0
 8006b30:	d314      	bcc.n	8006b5c <_strtol_l.isra.0+0xc0>
 8006b32:	d101      	bne.n	8006b38 <_strtol_l.isra.0+0x9c>
 8006b34:	45a2      	cmp	sl, r4
 8006b36:	db11      	blt.n	8006b5c <_strtol_l.isra.0+0xc0>
 8006b38:	fb00 4003 	mla	r0, r0, r3, r4
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b42:	e7eb      	b.n	8006b1c <_strtol_l.isra.0+0x80>
 8006b44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b48:	2f19      	cmp	r7, #25
 8006b4a:	d801      	bhi.n	8006b50 <_strtol_l.isra.0+0xb4>
 8006b4c:	3c37      	subs	r4, #55	@ 0x37
 8006b4e:	e7ea      	b.n	8006b26 <_strtol_l.isra.0+0x8a>
 8006b50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b54:	2f19      	cmp	r7, #25
 8006b56:	d804      	bhi.n	8006b62 <_strtol_l.isra.0+0xc6>
 8006b58:	3c57      	subs	r4, #87	@ 0x57
 8006b5a:	e7e4      	b.n	8006b26 <_strtol_l.isra.0+0x8a>
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	e7ed      	b.n	8006b3e <_strtol_l.isra.0+0xa2>
 8006b62:	1c53      	adds	r3, r2, #1
 8006b64:	d108      	bne.n	8006b78 <_strtol_l.isra.0+0xdc>
 8006b66:	2322      	movs	r3, #34	@ 0x22
 8006b68:	f8ce 3000 	str.w	r3, [lr]
 8006b6c:	4660      	mov	r0, ip
 8006b6e:	f1b8 0f00 	cmp.w	r8, #0
 8006b72:	d0a0      	beq.n	8006ab6 <_strtol_l.isra.0+0x1a>
 8006b74:	1e69      	subs	r1, r5, #1
 8006b76:	e006      	b.n	8006b86 <_strtol_l.isra.0+0xea>
 8006b78:	b106      	cbz	r6, 8006b7c <_strtol_l.isra.0+0xe0>
 8006b7a:	4240      	negs	r0, r0
 8006b7c:	f1b8 0f00 	cmp.w	r8, #0
 8006b80:	d099      	beq.n	8006ab6 <_strtol_l.isra.0+0x1a>
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d1f6      	bne.n	8006b74 <_strtol_l.isra.0+0xd8>
 8006b86:	f8c8 1000 	str.w	r1, [r8]
 8006b8a:	e794      	b.n	8006ab6 <_strtol_l.isra.0+0x1a>
 8006b8c:	08008159 	.word	0x08008159

08006b90 <_strtol_r>:
 8006b90:	f7ff bf84 	b.w	8006a9c <_strtol_l.isra.0>

08006b94 <__ssputs_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	688e      	ldr	r6, [r1, #8]
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	42be      	cmp	r6, r7
 8006b9e:	680b      	ldr	r3, [r1, #0]
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4690      	mov	r8, r2
 8006ba6:	d82d      	bhi.n	8006c04 <__ssputs_r+0x70>
 8006ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bb0:	d026      	beq.n	8006c00 <__ssputs_r+0x6c>
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	6909      	ldr	r1, [r1, #16]
 8006bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bba:	eba3 0901 	sub.w	r9, r3, r1
 8006bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc2:	1c7b      	adds	r3, r7, #1
 8006bc4:	444b      	add	r3, r9
 8006bc6:	106d      	asrs	r5, r5, #1
 8006bc8:	429d      	cmp	r5, r3
 8006bca:	bf38      	it	cc
 8006bcc:	461d      	movcc	r5, r3
 8006bce:	0553      	lsls	r3, r2, #21
 8006bd0:	d527      	bpl.n	8006c22 <__ssputs_r+0x8e>
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f7fe fc24 	bl	8005420 <_malloc_r>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	b360      	cbz	r0, 8006c36 <__ssputs_r+0xa2>
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	464a      	mov	r2, r9
 8006be0:	f000 fa18 	bl	8007014 <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	6165      	str	r5, [r4, #20]
 8006bf4:	444e      	add	r6, r9
 8006bf6:	eba5 0509 	sub.w	r5, r5, r9
 8006bfa:	6026      	str	r6, [r4, #0]
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	42be      	cmp	r6, r7
 8006c02:	d900      	bls.n	8006c06 <__ssputs_r+0x72>
 8006c04:	463e      	mov	r6, r7
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	f000 f9c6 	bl	8006f9c <memmove>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	4433      	add	r3, r6
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	462a      	mov	r2, r5
 8006c24:	f000 fd89 	bl	800773a <_realloc_r>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d1e0      	bne.n	8006bf0 <__ssputs_r+0x5c>
 8006c2e:	6921      	ldr	r1, [r4, #16]
 8006c30:	4650      	mov	r0, sl
 8006c32:	f7fe fb81 	bl	8005338 <_free_r>
 8006c36:	230c      	movs	r3, #12
 8006c38:	f8ca 3000 	str.w	r3, [sl]
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e7e9      	b.n	8006c1e <__ssputs_r+0x8a>
	...

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4698      	mov	r8, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	b09d      	sub	sp, #116	@ 0x74
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	d510      	bpl.n	8006c82 <_svfiprintf_r+0x36>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b973      	cbnz	r3, 8006c82 <_svfiprintf_r+0x36>
 8006c64:	2140      	movs	r1, #64	@ 0x40
 8006c66:	f7fe fbdb 	bl	8005420 <_malloc_r>
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	6128      	str	r0, [r5, #16]
 8006c6e:	b930      	cbnz	r0, 8006c7e <_svfiprintf_r+0x32>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	@ 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	2340      	movs	r3, #64	@ 0x40
 8006c80:	616b      	str	r3, [r5, #20]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	2320      	movs	r3, #32
 8006c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c90:	2330      	movs	r3, #48	@ 0x30
 8006c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e30 <_svfiprintf_r+0x1e4>
 8006c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c9a:	f04f 0901 	mov.w	r9, #1
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca6:	b10a      	cbz	r2, 8006cac <_svfiprintf_r+0x60>
 8006ca8:	2a25      	cmp	r2, #37	@ 0x25
 8006caa:	d1f9      	bne.n	8006ca0 <_svfiprintf_r+0x54>
 8006cac:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb0:	d00b      	beq.n	8006cca <_svfiprintf_r+0x7e>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ff6b 	bl	8006b94 <__ssputs_r>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f000 80a7 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc6:	445a      	add	r2, fp
 8006cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 809f 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cde:	f10a 0a01 	add.w	sl, sl, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cec:	4654      	mov	r4, sl
 8006cee:	2205      	movs	r2, #5
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	484e      	ldr	r0, [pc, #312]	@ (8006e30 <_svfiprintf_r+0x1e4>)
 8006cf6:	f7f9 fa73 	bl	80001e0 <memchr>
 8006cfa:	9a04      	ldr	r2, [sp, #16]
 8006cfc:	b9d8      	cbnz	r0, 8006d36 <_svfiprintf_r+0xea>
 8006cfe:	06d0      	lsls	r0, r2, #27
 8006d00:	bf44      	itt	mi
 8006d02:	2320      	movmi	r3, #32
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	bf44      	itt	mi
 8006d0c:	232b      	movmi	r3, #43	@ 0x2b
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d18:	d015      	beq.n	8006d46 <_svfiprintf_r+0xfa>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	4654      	mov	r4, sl
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4621      	mov	r1, r4
 8006d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2a:	3b30      	subs	r3, #48	@ 0x30
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d94b      	bls.n	8006dc8 <_svfiprintf_r+0x17c>
 8006d30:	b1b0      	cbz	r0, 8006d60 <_svfiprintf_r+0x114>
 8006d32:	9207      	str	r2, [sp, #28]
 8006d34:	e014      	b.n	8006d60 <_svfiprintf_r+0x114>
 8006d36:	eba0 0308 	sub.w	r3, r0, r8
 8006d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	46a2      	mov	sl, r4
 8006d44:	e7d2      	b.n	8006cec <_svfiprintf_r+0xa0>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9103      	str	r1, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbb      	ittet	lt
 8006d52:	425b      	neglt	r3, r3
 8006d54:	f042 0202 	orrlt.w	r2, r2, #2
 8006d58:	9307      	strge	r3, [sp, #28]
 8006d5a:	9307      	strlt	r3, [sp, #28]
 8006d5c:	bfb8      	it	lt
 8006d5e:	9204      	strlt	r2, [sp, #16]
 8006d60:	7823      	ldrb	r3, [r4, #0]
 8006d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d64:	d10a      	bne.n	8006d7c <_svfiprintf_r+0x130>
 8006d66:	7863      	ldrb	r3, [r4, #1]
 8006d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d6a:	d132      	bne.n	8006dd2 <_svfiprintf_r+0x186>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1d1a      	adds	r2, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d78:	3402      	adds	r4, #2
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e40 <_svfiprintf_r+0x1f4>
 8006d80:	7821      	ldrb	r1, [r4, #0]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7f9 fa2b 	bl	80001e0 <memchr>
 8006d8a:	b138      	cbz	r0, 8006d9c <_svfiprintf_r+0x150>
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	eba0 000a 	sub.w	r0, r0, sl
 8006d92:	2240      	movs	r2, #64	@ 0x40
 8006d94:	4082      	lsls	r2, r0
 8006d96:	4313      	orrs	r3, r2
 8006d98:	3401      	adds	r4, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	4824      	ldr	r0, [pc, #144]	@ (8006e34 <_svfiprintf_r+0x1e8>)
 8006da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da6:	2206      	movs	r2, #6
 8006da8:	f7f9 fa1a 	bl	80001e0 <memchr>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d036      	beq.n	8006e1e <_svfiprintf_r+0x1d2>
 8006db0:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <_svfiprintf_r+0x1ec>)
 8006db2:	bb1b      	cbnz	r3, 8006dfc <_svfiprintf_r+0x1b0>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	3307      	adds	r3, #7
 8006db8:	f023 0307 	bic.w	r3, r3, #7
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc2:	4433      	add	r3, r6
 8006dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc6:	e76a      	b.n	8006c9e <_svfiprintf_r+0x52>
 8006dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dcc:	460c      	mov	r4, r1
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e7a8      	b.n	8006d24 <_svfiprintf_r+0xd8>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f04f 0c0a 	mov.w	ip, #10
 8006dde:	4620      	mov	r0, r4
 8006de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de4:	3a30      	subs	r2, #48	@ 0x30
 8006de6:	2a09      	cmp	r2, #9
 8006de8:	d903      	bls.n	8006df2 <_svfiprintf_r+0x1a6>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0c6      	beq.n	8006d7c <_svfiprintf_r+0x130>
 8006dee:	9105      	str	r1, [sp, #20]
 8006df0:	e7c4      	b.n	8006d7c <_svfiprintf_r+0x130>
 8006df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df6:	4604      	mov	r4, r0
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e7f0      	b.n	8006dde <_svfiprintf_r+0x192>
 8006dfc:	ab03      	add	r3, sp, #12
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	462a      	mov	r2, r5
 8006e02:	4b0e      	ldr	r3, [pc, #56]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e04:	a904      	add	r1, sp, #16
 8006e06:	4638      	mov	r0, r7
 8006e08:	f7fc fcc2 	bl	8003790 <_printf_float>
 8006e0c:	1c42      	adds	r2, r0, #1
 8006e0e:	4606      	mov	r6, r0
 8006e10:	d1d6      	bne.n	8006dc0 <_svfiprintf_r+0x174>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	065b      	lsls	r3, r3, #25
 8006e16:	f53f af2d 	bmi.w	8006c74 <_svfiprintf_r+0x28>
 8006e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e1c:	e72c      	b.n	8006c78 <_svfiprintf_r+0x2c>
 8006e1e:	ab03      	add	r3, sp, #12
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462a      	mov	r2, r5
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7fc ff49 	bl	8003cc0 <_printf_i>
 8006e2e:	e7ed      	b.n	8006e0c <_svfiprintf_r+0x1c0>
 8006e30:	08007f57 	.word	0x08007f57
 8006e34:	08007f61 	.word	0x08007f61
 8006e38:	08003791 	.word	0x08003791
 8006e3c:	08006b95 	.word	0x08006b95
 8006e40:	08007f5d 	.word	0x08007f5d

08006e44 <__sflush_r>:
 8006e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	0716      	lsls	r6, r2, #28
 8006e4e:	4605      	mov	r5, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	d454      	bmi.n	8006efe <__sflush_r+0xba>
 8006e54:	684b      	ldr	r3, [r1, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dc02      	bgt.n	8006e60 <__sflush_r+0x1c>
 8006e5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dd48      	ble.n	8006ef2 <__sflush_r+0xae>
 8006e60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	d045      	beq.n	8006ef2 <__sflush_r+0xae>
 8006e66:	2300      	movs	r3, #0
 8006e68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e6c:	682f      	ldr	r7, [r5, #0]
 8006e6e:	6a21      	ldr	r1, [r4, #32]
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	d030      	beq.n	8006ed6 <__sflush_r+0x92>
 8006e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	0759      	lsls	r1, r3, #29
 8006e7a:	d505      	bpl.n	8006e88 <__sflush_r+0x44>
 8006e7c:	6863      	ldr	r3, [r4, #4]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e82:	b10b      	cbz	r3, 8006e88 <__sflush_r+0x44>
 8006e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e8c:	6a21      	ldr	r1, [r4, #32]
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b0      	blx	r6
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	d106      	bne.n	8006ea6 <__sflush_r+0x62>
 8006e98:	6829      	ldr	r1, [r5, #0]
 8006e9a:	291d      	cmp	r1, #29
 8006e9c:	d82b      	bhi.n	8006ef6 <__sflush_r+0xb2>
 8006e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f48 <__sflush_r+0x104>)
 8006ea0:	40ca      	lsrs	r2, r1
 8006ea2:	07d6      	lsls	r6, r2, #31
 8006ea4:	d527      	bpl.n	8006ef6 <__sflush_r+0xb2>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6062      	str	r2, [r4, #4]
 8006eaa:	04d9      	lsls	r1, r3, #19
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	6022      	str	r2, [r4, #0]
 8006eb0:	d504      	bpl.n	8006ebc <__sflush_r+0x78>
 8006eb2:	1c42      	adds	r2, r0, #1
 8006eb4:	d101      	bne.n	8006eba <__sflush_r+0x76>
 8006eb6:	682b      	ldr	r3, [r5, #0]
 8006eb8:	b903      	cbnz	r3, 8006ebc <__sflush_r+0x78>
 8006eba:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ebe:	602f      	str	r7, [r5, #0]
 8006ec0:	b1b9      	cbz	r1, 8006ef2 <__sflush_r+0xae>
 8006ec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ec6:	4299      	cmp	r1, r3
 8006ec8:	d002      	beq.n	8006ed0 <__sflush_r+0x8c>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7fe fa34 	bl	8005338 <_free_r>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ed4:	e00d      	b.n	8006ef2 <__sflush_r+0xae>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	4602      	mov	r2, r0
 8006ede:	1c50      	adds	r0, r2, #1
 8006ee0:	d1c9      	bne.n	8006e76 <__sflush_r+0x32>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0c6      	beq.n	8006e76 <__sflush_r+0x32>
 8006ee8:	2b1d      	cmp	r3, #29
 8006eea:	d001      	beq.n	8006ef0 <__sflush_r+0xac>
 8006eec:	2b16      	cmp	r3, #22
 8006eee:	d11e      	bne.n	8006f2e <__sflush_r+0xea>
 8006ef0:	602f      	str	r7, [r5, #0]
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e022      	b.n	8006f3c <__sflush_r+0xf8>
 8006ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006efa:	b21b      	sxth	r3, r3
 8006efc:	e01b      	b.n	8006f36 <__sflush_r+0xf2>
 8006efe:	690f      	ldr	r7, [r1, #16]
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	d0f6      	beq.n	8006ef2 <__sflush_r+0xae>
 8006f04:	0793      	lsls	r3, r2, #30
 8006f06:	680e      	ldr	r6, [r1, #0]
 8006f08:	bf08      	it	eq
 8006f0a:	694b      	ldreq	r3, [r1, #20]
 8006f0c:	600f      	str	r7, [r1, #0]
 8006f0e:	bf18      	it	ne
 8006f10:	2300      	movne	r3, #0
 8006f12:	eba6 0807 	sub.w	r8, r6, r7
 8006f16:	608b      	str	r3, [r1, #8]
 8006f18:	f1b8 0f00 	cmp.w	r8, #0
 8006f1c:	dde9      	ble.n	8006ef2 <__sflush_r+0xae>
 8006f1e:	6a21      	ldr	r1, [r4, #32]
 8006f20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f22:	4643      	mov	r3, r8
 8006f24:	463a      	mov	r2, r7
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b0      	blx	r6
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	dc08      	bgt.n	8006f40 <__sflush_r+0xfc>
 8006f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f36:	81a3      	strh	r3, [r4, #12]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	4407      	add	r7, r0
 8006f42:	eba8 0800 	sub.w	r8, r8, r0
 8006f46:	e7e7      	b.n	8006f18 <__sflush_r+0xd4>
 8006f48:	20400001 	.word	0x20400001

08006f4c <_fflush_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	690b      	ldr	r3, [r1, #16]
 8006f50:	4605      	mov	r5, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b913      	cbnz	r3, 8006f5c <_fflush_r+0x10>
 8006f56:	2500      	movs	r5, #0
 8006f58:	4628      	mov	r0, r5
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	b118      	cbz	r0, 8006f66 <_fflush_r+0x1a>
 8006f5e:	6a03      	ldr	r3, [r0, #32]
 8006f60:	b90b      	cbnz	r3, 8006f66 <_fflush_r+0x1a>
 8006f62:	f7fd fa65 	bl	8004430 <__sinit>
 8006f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f3      	beq.n	8006f56 <_fflush_r+0xa>
 8006f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f70:	07d0      	lsls	r0, r2, #31
 8006f72:	d404      	bmi.n	8006f7e <_fflush_r+0x32>
 8006f74:	0599      	lsls	r1, r3, #22
 8006f76:	d402      	bmi.n	8006f7e <_fflush_r+0x32>
 8006f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7a:	f7fd fb72 	bl	8004662 <__retarget_lock_acquire_recursive>
 8006f7e:	4628      	mov	r0, r5
 8006f80:	4621      	mov	r1, r4
 8006f82:	f7ff ff5f 	bl	8006e44 <__sflush_r>
 8006f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f88:	07da      	lsls	r2, r3, #31
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	d4e4      	bmi.n	8006f58 <_fflush_r+0xc>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	059b      	lsls	r3, r3, #22
 8006f92:	d4e1      	bmi.n	8006f58 <_fflush_r+0xc>
 8006f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f96:	f7fd fb65 	bl	8004664 <__retarget_lock_release_recursive>
 8006f9a:	e7dd      	b.n	8006f58 <_fflush_r+0xc>

08006f9c <memmove>:
 8006f9c:	4288      	cmp	r0, r1
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	eb01 0402 	add.w	r4, r1, r2
 8006fa4:	d902      	bls.n	8006fac <memmove+0x10>
 8006fa6:	4284      	cmp	r4, r0
 8006fa8:	4623      	mov	r3, r4
 8006faa:	d807      	bhi.n	8006fbc <memmove+0x20>
 8006fac:	1e43      	subs	r3, r0, #1
 8006fae:	42a1      	cmp	r1, r4
 8006fb0:	d008      	beq.n	8006fc4 <memmove+0x28>
 8006fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fba:	e7f8      	b.n	8006fae <memmove+0x12>
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	428a      	cmp	r2, r1
 8006fc2:	d100      	bne.n	8006fc6 <memmove+0x2a>
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fce:	e7f7      	b.n	8006fc0 <memmove+0x24>

08006fd0 <strncmp>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	b16a      	cbz	r2, 8006ff0 <strncmp+0x20>
 8006fd4:	3901      	subs	r1, #1
 8006fd6:	1884      	adds	r4, r0, r2
 8006fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d103      	bne.n	8006fec <strncmp+0x1c>
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d001      	beq.n	8006fec <strncmp+0x1c>
 8006fe8:	2a00      	cmp	r2, #0
 8006fea:	d1f5      	bne.n	8006fd8 <strncmp+0x8>
 8006fec:	1ad0      	subs	r0, r2, r3
 8006fee:	bd10      	pop	{r4, pc}
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	e7fc      	b.n	8006fee <strncmp+0x1e>

08006ff4 <_sbrk_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	@ (8007010 <_sbrk_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fa fc1c 	bl	800183c <_sbrk>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_sbrk_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_sbrk_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	2000041c 	.word	0x2000041c

08007014 <memcpy>:
 8007014:	440a      	add	r2, r1
 8007016:	4291      	cmp	r1, r2
 8007018:	f100 33ff 	add.w	r3, r0, #4294967295
 800701c:	d100      	bne.n	8007020 <memcpy+0xc>
 800701e:	4770      	bx	lr
 8007020:	b510      	push	{r4, lr}
 8007022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702a:	4291      	cmp	r1, r2
 800702c:	d1f9      	bne.n	8007022 <memcpy+0xe>
 800702e:	bd10      	pop	{r4, pc}

08007030 <nan>:
 8007030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007038 <nan+0x8>
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	00000000 	.word	0x00000000
 800703c:	7ff80000 	.word	0x7ff80000

08007040 <__assert_func>:
 8007040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007042:	4614      	mov	r4, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4b09      	ldr	r3, [pc, #36]	@ (800706c <__assert_func+0x2c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4605      	mov	r5, r0
 800704c:	68d8      	ldr	r0, [r3, #12]
 800704e:	b14c      	cbz	r4, 8007064 <__assert_func+0x24>
 8007050:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <__assert_func+0x30>)
 8007052:	9100      	str	r1, [sp, #0]
 8007054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007058:	4906      	ldr	r1, [pc, #24]	@ (8007074 <__assert_func+0x34>)
 800705a:	462b      	mov	r3, r5
 800705c:	f000 fba8 	bl	80077b0 <fiprintf>
 8007060:	f000 fbb8 	bl	80077d4 <abort>
 8007064:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <__assert_func+0x38>)
 8007066:	461c      	mov	r4, r3
 8007068:	e7f3      	b.n	8007052 <__assert_func+0x12>
 800706a:	bf00      	nop
 800706c:	20000070 	.word	0x20000070
 8007070:	08007f70 	.word	0x08007f70
 8007074:	08007f7d 	.word	0x08007f7d
 8007078:	08007fab 	.word	0x08007fab

0800707c <_calloc_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	fba1 5402 	umull	r5, r4, r1, r2
 8007082:	b934      	cbnz	r4, 8007092 <_calloc_r+0x16>
 8007084:	4629      	mov	r1, r5
 8007086:	f7fe f9cb 	bl	8005420 <_malloc_r>
 800708a:	4606      	mov	r6, r0
 800708c:	b928      	cbnz	r0, 800709a <_calloc_r+0x1e>
 800708e:	4630      	mov	r0, r6
 8007090:	bd70      	pop	{r4, r5, r6, pc}
 8007092:	220c      	movs	r2, #12
 8007094:	6002      	str	r2, [r0, #0]
 8007096:	2600      	movs	r6, #0
 8007098:	e7f9      	b.n	800708e <_calloc_r+0x12>
 800709a:	462a      	mov	r2, r5
 800709c:	4621      	mov	r1, r4
 800709e:	f7fd fa62 	bl	8004566 <memset>
 80070a2:	e7f4      	b.n	800708e <_calloc_r+0x12>

080070a4 <rshift>:
 80070a4:	6903      	ldr	r3, [r0, #16]
 80070a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070b2:	f100 0414 	add.w	r4, r0, #20
 80070b6:	dd45      	ble.n	8007144 <rshift+0xa0>
 80070b8:	f011 011f 	ands.w	r1, r1, #31
 80070bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070c4:	d10c      	bne.n	80070e0 <rshift+0x3c>
 80070c6:	f100 0710 	add.w	r7, r0, #16
 80070ca:	4629      	mov	r1, r5
 80070cc:	42b1      	cmp	r1, r6
 80070ce:	d334      	bcc.n	800713a <rshift+0x96>
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	1eea      	subs	r2, r5, #3
 80070d6:	4296      	cmp	r6, r2
 80070d8:	bf38      	it	cc
 80070da:	2300      	movcc	r3, #0
 80070dc:	4423      	add	r3, r4
 80070de:	e015      	b.n	800710c <rshift+0x68>
 80070e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070e4:	f1c1 0820 	rsb	r8, r1, #32
 80070e8:	40cf      	lsrs	r7, r1
 80070ea:	f105 0e04 	add.w	lr, r5, #4
 80070ee:	46a1      	mov	r9, r4
 80070f0:	4576      	cmp	r6, lr
 80070f2:	46f4      	mov	ip, lr
 80070f4:	d815      	bhi.n	8007122 <rshift+0x7e>
 80070f6:	1a9a      	subs	r2, r3, r2
 80070f8:	0092      	lsls	r2, r2, #2
 80070fa:	3a04      	subs	r2, #4
 80070fc:	3501      	adds	r5, #1
 80070fe:	42ae      	cmp	r6, r5
 8007100:	bf38      	it	cc
 8007102:	2200      	movcc	r2, #0
 8007104:	18a3      	adds	r3, r4, r2
 8007106:	50a7      	str	r7, [r4, r2]
 8007108:	b107      	cbz	r7, 800710c <rshift+0x68>
 800710a:	3304      	adds	r3, #4
 800710c:	1b1a      	subs	r2, r3, r4
 800710e:	42a3      	cmp	r3, r4
 8007110:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007114:	bf08      	it	eq
 8007116:	2300      	moveq	r3, #0
 8007118:	6102      	str	r2, [r0, #16]
 800711a:	bf08      	it	eq
 800711c:	6143      	streq	r3, [r0, #20]
 800711e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007122:	f8dc c000 	ldr.w	ip, [ip]
 8007126:	fa0c fc08 	lsl.w	ip, ip, r8
 800712a:	ea4c 0707 	orr.w	r7, ip, r7
 800712e:	f849 7b04 	str.w	r7, [r9], #4
 8007132:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007136:	40cf      	lsrs	r7, r1
 8007138:	e7da      	b.n	80070f0 <rshift+0x4c>
 800713a:	f851 cb04 	ldr.w	ip, [r1], #4
 800713e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007142:	e7c3      	b.n	80070cc <rshift+0x28>
 8007144:	4623      	mov	r3, r4
 8007146:	e7e1      	b.n	800710c <rshift+0x68>

08007148 <__hexdig_fun>:
 8007148:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800714c:	2b09      	cmp	r3, #9
 800714e:	d802      	bhi.n	8007156 <__hexdig_fun+0xe>
 8007150:	3820      	subs	r0, #32
 8007152:	b2c0      	uxtb	r0, r0
 8007154:	4770      	bx	lr
 8007156:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800715a:	2b05      	cmp	r3, #5
 800715c:	d801      	bhi.n	8007162 <__hexdig_fun+0x1a>
 800715e:	3847      	subs	r0, #71	@ 0x47
 8007160:	e7f7      	b.n	8007152 <__hexdig_fun+0xa>
 8007162:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007166:	2b05      	cmp	r3, #5
 8007168:	d801      	bhi.n	800716e <__hexdig_fun+0x26>
 800716a:	3827      	subs	r0, #39	@ 0x27
 800716c:	e7f1      	b.n	8007152 <__hexdig_fun+0xa>
 800716e:	2000      	movs	r0, #0
 8007170:	4770      	bx	lr
	...

08007174 <__gethex>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	b085      	sub	sp, #20
 800717a:	468a      	mov	sl, r1
 800717c:	9302      	str	r3, [sp, #8]
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	9001      	str	r0, [sp, #4]
 8007182:	4690      	mov	r8, r2
 8007184:	1c9c      	adds	r4, r3, #2
 8007186:	46a1      	mov	r9, r4
 8007188:	f814 0b01 	ldrb.w	r0, [r4], #1
 800718c:	2830      	cmp	r0, #48	@ 0x30
 800718e:	d0fa      	beq.n	8007186 <__gethex+0x12>
 8007190:	eba9 0303 	sub.w	r3, r9, r3
 8007194:	f1a3 0b02 	sub.w	fp, r3, #2
 8007198:	f7ff ffd6 	bl	8007148 <__hexdig_fun>
 800719c:	4605      	mov	r5, r0
 800719e:	2800      	cmp	r0, #0
 80071a0:	d168      	bne.n	8007274 <__gethex+0x100>
 80071a2:	49a0      	ldr	r1, [pc, #640]	@ (8007424 <__gethex+0x2b0>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	4648      	mov	r0, r9
 80071a8:	f7ff ff12 	bl	8006fd0 <strncmp>
 80071ac:	4607      	mov	r7, r0
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d167      	bne.n	8007282 <__gethex+0x10e>
 80071b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80071b6:	4626      	mov	r6, r4
 80071b8:	f7ff ffc6 	bl	8007148 <__hexdig_fun>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d062      	beq.n	8007286 <__gethex+0x112>
 80071c0:	4623      	mov	r3, r4
 80071c2:	7818      	ldrb	r0, [r3, #0]
 80071c4:	2830      	cmp	r0, #48	@ 0x30
 80071c6:	4699      	mov	r9, r3
 80071c8:	f103 0301 	add.w	r3, r3, #1
 80071cc:	d0f9      	beq.n	80071c2 <__gethex+0x4e>
 80071ce:	f7ff ffbb 	bl	8007148 <__hexdig_fun>
 80071d2:	fab0 f580 	clz	r5, r0
 80071d6:	096d      	lsrs	r5, r5, #5
 80071d8:	f04f 0b01 	mov.w	fp, #1
 80071dc:	464a      	mov	r2, r9
 80071de:	4616      	mov	r6, r2
 80071e0:	3201      	adds	r2, #1
 80071e2:	7830      	ldrb	r0, [r6, #0]
 80071e4:	f7ff ffb0 	bl	8007148 <__hexdig_fun>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d1f8      	bne.n	80071de <__gethex+0x6a>
 80071ec:	498d      	ldr	r1, [pc, #564]	@ (8007424 <__gethex+0x2b0>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff feed 	bl	8006fd0 <strncmp>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d13f      	bne.n	800727a <__gethex+0x106>
 80071fa:	b944      	cbnz	r4, 800720e <__gethex+0x9a>
 80071fc:	1c74      	adds	r4, r6, #1
 80071fe:	4622      	mov	r2, r4
 8007200:	4616      	mov	r6, r2
 8007202:	3201      	adds	r2, #1
 8007204:	7830      	ldrb	r0, [r6, #0]
 8007206:	f7ff ff9f 	bl	8007148 <__hexdig_fun>
 800720a:	2800      	cmp	r0, #0
 800720c:	d1f8      	bne.n	8007200 <__gethex+0x8c>
 800720e:	1ba4      	subs	r4, r4, r6
 8007210:	00a7      	lsls	r7, r4, #2
 8007212:	7833      	ldrb	r3, [r6, #0]
 8007214:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007218:	2b50      	cmp	r3, #80	@ 0x50
 800721a:	d13e      	bne.n	800729a <__gethex+0x126>
 800721c:	7873      	ldrb	r3, [r6, #1]
 800721e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007220:	d033      	beq.n	800728a <__gethex+0x116>
 8007222:	2b2d      	cmp	r3, #45	@ 0x2d
 8007224:	d034      	beq.n	8007290 <__gethex+0x11c>
 8007226:	1c71      	adds	r1, r6, #1
 8007228:	2400      	movs	r4, #0
 800722a:	7808      	ldrb	r0, [r1, #0]
 800722c:	f7ff ff8c 	bl	8007148 <__hexdig_fun>
 8007230:	1e43      	subs	r3, r0, #1
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b18      	cmp	r3, #24
 8007236:	d830      	bhi.n	800729a <__gethex+0x126>
 8007238:	f1a0 0210 	sub.w	r2, r0, #16
 800723c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007240:	f7ff ff82 	bl	8007148 <__hexdig_fun>
 8007244:	f100 3cff 	add.w	ip, r0, #4294967295
 8007248:	fa5f fc8c 	uxtb.w	ip, ip
 800724c:	f1bc 0f18 	cmp.w	ip, #24
 8007250:	f04f 030a 	mov.w	r3, #10
 8007254:	d91e      	bls.n	8007294 <__gethex+0x120>
 8007256:	b104      	cbz	r4, 800725a <__gethex+0xe6>
 8007258:	4252      	negs	r2, r2
 800725a:	4417      	add	r7, r2
 800725c:	f8ca 1000 	str.w	r1, [sl]
 8007260:	b1ed      	cbz	r5, 800729e <__gethex+0x12a>
 8007262:	f1bb 0f00 	cmp.w	fp, #0
 8007266:	bf0c      	ite	eq
 8007268:	2506      	moveq	r5, #6
 800726a:	2500      	movne	r5, #0
 800726c:	4628      	mov	r0, r5
 800726e:	b005      	add	sp, #20
 8007270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007274:	2500      	movs	r5, #0
 8007276:	462c      	mov	r4, r5
 8007278:	e7b0      	b.n	80071dc <__gethex+0x68>
 800727a:	2c00      	cmp	r4, #0
 800727c:	d1c7      	bne.n	800720e <__gethex+0x9a>
 800727e:	4627      	mov	r7, r4
 8007280:	e7c7      	b.n	8007212 <__gethex+0x9e>
 8007282:	464e      	mov	r6, r9
 8007284:	462f      	mov	r7, r5
 8007286:	2501      	movs	r5, #1
 8007288:	e7c3      	b.n	8007212 <__gethex+0x9e>
 800728a:	2400      	movs	r4, #0
 800728c:	1cb1      	adds	r1, r6, #2
 800728e:	e7cc      	b.n	800722a <__gethex+0xb6>
 8007290:	2401      	movs	r4, #1
 8007292:	e7fb      	b.n	800728c <__gethex+0x118>
 8007294:	fb03 0002 	mla	r0, r3, r2, r0
 8007298:	e7ce      	b.n	8007238 <__gethex+0xc4>
 800729a:	4631      	mov	r1, r6
 800729c:	e7de      	b.n	800725c <__gethex+0xe8>
 800729e:	eba6 0309 	sub.w	r3, r6, r9
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4629      	mov	r1, r5
 80072a6:	2b07      	cmp	r3, #7
 80072a8:	dc0a      	bgt.n	80072c0 <__gethex+0x14c>
 80072aa:	9801      	ldr	r0, [sp, #4]
 80072ac:	f7fe f944 	bl	8005538 <_Balloc>
 80072b0:	4604      	mov	r4, r0
 80072b2:	b940      	cbnz	r0, 80072c6 <__gethex+0x152>
 80072b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007428 <__gethex+0x2b4>)
 80072b6:	4602      	mov	r2, r0
 80072b8:	21e4      	movs	r1, #228	@ 0xe4
 80072ba:	485c      	ldr	r0, [pc, #368]	@ (800742c <__gethex+0x2b8>)
 80072bc:	f7ff fec0 	bl	8007040 <__assert_func>
 80072c0:	3101      	adds	r1, #1
 80072c2:	105b      	asrs	r3, r3, #1
 80072c4:	e7ef      	b.n	80072a6 <__gethex+0x132>
 80072c6:	f100 0a14 	add.w	sl, r0, #20
 80072ca:	2300      	movs	r3, #0
 80072cc:	4655      	mov	r5, sl
 80072ce:	469b      	mov	fp, r3
 80072d0:	45b1      	cmp	r9, r6
 80072d2:	d337      	bcc.n	8007344 <__gethex+0x1d0>
 80072d4:	f845 bb04 	str.w	fp, [r5], #4
 80072d8:	eba5 050a 	sub.w	r5, r5, sl
 80072dc:	10ad      	asrs	r5, r5, #2
 80072de:	6125      	str	r5, [r4, #16]
 80072e0:	4658      	mov	r0, fp
 80072e2:	f7fe fa1b 	bl	800571c <__hi0bits>
 80072e6:	016d      	lsls	r5, r5, #5
 80072e8:	f8d8 6000 	ldr.w	r6, [r8]
 80072ec:	1a2d      	subs	r5, r5, r0
 80072ee:	42b5      	cmp	r5, r6
 80072f0:	dd54      	ble.n	800739c <__gethex+0x228>
 80072f2:	1bad      	subs	r5, r5, r6
 80072f4:	4629      	mov	r1, r5
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7fe fda7 	bl	8005e4a <__any_on>
 80072fc:	4681      	mov	r9, r0
 80072fe:	b178      	cbz	r0, 8007320 <__gethex+0x1ac>
 8007300:	1e6b      	subs	r3, r5, #1
 8007302:	1159      	asrs	r1, r3, #5
 8007304:	f003 021f 	and.w	r2, r3, #31
 8007308:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800730c:	f04f 0901 	mov.w	r9, #1
 8007310:	fa09 f202 	lsl.w	r2, r9, r2
 8007314:	420a      	tst	r2, r1
 8007316:	d003      	beq.n	8007320 <__gethex+0x1ac>
 8007318:	454b      	cmp	r3, r9
 800731a:	dc36      	bgt.n	800738a <__gethex+0x216>
 800731c:	f04f 0902 	mov.w	r9, #2
 8007320:	4629      	mov	r1, r5
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff febe 	bl	80070a4 <rshift>
 8007328:	442f      	add	r7, r5
 800732a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800732e:	42bb      	cmp	r3, r7
 8007330:	da42      	bge.n	80073b8 <__gethex+0x244>
 8007332:	9801      	ldr	r0, [sp, #4]
 8007334:	4621      	mov	r1, r4
 8007336:	f7fe f93f 	bl	80055b8 <_Bfree>
 800733a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800733c:	2300      	movs	r3, #0
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	25a3      	movs	r5, #163	@ 0xa3
 8007342:	e793      	b.n	800726c <__gethex+0xf8>
 8007344:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007348:	2a2e      	cmp	r2, #46	@ 0x2e
 800734a:	d012      	beq.n	8007372 <__gethex+0x1fe>
 800734c:	2b20      	cmp	r3, #32
 800734e:	d104      	bne.n	800735a <__gethex+0x1e6>
 8007350:	f845 bb04 	str.w	fp, [r5], #4
 8007354:	f04f 0b00 	mov.w	fp, #0
 8007358:	465b      	mov	r3, fp
 800735a:	7830      	ldrb	r0, [r6, #0]
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	f7ff fef3 	bl	8007148 <__hexdig_fun>
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	f000 000f 	and.w	r0, r0, #15
 8007368:	4098      	lsls	r0, r3
 800736a:	ea4b 0b00 	orr.w	fp, fp, r0
 800736e:	3304      	adds	r3, #4
 8007370:	e7ae      	b.n	80072d0 <__gethex+0x15c>
 8007372:	45b1      	cmp	r9, r6
 8007374:	d8ea      	bhi.n	800734c <__gethex+0x1d8>
 8007376:	492b      	ldr	r1, [pc, #172]	@ (8007424 <__gethex+0x2b0>)
 8007378:	9303      	str	r3, [sp, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff fe27 	bl	8006fd0 <strncmp>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	2800      	cmp	r0, #0
 8007386:	d1e1      	bne.n	800734c <__gethex+0x1d8>
 8007388:	e7a2      	b.n	80072d0 <__gethex+0x15c>
 800738a:	1ea9      	subs	r1, r5, #2
 800738c:	4620      	mov	r0, r4
 800738e:	f7fe fd5c 	bl	8005e4a <__any_on>
 8007392:	2800      	cmp	r0, #0
 8007394:	d0c2      	beq.n	800731c <__gethex+0x1a8>
 8007396:	f04f 0903 	mov.w	r9, #3
 800739a:	e7c1      	b.n	8007320 <__gethex+0x1ac>
 800739c:	da09      	bge.n	80073b2 <__gethex+0x23e>
 800739e:	1b75      	subs	r5, r6, r5
 80073a0:	4621      	mov	r1, r4
 80073a2:	9801      	ldr	r0, [sp, #4]
 80073a4:	462a      	mov	r2, r5
 80073a6:	f7fe fb17 	bl	80059d8 <__lshift>
 80073aa:	1b7f      	subs	r7, r7, r5
 80073ac:	4604      	mov	r4, r0
 80073ae:	f100 0a14 	add.w	sl, r0, #20
 80073b2:	f04f 0900 	mov.w	r9, #0
 80073b6:	e7b8      	b.n	800732a <__gethex+0x1b6>
 80073b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80073bc:	42bd      	cmp	r5, r7
 80073be:	dd6f      	ble.n	80074a0 <__gethex+0x32c>
 80073c0:	1bed      	subs	r5, r5, r7
 80073c2:	42ae      	cmp	r6, r5
 80073c4:	dc34      	bgt.n	8007430 <__gethex+0x2bc>
 80073c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d022      	beq.n	8007414 <__gethex+0x2a0>
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d024      	beq.n	800741c <__gethex+0x2a8>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d115      	bne.n	8007402 <__gethex+0x28e>
 80073d6:	42ae      	cmp	r6, r5
 80073d8:	d113      	bne.n	8007402 <__gethex+0x28e>
 80073da:	2e01      	cmp	r6, #1
 80073dc:	d10b      	bne.n	80073f6 <__gethex+0x282>
 80073de:	9a02      	ldr	r2, [sp, #8]
 80073e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	2301      	movs	r3, #1
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	f8ca 3000 	str.w	r3, [sl]
 80073ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073f0:	2562      	movs	r5, #98	@ 0x62
 80073f2:	601c      	str	r4, [r3, #0]
 80073f4:	e73a      	b.n	800726c <__gethex+0xf8>
 80073f6:	1e71      	subs	r1, r6, #1
 80073f8:	4620      	mov	r0, r4
 80073fa:	f7fe fd26 	bl	8005e4a <__any_on>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d1ed      	bne.n	80073de <__gethex+0x26a>
 8007402:	9801      	ldr	r0, [sp, #4]
 8007404:	4621      	mov	r1, r4
 8007406:	f7fe f8d7 	bl	80055b8 <_Bfree>
 800740a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800740c:	2300      	movs	r3, #0
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	2550      	movs	r5, #80	@ 0x50
 8007412:	e72b      	b.n	800726c <__gethex+0xf8>
 8007414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f3      	bne.n	8007402 <__gethex+0x28e>
 800741a:	e7e0      	b.n	80073de <__gethex+0x26a>
 800741c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1dd      	bne.n	80073de <__gethex+0x26a>
 8007422:	e7ee      	b.n	8007402 <__gethex+0x28e>
 8007424:	08007f55 	.word	0x08007f55
 8007428:	08007eeb 	.word	0x08007eeb
 800742c:	08007fac 	.word	0x08007fac
 8007430:	1e6f      	subs	r7, r5, #1
 8007432:	f1b9 0f00 	cmp.w	r9, #0
 8007436:	d130      	bne.n	800749a <__gethex+0x326>
 8007438:	b127      	cbz	r7, 8007444 <__gethex+0x2d0>
 800743a:	4639      	mov	r1, r7
 800743c:	4620      	mov	r0, r4
 800743e:	f7fe fd04 	bl	8005e4a <__any_on>
 8007442:	4681      	mov	r9, r0
 8007444:	117a      	asrs	r2, r7, #5
 8007446:	2301      	movs	r3, #1
 8007448:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800744c:	f007 071f 	and.w	r7, r7, #31
 8007450:	40bb      	lsls	r3, r7
 8007452:	4213      	tst	r3, r2
 8007454:	4629      	mov	r1, r5
 8007456:	4620      	mov	r0, r4
 8007458:	bf18      	it	ne
 800745a:	f049 0902 	orrne.w	r9, r9, #2
 800745e:	f7ff fe21 	bl	80070a4 <rshift>
 8007462:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007466:	1b76      	subs	r6, r6, r5
 8007468:	2502      	movs	r5, #2
 800746a:	f1b9 0f00 	cmp.w	r9, #0
 800746e:	d047      	beq.n	8007500 <__gethex+0x38c>
 8007470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d015      	beq.n	80074a4 <__gethex+0x330>
 8007478:	2b03      	cmp	r3, #3
 800747a:	d017      	beq.n	80074ac <__gethex+0x338>
 800747c:	2b01      	cmp	r3, #1
 800747e:	d109      	bne.n	8007494 <__gethex+0x320>
 8007480:	f019 0f02 	tst.w	r9, #2
 8007484:	d006      	beq.n	8007494 <__gethex+0x320>
 8007486:	f8da 3000 	ldr.w	r3, [sl]
 800748a:	ea49 0903 	orr.w	r9, r9, r3
 800748e:	f019 0f01 	tst.w	r9, #1
 8007492:	d10e      	bne.n	80074b2 <__gethex+0x33e>
 8007494:	f045 0510 	orr.w	r5, r5, #16
 8007498:	e032      	b.n	8007500 <__gethex+0x38c>
 800749a:	f04f 0901 	mov.w	r9, #1
 800749e:	e7d1      	b.n	8007444 <__gethex+0x2d0>
 80074a0:	2501      	movs	r5, #1
 80074a2:	e7e2      	b.n	800746a <__gethex+0x2f6>
 80074a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074a6:	f1c3 0301 	rsb	r3, r3, #1
 80074aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <__gethex+0x320>
 80074b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074b6:	f104 0314 	add.w	r3, r4, #20
 80074ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80074be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80074c2:	f04f 0c00 	mov.w	ip, #0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074d0:	d01b      	beq.n	800750a <__gethex+0x396>
 80074d2:	3201      	adds	r2, #1
 80074d4:	6002      	str	r2, [r0, #0]
 80074d6:	2d02      	cmp	r5, #2
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	d13c      	bne.n	8007558 <__gethex+0x3e4>
 80074de:	f8d8 2000 	ldr.w	r2, [r8]
 80074e2:	3a01      	subs	r2, #1
 80074e4:	42b2      	cmp	r2, r6
 80074e6:	d109      	bne.n	80074fc <__gethex+0x388>
 80074e8:	1171      	asrs	r1, r6, #5
 80074ea:	2201      	movs	r2, #1
 80074ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074f0:	f006 061f 	and.w	r6, r6, #31
 80074f4:	fa02 f606 	lsl.w	r6, r2, r6
 80074f8:	421e      	tst	r6, r3
 80074fa:	d13a      	bne.n	8007572 <__gethex+0x3fe>
 80074fc:	f045 0520 	orr.w	r5, r5, #32
 8007500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007502:	601c      	str	r4, [r3, #0]
 8007504:	9b02      	ldr	r3, [sp, #8]
 8007506:	601f      	str	r7, [r3, #0]
 8007508:	e6b0      	b.n	800726c <__gethex+0xf8>
 800750a:	4299      	cmp	r1, r3
 800750c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007510:	d8d9      	bhi.n	80074c6 <__gethex+0x352>
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	459b      	cmp	fp, r3
 8007516:	db17      	blt.n	8007548 <__gethex+0x3d4>
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	9801      	ldr	r0, [sp, #4]
 800751c:	3101      	adds	r1, #1
 800751e:	f7fe f80b 	bl	8005538 <_Balloc>
 8007522:	4681      	mov	r9, r0
 8007524:	b918      	cbnz	r0, 800752e <__gethex+0x3ba>
 8007526:	4b1a      	ldr	r3, [pc, #104]	@ (8007590 <__gethex+0x41c>)
 8007528:	4602      	mov	r2, r0
 800752a:	2184      	movs	r1, #132	@ 0x84
 800752c:	e6c5      	b.n	80072ba <__gethex+0x146>
 800752e:	6922      	ldr	r2, [r4, #16]
 8007530:	3202      	adds	r2, #2
 8007532:	f104 010c 	add.w	r1, r4, #12
 8007536:	0092      	lsls	r2, r2, #2
 8007538:	300c      	adds	r0, #12
 800753a:	f7ff fd6b 	bl	8007014 <memcpy>
 800753e:	4621      	mov	r1, r4
 8007540:	9801      	ldr	r0, [sp, #4]
 8007542:	f7fe f839 	bl	80055b8 <_Bfree>
 8007546:	464c      	mov	r4, r9
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007550:	6122      	str	r2, [r4, #16]
 8007552:	2201      	movs	r2, #1
 8007554:	615a      	str	r2, [r3, #20]
 8007556:	e7be      	b.n	80074d6 <__gethex+0x362>
 8007558:	6922      	ldr	r2, [r4, #16]
 800755a:	455a      	cmp	r2, fp
 800755c:	dd0b      	ble.n	8007576 <__gethex+0x402>
 800755e:	2101      	movs	r1, #1
 8007560:	4620      	mov	r0, r4
 8007562:	f7ff fd9f 	bl	80070a4 <rshift>
 8007566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800756a:	3701      	adds	r7, #1
 800756c:	42bb      	cmp	r3, r7
 800756e:	f6ff aee0 	blt.w	8007332 <__gethex+0x1be>
 8007572:	2501      	movs	r5, #1
 8007574:	e7c2      	b.n	80074fc <__gethex+0x388>
 8007576:	f016 061f 	ands.w	r6, r6, #31
 800757a:	d0fa      	beq.n	8007572 <__gethex+0x3fe>
 800757c:	4453      	add	r3, sl
 800757e:	f1c6 0620 	rsb	r6, r6, #32
 8007582:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007586:	f7fe f8c9 	bl	800571c <__hi0bits>
 800758a:	42b0      	cmp	r0, r6
 800758c:	dbe7      	blt.n	800755e <__gethex+0x3ea>
 800758e:	e7f0      	b.n	8007572 <__gethex+0x3fe>
 8007590:	08007eeb 	.word	0x08007eeb

08007594 <L_shift>:
 8007594:	f1c2 0208 	rsb	r2, r2, #8
 8007598:	0092      	lsls	r2, r2, #2
 800759a:	b570      	push	{r4, r5, r6, lr}
 800759c:	f1c2 0620 	rsb	r6, r2, #32
 80075a0:	6843      	ldr	r3, [r0, #4]
 80075a2:	6804      	ldr	r4, [r0, #0]
 80075a4:	fa03 f506 	lsl.w	r5, r3, r6
 80075a8:	432c      	orrs	r4, r5
 80075aa:	40d3      	lsrs	r3, r2
 80075ac:	6004      	str	r4, [r0, #0]
 80075ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80075b2:	4288      	cmp	r0, r1
 80075b4:	d3f4      	bcc.n	80075a0 <L_shift+0xc>
 80075b6:	bd70      	pop	{r4, r5, r6, pc}

080075b8 <__match>:
 80075b8:	b530      	push	{r4, r5, lr}
 80075ba:	6803      	ldr	r3, [r0, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c2:	b914      	cbnz	r4, 80075ca <__match+0x12>
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	2001      	movs	r0, #1
 80075c8:	bd30      	pop	{r4, r5, pc}
 80075ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80075d2:	2d19      	cmp	r5, #25
 80075d4:	bf98      	it	ls
 80075d6:	3220      	addls	r2, #32
 80075d8:	42a2      	cmp	r2, r4
 80075da:	d0f0      	beq.n	80075be <__match+0x6>
 80075dc:	2000      	movs	r0, #0
 80075de:	e7f3      	b.n	80075c8 <__match+0x10>

080075e0 <__hexnan>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	6801      	ldr	r1, [r0, #0]
 80075e8:	115e      	asrs	r6, r3, #5
 80075ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075ee:	f013 031f 	ands.w	r3, r3, #31
 80075f2:	b087      	sub	sp, #28
 80075f4:	bf18      	it	ne
 80075f6:	3604      	addne	r6, #4
 80075f8:	2500      	movs	r5, #0
 80075fa:	1f37      	subs	r7, r6, #4
 80075fc:	4682      	mov	sl, r0
 80075fe:	4690      	mov	r8, r2
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	f846 5c04 	str.w	r5, [r6, #-4]
 8007606:	46b9      	mov	r9, r7
 8007608:	463c      	mov	r4, r7
 800760a:	9502      	str	r5, [sp, #8]
 800760c:	46ab      	mov	fp, r5
 800760e:	784a      	ldrb	r2, [r1, #1]
 8007610:	1c4b      	adds	r3, r1, #1
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	b342      	cbz	r2, 8007668 <__hexnan+0x88>
 8007616:	4610      	mov	r0, r2
 8007618:	9105      	str	r1, [sp, #20]
 800761a:	9204      	str	r2, [sp, #16]
 800761c:	f7ff fd94 	bl	8007148 <__hexdig_fun>
 8007620:	2800      	cmp	r0, #0
 8007622:	d151      	bne.n	80076c8 <__hexnan+0xe8>
 8007624:	9a04      	ldr	r2, [sp, #16]
 8007626:	9905      	ldr	r1, [sp, #20]
 8007628:	2a20      	cmp	r2, #32
 800762a:	d818      	bhi.n	800765e <__hexnan+0x7e>
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	459b      	cmp	fp, r3
 8007630:	dd13      	ble.n	800765a <__hexnan+0x7a>
 8007632:	454c      	cmp	r4, r9
 8007634:	d206      	bcs.n	8007644 <__hexnan+0x64>
 8007636:	2d07      	cmp	r5, #7
 8007638:	dc04      	bgt.n	8007644 <__hexnan+0x64>
 800763a:	462a      	mov	r2, r5
 800763c:	4649      	mov	r1, r9
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff ffa8 	bl	8007594 <L_shift>
 8007644:	4544      	cmp	r4, r8
 8007646:	d952      	bls.n	80076ee <__hexnan+0x10e>
 8007648:	2300      	movs	r3, #0
 800764a:	f1a4 0904 	sub.w	r9, r4, #4
 800764e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007652:	f8cd b008 	str.w	fp, [sp, #8]
 8007656:	464c      	mov	r4, r9
 8007658:	461d      	mov	r5, r3
 800765a:	9903      	ldr	r1, [sp, #12]
 800765c:	e7d7      	b.n	800760e <__hexnan+0x2e>
 800765e:	2a29      	cmp	r2, #41	@ 0x29
 8007660:	d157      	bne.n	8007712 <__hexnan+0x132>
 8007662:	3102      	adds	r1, #2
 8007664:	f8ca 1000 	str.w	r1, [sl]
 8007668:	f1bb 0f00 	cmp.w	fp, #0
 800766c:	d051      	beq.n	8007712 <__hexnan+0x132>
 800766e:	454c      	cmp	r4, r9
 8007670:	d206      	bcs.n	8007680 <__hexnan+0xa0>
 8007672:	2d07      	cmp	r5, #7
 8007674:	dc04      	bgt.n	8007680 <__hexnan+0xa0>
 8007676:	462a      	mov	r2, r5
 8007678:	4649      	mov	r1, r9
 800767a:	4620      	mov	r0, r4
 800767c:	f7ff ff8a 	bl	8007594 <L_shift>
 8007680:	4544      	cmp	r4, r8
 8007682:	d936      	bls.n	80076f2 <__hexnan+0x112>
 8007684:	f1a8 0204 	sub.w	r2, r8, #4
 8007688:	4623      	mov	r3, r4
 800768a:	f853 1b04 	ldr.w	r1, [r3], #4
 800768e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007692:	429f      	cmp	r7, r3
 8007694:	d2f9      	bcs.n	800768a <__hexnan+0xaa>
 8007696:	1b3b      	subs	r3, r7, r4
 8007698:	f023 0303 	bic.w	r3, r3, #3
 800769c:	3304      	adds	r3, #4
 800769e:	3401      	adds	r4, #1
 80076a0:	3e03      	subs	r6, #3
 80076a2:	42b4      	cmp	r4, r6
 80076a4:	bf88      	it	hi
 80076a6:	2304      	movhi	r3, #4
 80076a8:	4443      	add	r3, r8
 80076aa:	2200      	movs	r2, #0
 80076ac:	f843 2b04 	str.w	r2, [r3], #4
 80076b0:	429f      	cmp	r7, r3
 80076b2:	d2fb      	bcs.n	80076ac <__hexnan+0xcc>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	b91b      	cbnz	r3, 80076c0 <__hexnan+0xe0>
 80076b8:	4547      	cmp	r7, r8
 80076ba:	d128      	bne.n	800770e <__hexnan+0x12e>
 80076bc:	2301      	movs	r3, #1
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	2005      	movs	r0, #5
 80076c2:	b007      	add	sp, #28
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	3501      	adds	r5, #1
 80076ca:	2d08      	cmp	r5, #8
 80076cc:	f10b 0b01 	add.w	fp, fp, #1
 80076d0:	dd06      	ble.n	80076e0 <__hexnan+0x100>
 80076d2:	4544      	cmp	r4, r8
 80076d4:	d9c1      	bls.n	800765a <__hexnan+0x7a>
 80076d6:	2300      	movs	r3, #0
 80076d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80076dc:	2501      	movs	r5, #1
 80076de:	3c04      	subs	r4, #4
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	f000 000f 	and.w	r0, r0, #15
 80076e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	e7b5      	b.n	800765a <__hexnan+0x7a>
 80076ee:	2508      	movs	r5, #8
 80076f0:	e7b3      	b.n	800765a <__hexnan+0x7a>
 80076f2:	9b01      	ldr	r3, [sp, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0dd      	beq.n	80076b4 <__hexnan+0xd4>
 80076f8:	f1c3 0320 	rsb	r3, r3, #32
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007700:	40da      	lsrs	r2, r3
 8007702:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007706:	4013      	ands	r3, r2
 8007708:	f846 3c04 	str.w	r3, [r6, #-4]
 800770c:	e7d2      	b.n	80076b4 <__hexnan+0xd4>
 800770e:	3f04      	subs	r7, #4
 8007710:	e7d0      	b.n	80076b4 <__hexnan+0xd4>
 8007712:	2004      	movs	r0, #4
 8007714:	e7d5      	b.n	80076c2 <__hexnan+0xe2>

08007716 <__ascii_mbtowc>:
 8007716:	b082      	sub	sp, #8
 8007718:	b901      	cbnz	r1, 800771c <__ascii_mbtowc+0x6>
 800771a:	a901      	add	r1, sp, #4
 800771c:	b142      	cbz	r2, 8007730 <__ascii_mbtowc+0x1a>
 800771e:	b14b      	cbz	r3, 8007734 <__ascii_mbtowc+0x1e>
 8007720:	7813      	ldrb	r3, [r2, #0]
 8007722:	600b      	str	r3, [r1, #0]
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	1e10      	subs	r0, r2, #0
 8007728:	bf18      	it	ne
 800772a:	2001      	movne	r0, #1
 800772c:	b002      	add	sp, #8
 800772e:	4770      	bx	lr
 8007730:	4610      	mov	r0, r2
 8007732:	e7fb      	b.n	800772c <__ascii_mbtowc+0x16>
 8007734:	f06f 0001 	mvn.w	r0, #1
 8007738:	e7f8      	b.n	800772c <__ascii_mbtowc+0x16>

0800773a <_realloc_r>:
 800773a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773e:	4607      	mov	r7, r0
 8007740:	4614      	mov	r4, r2
 8007742:	460d      	mov	r5, r1
 8007744:	b921      	cbnz	r1, 8007750 <_realloc_r+0x16>
 8007746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	4611      	mov	r1, r2
 800774c:	f7fd be68 	b.w	8005420 <_malloc_r>
 8007750:	b92a      	cbnz	r2, 800775e <_realloc_r+0x24>
 8007752:	f7fd fdf1 	bl	8005338 <_free_r>
 8007756:	4625      	mov	r5, r4
 8007758:	4628      	mov	r0, r5
 800775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775e:	f000 f840 	bl	80077e2 <_malloc_usable_size_r>
 8007762:	4284      	cmp	r4, r0
 8007764:	4606      	mov	r6, r0
 8007766:	d802      	bhi.n	800776e <_realloc_r+0x34>
 8007768:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800776c:	d8f4      	bhi.n	8007758 <_realloc_r+0x1e>
 800776e:	4621      	mov	r1, r4
 8007770:	4638      	mov	r0, r7
 8007772:	f7fd fe55 	bl	8005420 <_malloc_r>
 8007776:	4680      	mov	r8, r0
 8007778:	b908      	cbnz	r0, 800777e <_realloc_r+0x44>
 800777a:	4645      	mov	r5, r8
 800777c:	e7ec      	b.n	8007758 <_realloc_r+0x1e>
 800777e:	42b4      	cmp	r4, r6
 8007780:	4622      	mov	r2, r4
 8007782:	4629      	mov	r1, r5
 8007784:	bf28      	it	cs
 8007786:	4632      	movcs	r2, r6
 8007788:	f7ff fc44 	bl	8007014 <memcpy>
 800778c:	4629      	mov	r1, r5
 800778e:	4638      	mov	r0, r7
 8007790:	f7fd fdd2 	bl	8005338 <_free_r>
 8007794:	e7f1      	b.n	800777a <_realloc_r+0x40>

08007796 <__ascii_wctomb>:
 8007796:	4603      	mov	r3, r0
 8007798:	4608      	mov	r0, r1
 800779a:	b141      	cbz	r1, 80077ae <__ascii_wctomb+0x18>
 800779c:	2aff      	cmp	r2, #255	@ 0xff
 800779e:	d904      	bls.n	80077aa <__ascii_wctomb+0x14>
 80077a0:	228a      	movs	r2, #138	@ 0x8a
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	4770      	bx	lr
 80077aa:	700a      	strb	r2, [r1, #0]
 80077ac:	2001      	movs	r0, #1
 80077ae:	4770      	bx	lr

080077b0 <fiprintf>:
 80077b0:	b40e      	push	{r1, r2, r3}
 80077b2:	b503      	push	{r0, r1, lr}
 80077b4:	4601      	mov	r1, r0
 80077b6:	ab03      	add	r3, sp, #12
 80077b8:	4805      	ldr	r0, [pc, #20]	@ (80077d0 <fiprintf+0x20>)
 80077ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80077be:	6800      	ldr	r0, [r0, #0]
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f000 f83f 	bl	8007844 <_vfiprintf_r>
 80077c6:	b002      	add	sp, #8
 80077c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077cc:	b003      	add	sp, #12
 80077ce:	4770      	bx	lr
 80077d0:	20000070 	.word	0x20000070

080077d4 <abort>:
 80077d4:	b508      	push	{r3, lr}
 80077d6:	2006      	movs	r0, #6
 80077d8:	f000 fa08 	bl	8007bec <raise>
 80077dc:	2001      	movs	r0, #1
 80077de:	f7f9 ffb4 	bl	800174a <_exit>

080077e2 <_malloc_usable_size_r>:
 80077e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e6:	1f18      	subs	r0, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbc      	itt	lt
 80077ec:	580b      	ldrlt	r3, [r1, r0]
 80077ee:	18c0      	addlt	r0, r0, r3
 80077f0:	4770      	bx	lr

080077f2 <__sfputc_r>:
 80077f2:	6893      	ldr	r3, [r2, #8]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	b410      	push	{r4}
 80077fa:	6093      	str	r3, [r2, #8]
 80077fc:	da08      	bge.n	8007810 <__sfputc_r+0x1e>
 80077fe:	6994      	ldr	r4, [r2, #24]
 8007800:	42a3      	cmp	r3, r4
 8007802:	db01      	blt.n	8007808 <__sfputc_r+0x16>
 8007804:	290a      	cmp	r1, #10
 8007806:	d103      	bne.n	8007810 <__sfputc_r+0x1e>
 8007808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800780c:	f000 b932 	b.w	8007a74 <__swbuf_r>
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	1c58      	adds	r0, r3, #1
 8007814:	6010      	str	r0, [r2, #0]
 8007816:	7019      	strb	r1, [r3, #0]
 8007818:	4608      	mov	r0, r1
 800781a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781e:	4770      	bx	lr

08007820 <__sfputs_r>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	4606      	mov	r6, r0
 8007824:	460f      	mov	r7, r1
 8007826:	4614      	mov	r4, r2
 8007828:	18d5      	adds	r5, r2, r3
 800782a:	42ac      	cmp	r4, r5
 800782c:	d101      	bne.n	8007832 <__sfputs_r+0x12>
 800782e:	2000      	movs	r0, #0
 8007830:	e007      	b.n	8007842 <__sfputs_r+0x22>
 8007832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007836:	463a      	mov	r2, r7
 8007838:	4630      	mov	r0, r6
 800783a:	f7ff ffda 	bl	80077f2 <__sfputc_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d1f3      	bne.n	800782a <__sfputs_r+0xa>
 8007842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007844 <_vfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	460d      	mov	r5, r1
 800784a:	b09d      	sub	sp, #116	@ 0x74
 800784c:	4614      	mov	r4, r2
 800784e:	4698      	mov	r8, r3
 8007850:	4606      	mov	r6, r0
 8007852:	b118      	cbz	r0, 800785c <_vfiprintf_r+0x18>
 8007854:	6a03      	ldr	r3, [r0, #32]
 8007856:	b90b      	cbnz	r3, 800785c <_vfiprintf_r+0x18>
 8007858:	f7fc fdea 	bl	8004430 <__sinit>
 800785c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800785e:	07d9      	lsls	r1, r3, #31
 8007860:	d405      	bmi.n	800786e <_vfiprintf_r+0x2a>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	059a      	lsls	r2, r3, #22
 8007866:	d402      	bmi.n	800786e <_vfiprintf_r+0x2a>
 8007868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800786a:	f7fc fefa 	bl	8004662 <__retarget_lock_acquire_recursive>
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	071b      	lsls	r3, r3, #28
 8007872:	d501      	bpl.n	8007878 <_vfiprintf_r+0x34>
 8007874:	692b      	ldr	r3, [r5, #16]
 8007876:	b99b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x5c>
 8007878:	4629      	mov	r1, r5
 800787a:	4630      	mov	r0, r6
 800787c:	f000 f938 	bl	8007af0 <__swsetup_r>
 8007880:	b170      	cbz	r0, 80078a0 <_vfiprintf_r+0x5c>
 8007882:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007884:	07dc      	lsls	r4, r3, #31
 8007886:	d504      	bpl.n	8007892 <_vfiprintf_r+0x4e>
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	b01d      	add	sp, #116	@ 0x74
 800788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	0598      	lsls	r0, r3, #22
 8007896:	d4f7      	bmi.n	8007888 <_vfiprintf_r+0x44>
 8007898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800789a:	f7fc fee3 	bl	8004664 <__retarget_lock_release_recursive>
 800789e:	e7f3      	b.n	8007888 <_vfiprintf_r+0x44>
 80078a0:	2300      	movs	r3, #0
 80078a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078a4:	2320      	movs	r3, #32
 80078a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ae:	2330      	movs	r3, #48	@ 0x30
 80078b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a60 <_vfiprintf_r+0x21c>
 80078b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078b8:	f04f 0901 	mov.w	r9, #1
 80078bc:	4623      	mov	r3, r4
 80078be:	469a      	mov	sl, r3
 80078c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c4:	b10a      	cbz	r2, 80078ca <_vfiprintf_r+0x86>
 80078c6:	2a25      	cmp	r2, #37	@ 0x25
 80078c8:	d1f9      	bne.n	80078be <_vfiprintf_r+0x7a>
 80078ca:	ebba 0b04 	subs.w	fp, sl, r4
 80078ce:	d00b      	beq.n	80078e8 <_vfiprintf_r+0xa4>
 80078d0:	465b      	mov	r3, fp
 80078d2:	4622      	mov	r2, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff ffa2 	bl	8007820 <__sfputs_r>
 80078dc:	3001      	adds	r0, #1
 80078de:	f000 80a7 	beq.w	8007a30 <_vfiprintf_r+0x1ec>
 80078e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e4:	445a      	add	r2, fp
 80078e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80078e8:	f89a 3000 	ldrb.w	r3, [sl]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 809f 	beq.w	8007a30 <_vfiprintf_r+0x1ec>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295
 80078f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078fc:	f10a 0a01 	add.w	sl, sl, #1
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	9307      	str	r3, [sp, #28]
 8007904:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007908:	931a      	str	r3, [sp, #104]	@ 0x68
 800790a:	4654      	mov	r4, sl
 800790c:	2205      	movs	r2, #5
 800790e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007912:	4853      	ldr	r0, [pc, #332]	@ (8007a60 <_vfiprintf_r+0x21c>)
 8007914:	f7f8 fc64 	bl	80001e0 <memchr>
 8007918:	9a04      	ldr	r2, [sp, #16]
 800791a:	b9d8      	cbnz	r0, 8007954 <_vfiprintf_r+0x110>
 800791c:	06d1      	lsls	r1, r2, #27
 800791e:	bf44      	itt	mi
 8007920:	2320      	movmi	r3, #32
 8007922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007926:	0713      	lsls	r3, r2, #28
 8007928:	bf44      	itt	mi
 800792a:	232b      	movmi	r3, #43	@ 0x2b
 800792c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007930:	f89a 3000 	ldrb.w	r3, [sl]
 8007934:	2b2a      	cmp	r3, #42	@ 0x2a
 8007936:	d015      	beq.n	8007964 <_vfiprintf_r+0x120>
 8007938:	9a07      	ldr	r2, [sp, #28]
 800793a:	4654      	mov	r4, sl
 800793c:	2000      	movs	r0, #0
 800793e:	f04f 0c0a 	mov.w	ip, #10
 8007942:	4621      	mov	r1, r4
 8007944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007948:	3b30      	subs	r3, #48	@ 0x30
 800794a:	2b09      	cmp	r3, #9
 800794c:	d94b      	bls.n	80079e6 <_vfiprintf_r+0x1a2>
 800794e:	b1b0      	cbz	r0, 800797e <_vfiprintf_r+0x13a>
 8007950:	9207      	str	r2, [sp, #28]
 8007952:	e014      	b.n	800797e <_vfiprintf_r+0x13a>
 8007954:	eba0 0308 	sub.w	r3, r0, r8
 8007958:	fa09 f303 	lsl.w	r3, r9, r3
 800795c:	4313      	orrs	r3, r2
 800795e:	9304      	str	r3, [sp, #16]
 8007960:	46a2      	mov	sl, r4
 8007962:	e7d2      	b.n	800790a <_vfiprintf_r+0xc6>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	1d19      	adds	r1, r3, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	9103      	str	r1, [sp, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	bfbb      	ittet	lt
 8007970:	425b      	neglt	r3, r3
 8007972:	f042 0202 	orrlt.w	r2, r2, #2
 8007976:	9307      	strge	r3, [sp, #28]
 8007978:	9307      	strlt	r3, [sp, #28]
 800797a:	bfb8      	it	lt
 800797c:	9204      	strlt	r2, [sp, #16]
 800797e:	7823      	ldrb	r3, [r4, #0]
 8007980:	2b2e      	cmp	r3, #46	@ 0x2e
 8007982:	d10a      	bne.n	800799a <_vfiprintf_r+0x156>
 8007984:	7863      	ldrb	r3, [r4, #1]
 8007986:	2b2a      	cmp	r3, #42	@ 0x2a
 8007988:	d132      	bne.n	80079f0 <_vfiprintf_r+0x1ac>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	1d1a      	adds	r2, r3, #4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	9203      	str	r2, [sp, #12]
 8007992:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007996:	3402      	adds	r4, #2
 8007998:	9305      	str	r3, [sp, #20]
 800799a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a70 <_vfiprintf_r+0x22c>
 800799e:	7821      	ldrb	r1, [r4, #0]
 80079a0:	2203      	movs	r2, #3
 80079a2:	4650      	mov	r0, sl
 80079a4:	f7f8 fc1c 	bl	80001e0 <memchr>
 80079a8:	b138      	cbz	r0, 80079ba <_vfiprintf_r+0x176>
 80079aa:	9b04      	ldr	r3, [sp, #16]
 80079ac:	eba0 000a 	sub.w	r0, r0, sl
 80079b0:	2240      	movs	r2, #64	@ 0x40
 80079b2:	4082      	lsls	r2, r0
 80079b4:	4313      	orrs	r3, r2
 80079b6:	3401      	adds	r4, #1
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079be:	4829      	ldr	r0, [pc, #164]	@ (8007a64 <_vfiprintf_r+0x220>)
 80079c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079c4:	2206      	movs	r2, #6
 80079c6:	f7f8 fc0b 	bl	80001e0 <memchr>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d03f      	beq.n	8007a4e <_vfiprintf_r+0x20a>
 80079ce:	4b26      	ldr	r3, [pc, #152]	@ (8007a68 <_vfiprintf_r+0x224>)
 80079d0:	bb1b      	cbnz	r3, 8007a1a <_vfiprintf_r+0x1d6>
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	3307      	adds	r3, #7
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	3308      	adds	r3, #8
 80079dc:	9303      	str	r3, [sp, #12]
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	443b      	add	r3, r7
 80079e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e4:	e76a      	b.n	80078bc <_vfiprintf_r+0x78>
 80079e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ea:	460c      	mov	r4, r1
 80079ec:	2001      	movs	r0, #1
 80079ee:	e7a8      	b.n	8007942 <_vfiprintf_r+0xfe>
 80079f0:	2300      	movs	r3, #0
 80079f2:	3401      	adds	r4, #1
 80079f4:	9305      	str	r3, [sp, #20]
 80079f6:	4619      	mov	r1, r3
 80079f8:	f04f 0c0a 	mov.w	ip, #10
 80079fc:	4620      	mov	r0, r4
 80079fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a02:	3a30      	subs	r2, #48	@ 0x30
 8007a04:	2a09      	cmp	r2, #9
 8007a06:	d903      	bls.n	8007a10 <_vfiprintf_r+0x1cc>
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0c6      	beq.n	800799a <_vfiprintf_r+0x156>
 8007a0c:	9105      	str	r1, [sp, #20]
 8007a0e:	e7c4      	b.n	800799a <_vfiprintf_r+0x156>
 8007a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a14:	4604      	mov	r4, r0
 8007a16:	2301      	movs	r3, #1
 8007a18:	e7f0      	b.n	80079fc <_vfiprintf_r+0x1b8>
 8007a1a:	ab03      	add	r3, sp, #12
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <_vfiprintf_r+0x228>)
 8007a22:	a904      	add	r1, sp, #16
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7fb feb3 	bl	8003790 <_printf_float>
 8007a2a:	4607      	mov	r7, r0
 8007a2c:	1c78      	adds	r0, r7, #1
 8007a2e:	d1d6      	bne.n	80079de <_vfiprintf_r+0x19a>
 8007a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a32:	07d9      	lsls	r1, r3, #31
 8007a34:	d405      	bmi.n	8007a42 <_vfiprintf_r+0x1fe>
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	059a      	lsls	r2, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <_vfiprintf_r+0x1fe>
 8007a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a3e:	f7fc fe11 	bl	8004664 <__retarget_lock_release_recursive>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	065b      	lsls	r3, r3, #25
 8007a46:	f53f af1f 	bmi.w	8007888 <_vfiprintf_r+0x44>
 8007a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a4c:	e71e      	b.n	800788c <_vfiprintf_r+0x48>
 8007a4e:	ab03      	add	r3, sp, #12
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	462a      	mov	r2, r5
 8007a54:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <_vfiprintf_r+0x228>)
 8007a56:	a904      	add	r1, sp, #16
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7fc f931 	bl	8003cc0 <_printf_i>
 8007a5e:	e7e4      	b.n	8007a2a <_vfiprintf_r+0x1e6>
 8007a60:	08007f57 	.word	0x08007f57
 8007a64:	08007f61 	.word	0x08007f61
 8007a68:	08003791 	.word	0x08003791
 8007a6c:	08007821 	.word	0x08007821
 8007a70:	08007f5d 	.word	0x08007f5d

08007a74 <__swbuf_r>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	460e      	mov	r6, r1
 8007a78:	4614      	mov	r4, r2
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	b118      	cbz	r0, 8007a86 <__swbuf_r+0x12>
 8007a7e:	6a03      	ldr	r3, [r0, #32]
 8007a80:	b90b      	cbnz	r3, 8007a86 <__swbuf_r+0x12>
 8007a82:	f7fc fcd5 	bl	8004430 <__sinit>
 8007a86:	69a3      	ldr	r3, [r4, #24]
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	071a      	lsls	r2, r3, #28
 8007a8e:	d501      	bpl.n	8007a94 <__swbuf_r+0x20>
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	b943      	cbnz	r3, 8007aa6 <__swbuf_r+0x32>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 f82a 	bl	8007af0 <__swsetup_r>
 8007a9c:	b118      	cbz	r0, 8007aa6 <__swbuf_r+0x32>
 8007a9e:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	6922      	ldr	r2, [r4, #16]
 8007aaa:	1a98      	subs	r0, r3, r2
 8007aac:	6963      	ldr	r3, [r4, #20]
 8007aae:	b2f6      	uxtb	r6, r6
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	4637      	mov	r7, r6
 8007ab4:	dc05      	bgt.n	8007ac2 <__swbuf_r+0x4e>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f7ff fa47 	bl	8006f4c <_fflush_r>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d1ed      	bne.n	8007a9e <__swbuf_r+0x2a>
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	60a3      	str	r3, [r4, #8]
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	6022      	str	r2, [r4, #0]
 8007ace:	701e      	strb	r6, [r3, #0]
 8007ad0:	6962      	ldr	r2, [r4, #20]
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d004      	beq.n	8007ae2 <__swbuf_r+0x6e>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	07db      	lsls	r3, r3, #31
 8007adc:	d5e1      	bpl.n	8007aa2 <__swbuf_r+0x2e>
 8007ade:	2e0a      	cmp	r6, #10
 8007ae0:	d1df      	bne.n	8007aa2 <__swbuf_r+0x2e>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7ff fa31 	bl	8006f4c <_fflush_r>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d0d9      	beq.n	8007aa2 <__swbuf_r+0x2e>
 8007aee:	e7d6      	b.n	8007a9e <__swbuf_r+0x2a>

08007af0 <__swsetup_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4b29      	ldr	r3, [pc, #164]	@ (8007b98 <__swsetup_r+0xa8>)
 8007af4:	4605      	mov	r5, r0
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	460c      	mov	r4, r1
 8007afa:	b118      	cbz	r0, 8007b04 <__swsetup_r+0x14>
 8007afc:	6a03      	ldr	r3, [r0, #32]
 8007afe:	b90b      	cbnz	r3, 8007b04 <__swsetup_r+0x14>
 8007b00:	f7fc fc96 	bl	8004430 <__sinit>
 8007b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b08:	0719      	lsls	r1, r3, #28
 8007b0a:	d422      	bmi.n	8007b52 <__swsetup_r+0x62>
 8007b0c:	06da      	lsls	r2, r3, #27
 8007b0e:	d407      	bmi.n	8007b20 <__swsetup_r+0x30>
 8007b10:	2209      	movs	r2, #9
 8007b12:	602a      	str	r2, [r5, #0]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	e033      	b.n	8007b88 <__swsetup_r+0x98>
 8007b20:	0758      	lsls	r0, r3, #29
 8007b22:	d512      	bpl.n	8007b4a <__swsetup_r+0x5a>
 8007b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b26:	b141      	cbz	r1, 8007b3a <__swsetup_r+0x4a>
 8007b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__swsetup_r+0x46>
 8007b30:	4628      	mov	r0, r5
 8007b32:	f7fd fc01 	bl	8005338 <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b94b      	cbnz	r3, 8007b6a <__swsetup_r+0x7a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b60:	d003      	beq.n	8007b6a <__swsetup_r+0x7a>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4628      	mov	r0, r5
 8007b66:	f000 f883 	bl	8007c70 <__smakebuf_r>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	f013 0201 	ands.w	r2, r3, #1
 8007b72:	d00a      	beq.n	8007b8a <__swsetup_r+0x9a>
 8007b74:	2200      	movs	r2, #0
 8007b76:	60a2      	str	r2, [r4, #8]
 8007b78:	6962      	ldr	r2, [r4, #20]
 8007b7a:	4252      	negs	r2, r2
 8007b7c:	61a2      	str	r2, [r4, #24]
 8007b7e:	6922      	ldr	r2, [r4, #16]
 8007b80:	b942      	cbnz	r2, 8007b94 <__swsetup_r+0xa4>
 8007b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b86:	d1c5      	bne.n	8007b14 <__swsetup_r+0x24>
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	0799      	lsls	r1, r3, #30
 8007b8c:	bf58      	it	pl
 8007b8e:	6962      	ldrpl	r2, [r4, #20]
 8007b90:	60a2      	str	r2, [r4, #8]
 8007b92:	e7f4      	b.n	8007b7e <__swsetup_r+0x8e>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e7f7      	b.n	8007b88 <__swsetup_r+0x98>
 8007b98:	20000070 	.word	0x20000070

08007b9c <_raise_r>:
 8007b9c:	291f      	cmp	r1, #31
 8007b9e:	b538      	push	{r3, r4, r5, lr}
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	d904      	bls.n	8007bb0 <_raise_r+0x14>
 8007ba6:	2316      	movs	r3, #22
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bb2:	b112      	cbz	r2, 8007bba <_raise_r+0x1e>
 8007bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bb8:	b94b      	cbnz	r3, 8007bce <_raise_r+0x32>
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 f830 	bl	8007c20 <_getpid_r>
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bca:	f000 b817 	b.w	8007bfc <_kill_r>
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d00a      	beq.n	8007be8 <_raise_r+0x4c>
 8007bd2:	1c59      	adds	r1, r3, #1
 8007bd4:	d103      	bne.n	8007bde <_raise_r+0x42>
 8007bd6:	2316      	movs	r3, #22
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	2001      	movs	r0, #1
 8007bdc:	e7e7      	b.n	8007bae <_raise_r+0x12>
 8007bde:	2100      	movs	r1, #0
 8007be0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007be4:	4620      	mov	r0, r4
 8007be6:	4798      	blx	r3
 8007be8:	2000      	movs	r0, #0
 8007bea:	e7e0      	b.n	8007bae <_raise_r+0x12>

08007bec <raise>:
 8007bec:	4b02      	ldr	r3, [pc, #8]	@ (8007bf8 <raise+0xc>)
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f7ff bfd3 	b.w	8007b9c <_raise_r>
 8007bf6:	bf00      	nop
 8007bf8:	20000070 	.word	0x20000070

08007bfc <_kill_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d07      	ldr	r5, [pc, #28]	@ (8007c1c <_kill_r+0x20>)
 8007c00:	2300      	movs	r3, #0
 8007c02:	4604      	mov	r4, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	f7f9 fd8e 	bl	800172a <_kill>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d102      	bne.n	8007c18 <_kill_r+0x1c>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	b103      	cbz	r3, 8007c18 <_kill_r+0x1c>
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	bd38      	pop	{r3, r4, r5, pc}
 8007c1a:	bf00      	nop
 8007c1c:	2000041c 	.word	0x2000041c

08007c20 <_getpid_r>:
 8007c20:	f7f9 bd7b 	b.w	800171a <_getpid>

08007c24 <__swhatbuf_r>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	460c      	mov	r4, r1
 8007c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	b096      	sub	sp, #88	@ 0x58
 8007c30:	4615      	mov	r5, r2
 8007c32:	461e      	mov	r6, r3
 8007c34:	da0d      	bge.n	8007c52 <__swhatbuf_r+0x2e>
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c3c:	f04f 0100 	mov.w	r1, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2340      	movne	r3, #64	@ 0x40
 8007c44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c48:	2000      	movs	r0, #0
 8007c4a:	6031      	str	r1, [r6, #0]
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	b016      	add	sp, #88	@ 0x58
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	466a      	mov	r2, sp
 8007c54:	f000 f848 	bl	8007ce8 <_fstat_r>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	dbec      	blt.n	8007c36 <__swhatbuf_r+0x12>
 8007c5c:	9901      	ldr	r1, [sp, #4]
 8007c5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c66:	4259      	negs	r1, r3
 8007c68:	4159      	adcs	r1, r3
 8007c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c6e:	e7eb      	b.n	8007c48 <__swhatbuf_r+0x24>

08007c70 <__smakebuf_r>:
 8007c70:	898b      	ldrh	r3, [r1, #12]
 8007c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c74:	079d      	lsls	r5, r3, #30
 8007c76:	4606      	mov	r6, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	d507      	bpl.n	8007c8c <__smakebuf_r+0x1c>
 8007c7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	2301      	movs	r3, #1
 8007c86:	6163      	str	r3, [r4, #20]
 8007c88:	b003      	add	sp, #12
 8007c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8c:	ab01      	add	r3, sp, #4
 8007c8e:	466a      	mov	r2, sp
 8007c90:	f7ff ffc8 	bl	8007c24 <__swhatbuf_r>
 8007c94:	9f00      	ldr	r7, [sp, #0]
 8007c96:	4605      	mov	r5, r0
 8007c98:	4639      	mov	r1, r7
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7fd fbc0 	bl	8005420 <_malloc_r>
 8007ca0:	b948      	cbnz	r0, 8007cb6 <__smakebuf_r+0x46>
 8007ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca6:	059a      	lsls	r2, r3, #22
 8007ca8:	d4ee      	bmi.n	8007c88 <__smakebuf_r+0x18>
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	f043 0302 	orr.w	r3, r3, #2
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	e7e2      	b.n	8007c7c <__smakebuf_r+0xc>
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	6020      	str	r0, [r4, #0]
 8007cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	9b01      	ldr	r3, [sp, #4]
 8007cc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007cc6:	b15b      	cbz	r3, 8007ce0 <__smakebuf_r+0x70>
 8007cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f000 f81d 	bl	8007d0c <_isatty_r>
 8007cd2:	b128      	cbz	r0, 8007ce0 <__smakebuf_r+0x70>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	81a3      	strh	r3, [r4, #12]
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	431d      	orrs	r5, r3
 8007ce4:	81a5      	strh	r5, [r4, #12]
 8007ce6:	e7cf      	b.n	8007c88 <__smakebuf_r+0x18>

08007ce8 <_fstat_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d07      	ldr	r5, [pc, #28]	@ (8007d08 <_fstat_r+0x20>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	f7f9 fd78 	bl	80017ea <_fstat>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d102      	bne.n	8007d04 <_fstat_r+0x1c>
 8007cfe:	682b      	ldr	r3, [r5, #0]
 8007d00:	b103      	cbz	r3, 8007d04 <_fstat_r+0x1c>
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	bf00      	nop
 8007d08:	2000041c 	.word	0x2000041c

08007d0c <_isatty_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d06      	ldr	r5, [pc, #24]	@ (8007d28 <_isatty_r+0x1c>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	f7f9 fd77 	bl	800180a <_isatty>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_isatty_r+0x1a>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_isatty_r+0x1a>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	2000041c 	.word	0x2000041c

08007d2c <_init>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	bf00      	nop
 8007d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d32:	bc08      	pop	{r3}
 8007d34:	469e      	mov	lr, r3
 8007d36:	4770      	bx	lr

08007d38 <_fini>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr
