
STM32F401_UART_LCD1602_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  08009f88  08009f88  0000af88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b4  0800a9b4  0000c238  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9b4  0800a9b4  0000b9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9bc  0800a9bc  0000c238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9bc  0800a9bc  0000b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9c0  0800a9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800a9c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000238  0800abfc  0000c238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800abfc  0000c4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001221c  00000000  00000000  0000c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a34  00000000  00000000  0001e484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e33  00000000  00000000  000220f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018725  00000000  00000000  00022f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f45  00000000  00000000  0003b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b9c  00000000  00000000  00050595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000622c  00000000  00000000  000e3174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000e93a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f6c 	.word	0x08009f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08009f6c 	.word	0x08009f6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <GetUartHandler>:
    {.name = "CommonTest",         .command.command0 = TestsLCD1602,           .command_type = COMMAND_TYPE_0}
};

// Get UART Handle Type pointer
static UART_HandleTypeDef * GetUartHandler()
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    return s_uart_handler;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <GetUartHandler+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000254 	.word	0x20000254

08001068 <SetUartHandler>:

// Set UART Handle Type pointer
static void SetUartHandler(UART_HandleTypeDef * uart_handler)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    s_uart_handler = uart_handler;
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <SetUartHandler+0x1c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000254 	.word	0x20000254

08001088 <ShowHelp>:

// Send a list of supported commands to show them on terminal related with UART channel
static HAL_StatusTypeDef ShowHelp()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 800108e:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	f887 327e 	strb.w	r3, [r7, #638]	@ 0x27e
    char command_name[30];
    char commands_list[30*COMMANDS_COUNT];
    commands_list[0] = 0;
 8001096:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800109a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
    UART_HandleTypeDef * uart_handle_type_def = GetUartHandler();
 80010a2:	f7ff ffd5 	bl	8001050 <GetUartHandler>
 80010a6:	f8c7 0278 	str.w	r0, [r7, #632]	@ 0x278

    if ((status = UartSendString(uart_handle_type_def, HELP, strlen(HELP), HAL_MAX_DELAY)) != HAL_OK)
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	221f      	movs	r2, #31
 80010b0:	4927      	ldr	r1, [pc, #156]	@ (8001150 <ShowHelp+0xc8>)
 80010b2:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80010b6:	f004 fb2b 	bl	8005710 <UartSendString>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 327e 	strb.w	r3, [r7, #638]	@ 0x27e
 80010c0:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <ShowHelp+0x46>
    {
        return status;
 80010c8:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
 80010cc:	e03a      	b.n	8001144 <ShowHelp+0xbc>
    }

    for (uint8_t i = 0; i < COMMANDS_COUNT; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
 80010d4:	e019      	b.n	800110a <ShowHelp+0x82>
    {
        sprintf(command_name, "%s\r\n", COMMANDS[i].name);
 80010d6:	f897 227f 	ldrb.w	r2, [r7, #639]	@ 0x27f
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <ShowHelp+0xcc>)
 80010e4:	441a      	add	r2, r3
 80010e6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80010ea:	491b      	ldr	r1, [pc, #108]	@ (8001158 <ShowHelp+0xd0>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 faf1 	bl	80066d4 <siprintf>
        strcat(commands_list, command_name);
 80010f2:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80010f6:	463b      	mov	r3, r7
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fb57 	bl	80067ae <strcat>
    for (uint8_t i = 0; i < COMMANDS_COUNT; i++)
 8001100:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8001104:	3301      	adds	r3, #1
 8001106:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
 800110a:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800110e:	2b13      	cmp	r3, #19
 8001110:	d9e1      	bls.n	80010d6 <ShowHelp+0x4e>
    }

    if ((status = UartSendString(uart_handle_type_def, commands_list, strlen(commands_list), HAL_MAX_DELAY)) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f8c3 	bl	80002a0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	4639      	mov	r1, r7
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8001128:	f004 faf2 	bl	8005710 <UartSendString>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 327e 	strb.w	r3, [r7, #638]	@ 0x27e
 8001132:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <ShowHelp+0xb8>
    {
        return status;
 800113a:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
 800113e:	e001      	b.n	8001144 <ShowHelp+0xbc>
    }

    return status;
 8001140:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
}
 8001144:	4618      	mov	r0, r3
 8001146:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	0800a2c8 	.word	0x0800a2c8
 8001154:	0800a2f4 	.word	0x0800a2f4
 8001158:	08009f88 	.word	0x08009f88

0800115c <ReadCommand>:

// Read command
HAL_StatusTypeDef ReadCommand(uint8_t command[])
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    return UartReceiveCommand(GetUartHandler(), command, MAX_COMMAND_LENGTH, HAL_MAX_DELAY);
 8001164:	f7ff ff74 	bl	8001050 <GetUartHandler>
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	221e      	movs	r2, #30
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f004 fae6 	bl	8005740 <UartReceiveCommand>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <ProcessCommand>:

// Process command
HAL_StatusTypeDef ProcessCommand(const char command[])
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0b8      	sub	sp, #224	@ 0xe0
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef * uart_handler = GetUartHandler();
 8001188:	f7ff ff62 	bl	8001050 <GetUartHandler>
 800118c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
	HAL_StatusTypeDef status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

	for (uint8_t i = 0; i < COMMANDS_COUNT; i++ )
 8001196:	2300      	movs	r3, #0
 8001198:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800119c:	e077      	b.n	800128e <ProcessCommand+0x10e>
    {
    	if (!strcmp(command, COMMANDS[i].name))
 800119e:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4a41      	ldr	r2, [pc, #260]	@ (80012b0 <ProcessCommand+0x130>)
 80011ac:	4413      	add	r3, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f815 	bl	80001e0 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d163      	bne.n	8001284 <ProcessCommand+0x104>
    	{
    		status = UartSendString(uart_handler, WAIT_FOR_COMMAND_TO_BE_FINISHED,
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	2223      	movs	r2, #35	@ 0x23
 80011c2:	493c      	ldr	r1, [pc, #240]	@ (80012b4 <ProcessCommand+0x134>)
 80011c4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80011c8:	f004 faa2 	bl	8005710 <UartSendString>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    				                strlen(WAIT_FOR_COMMAND_TO_BE_FINISHED), HAL_MAX_DELAY);
    		if (status != HAL_OK)
 80011d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <ProcessCommand+0x60>
    		{
    		    return status;
 80011da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80011de:	e063      	b.n	80012a8 <ProcessCommand+0x128>
    		}
    		switch (COMMANDS[i].command_type)
 80011e0:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 80011e4:	4932      	ldr	r1, [pc, #200]	@ (80012b0 <ProcessCommand+0x130>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	3318      	adds	r3, #24
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d020      	beq.n	800123a <ProcessCommand+0xba>
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	dc2f      	bgt.n	800125c <ProcessCommand+0xdc>
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <ProcessCommand+0x86>
 8001200:	2b01      	cmp	r3, #1
 8001202:	d00c      	beq.n	800121e <ProcessCommand+0x9e>
 8001204:	e02a      	b.n	800125c <ProcessCommand+0xdc>
    		{
    		    case COMMAND_TYPE_0:
        		    COMMANDS[i].command.command0();
 8001206:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800120a:	4929      	ldr	r1, [pc, #164]	@ (80012b0 <ProcessCommand+0x130>)
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3314      	adds	r3, #20
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4798      	blx	r3
    		        break;
 800121c:	e028      	b.n	8001270 <ProcessCommand+0xf0>
    		    case COMMAND_TYPE_1:
        			COMMANDS[i].command.command1(uart_handler);
 800121e:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8001222:	4923      	ldr	r1, [pc, #140]	@ (80012b0 <ProcessCommand+0x130>)
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	3314      	adds	r3, #20
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001236:	4798      	blx	r3
        		    break;
 8001238:	e01a      	b.n	8001270 <ProcessCommand+0xf0>
    		    case COMMAND_TYPE_2:
        		    char comment[100];
        		    char message[100];
        		    COMMANDS[i].command.command2(comment, message);
 800123a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800123e:	491c      	ldr	r1, [pc, #112]	@ (80012b0 <ProcessCommand+0x130>)
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3314      	adds	r3, #20
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001252:	f107 020c 	add.w	r2, r7, #12
 8001256:	4610      	mov	r0, r2
 8001258:	4798      	blx	r3
    		        break;
 800125a:	e009      	b.n	8001270 <ProcessCommand+0xf0>
    		    default:
    		        // Wrong command type
    		    	return UartSendString(uart_handler, WRONG_COMMAND_TYPE,
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	2228      	movs	r2, #40	@ 0x28
 8001262:	4915      	ldr	r1, [pc, #84]	@ (80012b8 <ProcessCommand+0x138>)
 8001264:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001268:	f004 fa52 	bl	8005710 <UartSendString>
 800126c:	4603      	mov	r3, r0
 800126e:	e01b      	b.n	80012a8 <ProcessCommand+0x128>
    		                              strlen(WRONG_COMMAND_TYPE), HAL_MAX_DELAY);
    		}

    		return UartSendString(uart_handler, SUCCEEDED, strlen(SUCCEEDED), HAL_MAX_DELAY);
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	220f      	movs	r2, #15
 8001276:	4911      	ldr	r1, [pc, #68]	@ (80012bc <ProcessCommand+0x13c>)
 8001278:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800127c:	f004 fa48 	bl	8005710 <UartSendString>
 8001280:	4603      	mov	r3, r0
 8001282:	e011      	b.n	80012a8 <ProcessCommand+0x128>
	for (uint8_t i = 0; i < COMMANDS_COUNT; i++ )
 8001284:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8001288:	3301      	adds	r3, #1
 800128a:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800128e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8001292:	2b13      	cmp	r3, #19
 8001294:	d983      	bls.n	800119e <ProcessCommand+0x1e>
    	}
    }

    return UartSendString(uart_handler, UNSUPPORTED_COMMAND, strlen(UNSUPPORTED_COMMAND), HAL_MAX_DELAY);
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	222c      	movs	r2, #44	@ 0x2c
 800129c:	4908      	ldr	r1, [pc, #32]	@ (80012c0 <ProcessCommand+0x140>)
 800129e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80012a2:	f004 fa35 	bl	8005710 <UartSendString>
 80012a6:	4603      	mov	r3, r0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	37e0      	adds	r7, #224	@ 0xe0
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	0800a2f4 	.word	0x0800a2f4
 80012b4:	0800a238 	.word	0x0800a238
 80012b8:	0800a25c 	.word	0x0800a25c
 80012bc:	0800a288 	.word	0x0800a288
 80012c0:	0800a298 	.word	0x0800a298

080012c4 <PrepareLCD1602Interface>:

// Prepare I2C channel to communicate with LCD1602
uint8_t PrepareLCD1602Interface()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	return ShowLCD1602Interface(LCD1602_I2C);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f004 f88b 	bl	80053e4 <ShowLCD1602Interface>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <PrepareUartChannel>:

// Prepare UART channel
HAL_StatusTypeDef PrepareUartChannel(UART_HandleTypeDef * uart_handler)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
    uint8_t attempts_count = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73bb      	strb	r3, [r7, #14]

    SetUartHandler(uart_handler);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff febf 	bl	8001068 <SetUartHandler>

    while ((status != HAL_OK) && attempts_count < MAX_ATTEMPTS_COUNT)
 80012ea:	e026      	b.n	800133a <PrepareUartChannel+0x66>
	{
        if ((status = UartReady(uart_handler)) == HAL_OK)
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f004 f9d7 	bl	80056a0 <UartReady>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <PrepareUartChannel+0x38>
        {
        	status = ProcessCommand(SHOW_HELP_COMMAND);
 80012fc:	482b      	ldr	r0, [pc, #172]	@ (80013ac <PrepareUartChannel+0xd8>)
 80012fe:	f7ff ff3f 	bl	8001180 <ProcessCommand>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
        	if (status == HAL_OK)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01d      	beq.n	8001348 <PrepareUartChannel+0x74>
        	{
        	    break;
        	}
        }

    	Lcd1602ScreenClear();
 800130c:	f003 faf7 	bl	80048fe <Lcd1602ScreenClear>
		Lcd1602SetCursor(0, 1);
 8001310:	2101      	movs	r1, #1
 8001312:	2000      	movs	r0, #0
 8001314:	f003 fb5a 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString("Can't connect");
 8001318:	4825      	ldr	r0, [pc, #148]	@ (80013b0 <PrepareUartChannel+0xdc>)
 800131a:	f003 fb7b 	bl	8004a14 <Lcd1602WriteString>
        Lcd1602SetCursor(1, 0);
 800131e:	2100      	movs	r1, #0
 8001320:	2001      	movs	r0, #1
 8001322:	f003 fb53 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString("to UART channel!");
 8001326:	4823      	ldr	r0, [pc, #140]	@ (80013b4 <PrepareUartChannel+0xe0>)
 8001328:	f003 fb74 	bl	8004a14 <Lcd1602WriteString>
        HAL_Delay(UART_TIMEOUT_SEC);
 800132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001330:	f000 fca8 	bl	8001c84 <HAL_Delay>
        attempts_count++;
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	3301      	adds	r3, #1
 8001338:	73bb      	strb	r3, [r7, #14]
    while ((status != HAL_OK) && attempts_count < MAX_ATTEMPTS_COUNT)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <PrepareUartChannel+0x76>
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2bf9      	cmp	r3, #249	@ 0xf9
 8001344:	d9d2      	bls.n	80012ec <PrepareUartChannel+0x18>
 8001346:	e000      	b.n	800134a <PrepareUartChannel+0x76>
        	    break;
 8001348:	bf00      	nop
	}

    if (status == HAL_OK)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d127      	bne.n	80013a0 <PrepareUartChannel+0xcc>
    {
        Lcd1602ScreenClear();
 8001350:	f003 fad5 	bl	80048fe <Lcd1602ScreenClear>
    	Lcd1602SetCursor(0, 3);
 8001354:	2103      	movs	r1, #3
 8001356:	2000      	movs	r0, #0
 8001358:	f003 fb38 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString("Connected");
 800135c:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <PrepareUartChannel+0xe4>)
 800135e:	f003 fb59 	bl	8004a14 <Lcd1602WriteString>
        Lcd1602SetCursor(1, 0);
 8001362:	2100      	movs	r1, #0
 8001364:	2001      	movs	r0, #1
 8001366:	f003 fb31 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString("to UART channel!");
 800136a:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <PrepareUartChannel+0xe0>)
 800136c:	f003 fb52 	bl	8004a14 <Lcd1602WriteString>
        HAL_Delay(UART_TIMEOUT_SEC);
 8001370:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001374:	f000 fc86 	bl	8001c84 <HAL_Delay>
        Lcd1602ScreenClear();
 8001378:	f003 fac1 	bl	80048fe <Lcd1602ScreenClear>
    	Lcd1602SetCursor(0, 2);
 800137c:	2102      	movs	r1, #2
 800137e:	2000      	movs	r0, #0
 8001380:	f003 fb24 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString("Send commands");
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <PrepareUartChannel+0xe8>)
 8001386:	f003 fb45 	bl	8004a14 <Lcd1602WriteString>
        Lcd1602SetCursor(1, 0);
 800138a:	2100      	movs	r1, #0
 800138c:	2001      	movs	r0, #1
 800138e:	f003 fb1d 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString("to UART channel!");
 8001392:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <PrepareUartChannel+0xe0>)
 8001394:	f003 fb3e 	bl	8004a14 <Lcd1602WriteString>
        HAL_Delay(UART_TIMEOUT_SEC);
 8001398:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139c:	f000 fc72 	bl	8001c84 <HAL_Delay>
    }

    return status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800a2e8 	.word	0x0800a2e8
 80013b0:	08009f90 	.word	0x08009f90
 80013b4:	08009fa0 	.word	0x08009fa0
 80013b8:	08009fb4 	.word	0x08009fb4
 80013bc:	08009fc0 	.word	0x08009fc0

080013c0 <RepairUartChannel>:

// Repair UART channel
void RepairUartChannel(UART_HandleTypeDef * uart_handler)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    while (PrepareUartChannel(uart_handler) != HAL_OK)
 80013c8:	e003      	b.n	80013d2 <RepairUartChannel+0x12>
    {
        HAL_Delay(UART_TIMEOUT_SEC);
 80013ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ce:	f000 fc59 	bl	8001c84 <HAL_Delay>
    while (PrepareUartChannel(uart_handler) != HAL_OK)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff7e 	bl	80012d4 <PrepareUartChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f5      	bne.n	80013ca <RepairUartChannel+0xa>
    }
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ee:	f000 fbd7 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 f843 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f6:	f000 f945 	bl	8001684 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013fa:	f000 f89f 	bl	800153c <MX_I2C1_Init>
  MX_TIM2_Init();
 80013fe:	f000 f8cb 	bl	8001598 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001402:	f000 f915 	bl	8001630 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    TIM2MicrosecondsDelayInit();
 8001406:	f000 fb75 	bl	8001af4 <TIM2MicrosecondsDelayInit>

    // Try to prepare LCD1602 interface
    if (!PrepareLCD1602Interface())
 800140a:	f7ff ff5b 	bl	80012c4 <PrepareLCD1602Interface>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <main+0x38>
    {
        // Can not configure LCD1602 with I2C interface
    	return 0;
 8001414:	2300      	movs	r3, #0
 8001416:	e02b      	b.n	8001470 <main+0x88>
    }

    // Try to prepare the UART channel
    while (PrepareUartChannel(&huart2) != HAL_OK)
    {
        HAL_Delay(1000);
 8001418:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800141c:	f000 fc32 	bl	8001c84 <HAL_Delay>
    while (PrepareUartChannel(&huart2) != HAL_OK)
 8001420:	4815      	ldr	r0, [pc, #84]	@ (8001478 <main+0x90>)
 8001422:	f7ff ff57 	bl	80012d4 <PrepareUartChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f5      	bne.n	8001418 <main+0x30>
    }

    while (1)
    {
        status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	77fb      	strb	r3, [r7, #31]
        memset(command, 0, MAX_COMMAND_LENGTH);
 8001430:	463b      	mov	r3, r7
 8001432:	221e      	movs	r2, #30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f005 f9b1 	bl	800679e <memset>

        if ((status = ReadCommand(command)) == HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe8c 	bl	800115c <ReadCommand>
 8001444:	4603      	mov	r3, r0
 8001446:	77fb      	strb	r3, [r7, #31]
 8001448:	7ffb      	ldrb	r3, [r7, #31]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <main+0x72>
        {
            status = ProcessCommand((char *)command);
 800144e:	463b      	mov	r3, r7
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe95 	bl	8001180 <ProcessCommand>
 8001456:	4603      	mov	r3, r0
 8001458:	77fb      	strb	r3, [r7, #31]
        }

        if (status != HAL_OK)
 800145a:	7ffb      	ldrb	r3, [r7, #31]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0e5      	beq.n	800142c <main+0x44>
        {
        	HAL_Delay(1000);
 8001460:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001464:	f000 fc0e 	bl	8001c84 <HAL_Delay>
        	// Try to repair the UART channel continuously
        	RepairUartChannel(&huart2);
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <main+0x90>)
 800146a:	f7ff ffa9 	bl	80013c0 <RepairUartChannel>
        status = HAL_ERROR;
 800146e:	e7dd      	b.n	800142c <main+0x44>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      }
  /* USER CODE END 3 */
}
 8001470:	4618      	mov	r0, r3
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002f4 	.word	0x200002f4

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	@ 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2230      	movs	r2, #48	@ 0x30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f005 f987 	bl	800679e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <SystemClock_Config+0xb8>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <SystemClock_Config+0xb8>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <SystemClock_Config+0xb8>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <SystemClock_Config+0xbc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <SystemClock_Config+0xbc>)
 80014ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <SystemClock_Config+0xbc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fb0d 	bl	8002b10 <HAL_RCC_OscConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014fc:	f000 f8ea 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001500:	230f      	movs	r3, #15
 8001502:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fd70 	bl	8003000 <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001526:	f000 f8d5 	bl	80016d4 <Error_Handler>
  }
}
 800152a:	bf00      	nop
 800152c:	3750      	adds	r7, #80	@ 0x50
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000

0800153c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_I2C1_Init+0x50>)
 8001542:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <MX_I2C1_Init+0x54>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_I2C1_Init+0x50>)
 8001548:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <MX_I2C1_Init+0x58>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_I2C1_Init+0x50>)
 800155a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800155e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001560:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	@ (800158c <MX_I2C1_Init+0x50>)
 800157a:	f000 fe2b 	bl	80021d4 <HAL_I2C_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001584:	f000 f8a6 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000258 	.word	0x20000258
 8001590:	40005400 	.word	0x40005400
 8001594:	000186a0 	.word	0x000186a0

08001598 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <MX_TIM2_Init+0x94>)
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_TIM2_Init+0x94>)
 80015be:	220f      	movs	r2, #15
 80015c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <MX_TIM2_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_TIM2_Init+0x94>)
 80015ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <MX_TIM2_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_TIM2_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015dc:	4813      	ldr	r0, [pc, #76]	@ (800162c <MX_TIM2_Init+0x94>)
 80015de:	f001 feef 	bl	80033c0 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015e8:	f000 f874 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_TIM2_Init+0x94>)
 80015fa:	f001 ff8b 	bl	8003514 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001604:	f000 f866 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_TIM2_Init+0x94>)
 8001616:	f002 f965 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001620:	f000 f858 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200002ac 	.word	0x200002ac

08001630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <MX_USART2_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_USART2_UART_Init+0x4c>)
 8001668:	f002 f9aa 	bl	80039c0 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f000 f82f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002f4 	.word	0x200002f4
 8001680:	40004400 	.word	0x40004400

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <MX_GPIO_Init+0x4c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <MX_GPIO_Init+0x4c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <MX_GPIO_Init+0x4c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_GPIO_Init+0x4c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <MX_GPIO_Init+0x4c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_GPIO_Init+0x4c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	@ (800172c <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_I2C_MspInit+0x84>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12c      	bne.n	80017ac <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_I2C_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <HAL_I2C_MspInit+0x88>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_I2C_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001774:	2312      	movs	r3, #18
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001780:	2304      	movs	r3, #4
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	480c      	ldr	r0, [pc, #48]	@ (80017bc <HAL_I2C_MspInit+0x8c>)
 800178c:	f000 fb84 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_I2C_MspInit+0x88>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <HAL_I2C_MspInit+0x88>)
 800179a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800179e:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_I2C_MspInit+0x88>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	@ 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40005400 	.word	0x40005400
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017d0:	d10d      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_TIM_Base_MspInit+0x3c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_TIM_Base_MspInit+0x3c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_TIM_Base_MspInit+0x3c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <HAL_UART_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_UART_MspInit+0x88>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_UART_MspInit+0x8c>)
 8001876:	f000 fb0f 	bl	8001e98 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40004400 	.word	0x40004400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <NMI_Handler+0x4>

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <MemManage_Handler+0x4>

080018a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e6:	f000 f9ad 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_kill>:

int _kill(int pid, int sig)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001908:	f004 ffaa 	bl	8006860 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	2216      	movs	r2, #22
 8001910:	601a      	str	r2, [r3, #0]
  return -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_exit>:

void _exit (int status)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001926:	f04f 31ff 	mov.w	r1, #4294967295
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffe7 	bl	80018fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
  }

  return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
  }
  return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f004 ff0e 	bl	8006860 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20018000 	.word	0x20018000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	2000033c 	.word	0x2000033c
 8001a78:	200004e8 	.word	0x200004e8

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001aa4:	f7ff ffea 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f004 fecd 	bl	800686c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff fc89 	bl	80013e8 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001ae4:	0800a9c4 	.word	0x0800a9c4
  ldr r2, =_sbss
 8001ae8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001aec:	200004e8 	.word	0x200004e8

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <TIM2MicrosecondsDelayInit>:
    while((initial_tick - SysTick->VAL) < delay_ticks);
}

// Initialize TIM2 to use it for micro-delays
void TIM2MicrosecondsDelayInit()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <TIM2MicrosecondsDelayInit+0x6c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <TIM2MicrosecondsDelayInit+0x6c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <TIM2MicrosecondsDelayInit+0x6c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]

    htim2.Instance = TIM2;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1c:	601a      	str	r2, [r3, #0]
    // 1 tick = 1 us
    htim2.Init.Prescaler = (SystemCoreClock / 1000000U) - 1;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <TIM2MicrosecondsDelayInit+0x74>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <TIM2MicrosecondsDelayInit+0x78>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	0c9b      	lsrs	r3, r3, #18
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b2e:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    // 32-bit maximum value
    htim2.Init.Period = 65535;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(&htim2);
 8001b4a:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b4c:	f001 fc38 	bl	80033c0 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&htim2);
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <TIM2MicrosecondsDelayInit+0x70>)
 8001b52:	f001 fc85 	bl	8003460 <HAL_TIM_Base_Start>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	20000340 	.word	0x20000340
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <TIM2MicrosecondsDelay>:

// Microseconds delay with TIM2
void TIM2MicrosecondsDelay(uint32_t microseconds_delay)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    //uint32_t initial_tick = __HAL_TIM_GET_COUNTER(&htim2);
	__HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the counter
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <TIM2MicrosecondsDelay+0x2c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < microseconds_delay);
 8001b80:	bf00      	nop
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <TIM2MicrosecondsDelay+0x2c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d8f9      	bhi.n	8001b82 <TIM2MicrosecondsDelay+0x12>
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000340 	.word	0x20000340

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f931 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fd84 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f93b 	bl	8001e7e <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f911 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000388 	.word	0x20000388

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000388 	.word	0x20000388

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	@ (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	@ (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	@ 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff8e 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff47 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff5c 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff8e 	bl	8001d84 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5d 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffb0 	bl	8001dec <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	@ 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	e159      	b.n	8002168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f040 8148 	bne.w	8002162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d005      	beq.n	8001eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d130      	bne.n	8001f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0201 	and.w	r2, r3, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d017      	beq.n	8001f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d123      	bne.n	8001fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a2 	beq.w	8002162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b57      	ldr	r3, [pc, #348]	@ (8002180 <HAL_GPIO_Init+0x2e8>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	4a56      	ldr	r2, [pc, #344]	@ (8002180 <HAL_GPIO_Init+0x2e8>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800202c:	6453      	str	r3, [r2, #68]	@ 0x44
 800202e:	4b54      	ldr	r3, [pc, #336]	@ (8002180 <HAL_GPIO_Init+0x2e8>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203a:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_GPIO_Init+0x2ec>)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a49      	ldr	r2, [pc, #292]	@ (8002188 <HAL_GPIO_Init+0x2f0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0x202>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a48      	ldr	r2, [pc, #288]	@ (800218c <HAL_GPIO_Init+0x2f4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0x1fe>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a47      	ldr	r2, [pc, #284]	@ (8002190 <HAL_GPIO_Init+0x2f8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00d      	beq.n	8002092 <HAL_GPIO_Init+0x1fa>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a46      	ldr	r2, [pc, #280]	@ (8002194 <HAL_GPIO_Init+0x2fc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x1f6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a45      	ldr	r2, [pc, #276]	@ (8002198 <HAL_GPIO_Init+0x300>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_GPIO_Init+0x1f2>
 8002086:	2304      	movs	r3, #4
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x204>
 800208a:	2307      	movs	r3, #7
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x204>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x204>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x204>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x204>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	@ (8002184 <HAL_GPIO_Init+0x2ec>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b38      	ldr	r3, [pc, #224]	@ (800219c <HAL_GPIO_Init+0x304>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a2f      	ldr	r2, [pc, #188]	@ (800219c <HAL_GPIO_Init+0x304>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <HAL_GPIO_Init+0x304>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_GPIO_Init+0x304>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_GPIO_Init+0x304>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1a      	ldr	r2, [pc, #104]	@ (800219c <HAL_GPIO_Init+0x304>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <HAL_GPIO_Init+0x304>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a0f      	ldr	r2, [pc, #60]	@ (800219c <HAL_GPIO_Init+0x304>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f aea2 	bls.w	8001eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40013c00 	.word	0x40013c00

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	619a      	str	r2, [r3, #24]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e12b      	b.n	800243e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fa98 	bl	8001730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	@ 0x24
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002236:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002238:	f001 f89a 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a81      	ldr	r2, [pc, #516]	@ (8002448 <HAL_I2C_Init+0x274>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d807      	bhi.n	8002258 <HAL_I2C_Init+0x84>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a80      	ldr	r2, [pc, #512]	@ (800244c <HAL_I2C_Init+0x278>)
 800224c:	4293      	cmp	r3, r2
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e006      	b.n	8002266 <HAL_I2C_Init+0x92>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a7d      	ldr	r2, [pc, #500]	@ (8002450 <HAL_I2C_Init+0x27c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	bf94      	ite	ls
 8002260:	2301      	movls	r3, #1
 8002262:	2300      	movhi	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0e7      	b.n	800243e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a78      	ldr	r2, [pc, #480]	@ (8002454 <HAL_I2C_Init+0x280>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0c9b      	lsrs	r3, r3, #18
 8002278:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a6a      	ldr	r2, [pc, #424]	@ (8002448 <HAL_I2C_Init+0x274>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d802      	bhi.n	80022a8 <HAL_I2C_Init+0xd4>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3301      	adds	r3, #1
 80022a6:	e009      	b.n	80022bc <HAL_I2C_Init+0xe8>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	4a69      	ldr	r2, [pc, #420]	@ (8002458 <HAL_I2C_Init+0x284>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	3301      	adds	r3, #1
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	495c      	ldr	r1, [pc, #368]	@ (8002448 <HAL_I2C_Init+0x274>)
 80022d8:	428b      	cmp	r3, r1
 80022da:	d819      	bhi.n	8002310 <HAL_I2C_Init+0x13c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e59      	subs	r1, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ea:	1c59      	adds	r1, r3, #1
 80022ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022f0:	400b      	ands	r3, r1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_I2C_Init+0x138>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e59      	subs	r1, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fbb1 f3f3 	udiv	r3, r1, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230a:	e051      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 800230c:	2304      	movs	r3, #4
 800230e:	e04f      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d111      	bne.n	800233c <HAL_I2C_Init+0x168>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e012      	b.n	8002362 <HAL_I2C_Init+0x18e>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Init+0x196>
 8002366:	2301      	movs	r3, #1
 8002368:	e022      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10e      	bne.n	8002390 <HAL_I2C_Init+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1e58      	subs	r0, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	440b      	add	r3, r1
 8002380:	fbb0 f3f3 	udiv	r3, r0, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1e58      	subs	r0, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	0099      	lsls	r1, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	6809      	ldr	r1, [r1, #0]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6911      	ldr	r1, [r2, #16]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68d2      	ldr	r2, [r2, #12]
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	000186a0 	.word	0x000186a0
 800244c:	001e847f 	.word	0x001e847f
 8002450:	003d08ff 	.word	0x003d08ff
 8002454:	431bde83 	.word	0x431bde83
 8002458:	10624dd3 	.word	0x10624dd3

0800245c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	461a      	mov	r2, r3
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
 800246c:	4613      	mov	r3, r2
 800246e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fbfc 	bl	8001c6c <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	f040 80e0 	bne.w	8002644 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2319      	movs	r3, #25
 800248a:	2201      	movs	r2, #1
 800248c:	4970      	ldr	r1, [pc, #448]	@ (8002650 <HAL_I2C_Master_Transmit+0x1f4>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f964 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	e0d3      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_I2C_Master_Transmit+0x50>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0cc      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d007      	beq.n	80024d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2221      	movs	r2, #33	@ 0x21
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2210      	movs	r2, #16
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a50      	ldr	r2, [pc, #320]	@ (8002654 <HAL_I2C_Master_Transmit+0x1f8>)
 8002512:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f89c 	bl	8002658 <I2C_MasterRequestWrite>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08d      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002540:	e066      	b.n	8002610 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa22 	bl	8002990 <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06b      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11b      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x188>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d017      	beq.n	80025e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	6a39      	ldr	r1, [r7, #32]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fa19 	bl	8002a20 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d107      	bne.n	800260c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e01a      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d194      	bne.n	8002542 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	00100002 	.word	0x00100002
 8002654:	ffff0000 	.word	0xffff0000

08002658 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d006      	beq.n	8002682 <I2C_MasterRequestWrite+0x2a>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d003      	beq.n	8002682 <I2C_MasterRequestWrite+0x2a>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002680:	d108      	bne.n	8002694 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e00b      	b.n	80026ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	2b12      	cmp	r3, #18
 800269a:	d107      	bne.n	80026ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f84f 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d2:	d103      	bne.n	80026dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e035      	b.n	800274c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e01b      	b.n	8002734 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026fc:	897b      	ldrh	r3, [r7, #10]
 80026fe:	11db      	asrs	r3, r3, #7
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 0306 	and.w	r3, r3, #6
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f063 030f 	orn	r3, r3, #15
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	490e      	ldr	r1, [pc, #56]	@ (8002754 <I2C_MasterRequestWrite+0xfc>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f898 	bl	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e010      	b.n	800274c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4907      	ldr	r1, [pc, #28]	@ (8002758 <I2C_MasterRequestWrite+0x100>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f888 	bl	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010008 	.word	0x00010008
 8002758:	00010002 	.word	0x00010002

0800275c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276c:	e048      	b.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d044      	beq.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7ff fa79 	bl	8001c6c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d139      	bne.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10d      	bne.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	43da      	mvns	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	e00c      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d116      	bne.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e023      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10d      	bne.n	8002826 <I2C_WaitOnFlagUntilTimeout+0xca>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	e00c      	b.n	8002840 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d093      	beq.n	800276e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285e:	e071      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286e:	d123      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002888:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e067      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d041      	beq.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7ff f9d4 	bl	8001c6c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d136      	bne.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10c      	bne.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e00b      	b.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e021      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10c      	bne.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e00b      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f af6d 	bne.w	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f886 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e034      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d028      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7ff f959 	bl	8001c6c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b80      	cmp	r3, #128	@ 0x80
 80029d8:	d016      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d1c3      	bne.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f83e 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e034      	b.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d028      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7ff f911 	bl	8001c6c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11d      	bne.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d016      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d1c3      	bne.n	8002a2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	d11b      	bne.n	8002b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e267      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d075      	beq.n	8002c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b2e:	4b88      	ldr	r3, [pc, #544]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b85      	ldr	r3, [pc, #532]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d112      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b46:	4b82      	ldr	r3, [pc, #520]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b52:	d10b      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	4b7e      	ldr	r3, [pc, #504]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05b      	beq.n	8002c18 <HAL_RCC_OscConfig+0x108>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d157      	bne.n	8002c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e242      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x74>
 8002b76:	4b76      	ldr	r3, [pc, #472]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a75      	ldr	r2, [pc, #468]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x98>
 8002b8e:	4b70      	ldr	r3, [pc, #448]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6f      	ldr	r2, [pc, #444]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	4b69      	ldr	r3, [pc, #420]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a68      	ldr	r2, [pc, #416]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a65      	ldr	r2, [pc, #404]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f850 	bl	8001c6c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7ff f84c 	bl	8001c6c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e207      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xc0>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f83c 	bl	8001c6c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f838 	bl	8001c6c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1f3      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b51      	ldr	r3, [pc, #324]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xe8>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d063      	beq.n	8002cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c26:	4b4a      	ldr	r3, [pc, #296]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b47      	ldr	r3, [pc, #284]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3e:	4b44      	ldr	r3, [pc, #272]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b41      	ldr	r3, [pc, #260]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x152>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1c7      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4937      	ldr	r1, [pc, #220]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e03a      	b.n	8002cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b34      	ldr	r3, [pc, #208]	@ (8002d54 <HAL_RCC_OscConfig+0x244>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe fff1 	bl	8001c6c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe ffed 	bl	8001c6c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1a8      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4925      	ldr	r1, [pc, #148]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <HAL_RCC_OscConfig+0x244>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe ffd0 	bl	8001c6c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe ffcc 	bl	8001c6c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e187      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d036      	beq.n	8002d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_RCC_OscConfig+0x248>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe ffb0 	bl	8001c6c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fe ffac 	bl	8001c6c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e167      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x200>
 8002d2e:	e01b      	b.n	8002d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_RCC_OscConfig+0x248>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe ff99 	bl	8001c6c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	e00e      	b.n	8002d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3e:	f7fe ff95 	bl	8001c6c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d907      	bls.n	8002d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e150      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	42470000 	.word	0x42470000
 8002d58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b88      	ldr	r3, [pc, #544]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ea      	bne.n	8002d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8097 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7a:	4b81      	ldr	r3, [pc, #516]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d96:	4b7a      	ldr	r3, [pc, #488]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b77      	ldr	r3, [pc, #476]	@ (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	4b74      	ldr	r3, [pc, #464]	@ (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a73      	ldr	r2, [pc, #460]	@ (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe ff55 	bl	8001c6c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7fe ff51 	bl	8001c6c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e10c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2ea>
 8002dec:	4b64      	ldr	r3, [pc, #400]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a63      	ldr	r2, [pc, #396]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df8:	e01c      	b.n	8002e34 <HAL_RCC_OscConfig+0x324>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x30c>
 8002e02:	4b5f      	ldr	r3, [pc, #380]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e06:	4a5e      	ldr	r2, [pc, #376]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	4a5b      	ldr	r2, [pc, #364]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0x324>
 8002e1c:	4b58      	ldr	r3, [pc, #352]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a57      	ldr	r2, [pc, #348]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e28:	4b55      	ldr	r3, [pc, #340]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2c:	4a54      	ldr	r2, [pc, #336]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	f023 0304 	bic.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d015      	beq.n	8002e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe ff16 	bl	8001c6c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe ff12 	bl	8001c6c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0cb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	4b49      	ldr	r3, [pc, #292]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ee      	beq.n	8002e44 <HAL_RCC_OscConfig+0x334>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe ff00 	bl	8001c6c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fefc 	bl	8001c6c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0b5      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e86:	4b3e      	ldr	r3, [pc, #248]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ee      	bne.n	8002e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b39      	ldr	r3, [pc, #228]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	4a38      	ldr	r2, [pc, #224]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a1 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eae:	4b34      	ldr	r3, [pc, #208]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d05c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d141      	bne.n	8002f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b31      	ldr	r3, [pc, #196]	@ (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fed0 	bl	8001c6c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fecc 	bl	8001c6c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e087      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b27      	ldr	r3, [pc, #156]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	491b      	ldr	r1, [pc, #108]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f18:	4b1b      	ldr	r3, [pc, #108]	@ (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fea5 	bl	8001c6c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe fea1 	bl	8001c6c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e05c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x416>
 8002f44:	e054      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe8e 	bl	8001c6c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fe8a 	bl	8001c6c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e045      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x444>
 8002f72:	e03d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e038      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_RCC_OscConfig+0x4ec>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d028      	beq.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d121      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11a      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0cc      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b68      	ldr	r3, [pc, #416]	@ (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d90c      	bls.n	800303c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b65      	ldr	r3, [pc, #404]	@ (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	@ (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d044      	beq.n	8003120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d119      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d003      	beq.n	80030be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b3f      	ldr	r3, [pc, #252]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3b      	ldr	r3, [pc, #236]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e067      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b37      	ldr	r3, [pc, #220]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4934      	ldr	r1, [pc, #208]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fe fdbc 	bl	8001c6c <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fdb8 	bl	8001c6c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b25      	ldr	r3, [pc, #148]	@ (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d20c      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	@ (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fd1c 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	0800a524 	.word	0x0800a524
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b090      	sub	sp, #64	@ 0x40
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	f200 80a1 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fe:	e09b      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x184>)
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003204:	e09b      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800320a:	e098      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b4f      	ldr	r3, [pc, #316]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003216:	4b4d      	ldr	r3, [pc, #308]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d028      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2200      	movs	r2, #0
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	627a      	str	r2, [r7, #36]	@ 0x24
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003234:	2100      	movs	r1, #0
 8003236:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003238:	fb03 f201 	mul.w	r2, r3, r1
 800323c:	2300      	movs	r3, #0
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	4413      	add	r3, r2
 8003244:	4a43      	ldr	r2, [pc, #268]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003246:	fba0 1202 	umull	r1, r2, r0, r2
 800324a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800324c:	460a      	mov	r2, r1
 800324e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003252:	4413      	add	r3, r2
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003258:	2200      	movs	r2, #0
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	61fa      	str	r2, [r7, #28]
 800325e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003266:	f7fd fd27 	bl	8000cb8 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4613      	mov	r3, r2
 8003270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003272:	e053      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4b35      	ldr	r3, [pc, #212]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	617a      	str	r2, [r7, #20]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003286:	f04f 0b00 	mov.w	fp, #0
 800328a:	4652      	mov	r2, sl
 800328c:	465b      	mov	r3, fp
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	ebb2 080a 	subs.w	r8, r2, sl
 80032a6:	eb63 090b 	sbc.w	r9, r3, fp
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032be:	ebb2 0408 	subs.w	r4, r2, r8
 80032c2:	eb63 0509 	sbc.w	r5, r3, r9
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	00eb      	lsls	r3, r5, #3
 80032d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d4:	00e2      	lsls	r2, r4, #3
 80032d6:	4614      	mov	r4, r2
 80032d8:	461d      	mov	r5, r3
 80032da:	eb14 030a 	adds.w	r3, r4, sl
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	eb45 030b 	adc.w	r3, r5, fp
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003306:	2200      	movs	r2, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003310:	f7fd fcd2 	bl	8000cb8 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800332c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x184>)
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003340:	4618      	mov	r0, r3
 8003342:	3740      	adds	r7, #64	@ 0x40
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400
 8003354:	017d7840 	.word	0x017d7840

08003358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800335c:	4b03      	ldr	r3, [pc, #12]	@ (800336c <HAL_RCC_GetHCLKFreq+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000000 	.word	0x20000000

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff0 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	0800a534 	.word	0x0800a534

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800339c:	f7ff ffdc 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0b5b      	lsrs	r3, r3, #13
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	0800a534 	.word	0x0800a534

080033c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e041      	b.n	8003456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe f9ea 	bl	80017c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 f950 	bl	80036a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e03c      	b.n	80034f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1e      	ldr	r2, [pc, #120]	@ (8003500 <HAL_TIM_Base_Start+0xa0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d018      	beq.n	80034bc <HAL_TIM_Base_Start+0x5c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003492:	d013      	beq.n	80034bc <HAL_TIM_Base_Start+0x5c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1a      	ldr	r2, [pc, #104]	@ (8003504 <HAL_TIM_Base_Start+0xa4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_TIM_Base_Start+0x5c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_TIM_Base_Start+0xa8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_TIM_Base_Start+0x5c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a17      	ldr	r2, [pc, #92]	@ (800350c <HAL_TIM_Base_Start+0xac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_TIM_Base_Start+0x5c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <HAL_TIM_Base_Start+0xb0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d111      	bne.n	80034e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d010      	beq.n	80034f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	e007      	b.n	80034f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00
 8003510:	40014000 	.word	0x40014000

08003514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_TIM_ConfigClockSource+0x1c>
 800352c:	2302      	movs	r3, #2
 800352e:	e0b4      	b.n	800369a <HAL_TIM_ConfigClockSource+0x186>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800354e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003568:	d03e      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0xd4>
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356e:	f200 8087 	bhi.w	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003576:	f000 8086 	beq.w	8003686 <HAL_TIM_ConfigClockSource+0x172>
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357e:	d87f      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 8003580:	2b70      	cmp	r3, #112	@ 0x70
 8003582:	d01a      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0xa6>
 8003584:	2b70      	cmp	r3, #112	@ 0x70
 8003586:	d87b      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 8003588:	2b60      	cmp	r3, #96	@ 0x60
 800358a:	d050      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x11a>
 800358c:	2b60      	cmp	r3, #96	@ 0x60
 800358e:	d877      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 8003590:	2b50      	cmp	r3, #80	@ 0x50
 8003592:	d03c      	beq.n	800360e <HAL_TIM_ConfigClockSource+0xfa>
 8003594:	2b50      	cmp	r3, #80	@ 0x50
 8003596:	d873      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d058      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x13a>
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	d86f      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b30      	cmp	r3, #48	@ 0x30
 80035a2:	d064      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x15a>
 80035a4:	2b30      	cmp	r3, #48	@ 0x30
 80035a6:	d86b      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d060      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x15a>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d867      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d05c      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x15a>
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d05a      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	e062      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ca:	f000 f96b 	bl	80038a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	609a      	str	r2, [r3, #8]
      break;
 80035e6:	e04f      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	f000 f954 	bl	80038a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800360a:	609a      	str	r2, [r3, #8]
      break;
 800360c:	e03c      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	461a      	mov	r2, r3
 800361c:	f000 f8c8 	bl	80037b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2150      	movs	r1, #80	@ 0x50
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f921 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 800362c:	e02c      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800363a:	461a      	mov	r2, r3
 800363c:	f000 f8e7 	bl	800380e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2160      	movs	r1, #96	@ 0x60
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f911 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 800364c:	e01c      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	461a      	mov	r2, r3
 800365c:	f000 f8a8 	bl	80037b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2140      	movs	r1, #64	@ 0x40
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f901 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 800366c:	e00c      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f000 f8f8 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 800367e:	e003      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e000      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a37      	ldr	r2, [pc, #220]	@ (8003794 <TIM_Base_SetConfig+0xf0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00f      	beq.n	80036dc <TIM_Base_SetConfig+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c2:	d00b      	beq.n	80036dc <TIM_Base_SetConfig+0x38>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a34      	ldr	r2, [pc, #208]	@ (8003798 <TIM_Base_SetConfig+0xf4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_Base_SetConfig+0x38>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a33      	ldr	r2, [pc, #204]	@ (800379c <TIM_Base_SetConfig+0xf8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x38>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a32      	ldr	r2, [pc, #200]	@ (80037a0 <TIM_Base_SetConfig+0xfc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a28      	ldr	r2, [pc, #160]	@ (8003794 <TIM_Base_SetConfig+0xf0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01b      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fc:	d017      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a25      	ldr	r2, [pc, #148]	@ (8003798 <TIM_Base_SetConfig+0xf4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a24      	ldr	r2, [pc, #144]	@ (800379c <TIM_Base_SetConfig+0xf8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <TIM_Base_SetConfig+0xfc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a22      	ldr	r2, [pc, #136]	@ (80037a4 <TIM_Base_SetConfig+0x100>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a21      	ldr	r2, [pc, #132]	@ (80037a8 <TIM_Base_SetConfig+0x104>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0x8a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <TIM_Base_SetConfig+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <TIM_Base_SetConfig+0xf0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d103      	bne.n	800376e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800

080037b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 030a 	bic.w	r3, r3, #10
 80037ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 0210 	bic.w	r2, r3, #16
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800384a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	f043 0307 	orr.w	r3, r3, #7
 8003890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e050      	b.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d018      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003948:	d013      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a15      	ldr	r2, [pc, #84]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a13      	ldr	r2, [pc, #76]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10c      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e042      	b.n	8003a58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd ff0a 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa09 	bl	8003e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d175      	bne.n	8003b6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Transmit+0x2c>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e06e      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2221      	movs	r2, #33	@ 0x21
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f8e5 	bl	8001c6c <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02e      	b.n	8003b34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f8df 	bl	8003ca4 <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e03a      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3302      	adds	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	e007      	b.n	8003b26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1cb      	bne.n	8003ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2140      	movs	r1, #64	@ 0x40
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f8ab 	bl	8003ca4 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b08a      	sub	sp, #40	@ 0x28
 8003b7a:	af02      	add	r7, sp, #8
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f040 8081 	bne.w	8003c9a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Receive+0x2e>
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e079      	b.n	8003c9c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2222      	movs	r2, #34	@ 0x22
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbc:	f7fe f856 	bl	8001c6c <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd6:	d108      	bne.n	8003bea <HAL_UART_Receive+0x74>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	e003      	b.n	8003bf2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bf2:	e047      	b.n	8003c84 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f850 	bl	8003ca4 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e042      	b.n	8003c9c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10c      	bne.n	8003c36 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3302      	adds	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e01f      	b.n	8003c76 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d007      	beq.n	8003c50 <HAL_UART_Receive+0xda>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_UART_Receive+0xe8>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e008      	b.n	8003c70 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1b2      	bne.n	8003bf4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb4:	e03b      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d037      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbe:	f7fd ffd5 	bl	8001c6c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d302      	bcc.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e03a      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d023      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b80      	cmp	r3, #128	@ 0x80
 8003cea:	d020      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b40      	cmp	r3, #64	@ 0x40
 8003cf0:	d01d      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d116      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f81d 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d0b4      	beq.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b095      	sub	sp, #84	@ 0x54
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d119      	bne.n	8003e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0310 	bic.w	r3, r3, #16
 8003de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dee:	61ba      	str	r2, [r7, #24]
 8003df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e10:	bf00      	nop
 8003e12:	3754      	adds	r7, #84	@ 0x54
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e20:	b0c0      	sub	sp, #256	@ 0x100
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	ea40 0301 	orr.w	r3, r0, r1
 8003e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e74:	f021 010c 	bic.w	r1, r1, #12
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e82:	430b      	orrs	r3, r1
 8003e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e96:	6999      	ldr	r1, [r3, #24]
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	ea40 0301 	orr.w	r3, r0, r1
 8003ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80040e8 <UART_SetConfig+0x2cc>)
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d005      	beq.n	8003ebc <UART_SetConfig+0xa0>
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80040ec <UART_SetConfig+0x2d0>)
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d104      	bne.n	8003ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ebc:	f7ff fa6c 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ec4:	e003      	b.n	8003ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ec6:	f7ff fa53 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8003eca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed8:	f040 810c 	bne.w	80040f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	1891      	adds	r1, r2, r2
 8003ef4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ef6:	415b      	adcs	r3, r3
 8003ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003efe:	4621      	mov	r1, r4
 8003f00:	eb12 0801 	adds.w	r8, r2, r1
 8003f04:	4629      	mov	r1, r5
 8003f06:	eb43 0901 	adc.w	r9, r3, r1
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1e:	4690      	mov	r8, r2
 8003f20:	4699      	mov	r9, r3
 8003f22:	4623      	mov	r3, r4
 8003f24:	eb18 0303 	adds.w	r3, r8, r3
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	eb49 0303 	adc.w	r3, r9, r3
 8003f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	18db      	adds	r3, r3, r3
 8003f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f50:	4613      	mov	r3, r2
 8003f52:	eb42 0303 	adc.w	r3, r2, r3
 8003f56:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f60:	f7fc feaa 	bl	8000cb8 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4b61      	ldr	r3, [pc, #388]	@ (80040f0 <UART_SetConfig+0x2d4>)
 8003f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	011c      	lsls	r4, r3, #4
 8003f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f94:	4641      	mov	r1, r8
 8003f96:	eb12 0a01 	adds.w	sl, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb4:	4692      	mov	sl, r2
 8003fb6:	469b      	mov	fp, r3
 8003fb8:	4643      	mov	r3, r8
 8003fba:	eb1a 0303 	adds.w	r3, sl, r3
 8003fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	18db      	adds	r3, r3, r3
 8003fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	eb42 0303 	adc.w	r3, r2, r3
 8003fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ff6:	f7fc fe5f 	bl	8000cb8 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <UART_SetConfig+0x2d4>)
 8004002:	fba3 2301 	umull	r2, r3, r3, r1
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2264      	movs	r2, #100	@ 0x64
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	1acb      	subs	r3, r1, r3
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004016:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <UART_SetConfig+0x2d4>)
 8004018:	fba3 2302 	umull	r2, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004024:	441c      	add	r4, r3
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004030:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	1891      	adds	r1, r2, r2
 800403e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004040:	415b      	adcs	r3, r3
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004048:	4641      	mov	r1, r8
 800404a:	1851      	adds	r1, r2, r1
 800404c:	6339      	str	r1, [r7, #48]	@ 0x30
 800404e:	4649      	mov	r1, r9
 8004050:	414b      	adcs	r3, r1
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004060:	4659      	mov	r1, fp
 8004062:	00cb      	lsls	r3, r1, #3
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406a:	4651      	mov	r1, sl
 800406c:	00ca      	lsls	r2, r1, #3
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	4603      	mov	r3, r0
 8004074:	4642      	mov	r2, r8
 8004076:	189b      	adds	r3, r3, r2
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800407c:	464b      	mov	r3, r9
 800407e:	460a      	mov	r2, r1
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004094:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800409c:	460b      	mov	r3, r1
 800409e:	18db      	adds	r3, r3, r3
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a2:	4613      	mov	r3, r2
 80040a4:	eb42 0303 	adc.w	r3, r2, r3
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040b2:	f7fc fe01 	bl	8000cb8 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <UART_SetConfig+0x2d4>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	@ 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	3332      	adds	r3, #50	@ 0x32
 80040ce:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <UART_SetConfig+0x2d4>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 0207 	and.w	r2, r3, #7
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4422      	add	r2, r4
 80040e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e4:	e106      	b.n	80042f4 <UART_SetConfig+0x4d8>
 80040e6:	bf00      	nop
 80040e8:	40011000 	.word	0x40011000
 80040ec:	40011400 	.word	0x40011400
 80040f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004106:	4642      	mov	r2, r8
 8004108:	464b      	mov	r3, r9
 800410a:	1891      	adds	r1, r2, r2
 800410c:	6239      	str	r1, [r7, #32]
 800410e:	415b      	adcs	r3, r3
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004116:	4641      	mov	r1, r8
 8004118:	1854      	adds	r4, r2, r1
 800411a:	4649      	mov	r1, r9
 800411c:	eb43 0501 	adc.w	r5, r3, r1
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	00eb      	lsls	r3, r5, #3
 800412a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412e:	00e2      	lsls	r2, r4, #3
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	4643      	mov	r3, r8
 8004136:	18e3      	adds	r3, r4, r3
 8004138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800413c:	464b      	mov	r3, r9
 800413e:	eb45 0303 	adc.w	r3, r5, r3
 8004142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004162:	4629      	mov	r1, r5
 8004164:	008b      	lsls	r3, r1, #2
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416c:	4621      	mov	r1, r4
 800416e:	008a      	lsls	r2, r1, #2
 8004170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004174:	f7fc fda0 	bl	8000cb8 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4b60      	ldr	r3, [pc, #384]	@ (8004300 <UART_SetConfig+0x4e4>)
 800417e:	fba3 2302 	umull	r2, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	011c      	lsls	r4, r3, #4
 8004186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418a:	2200      	movs	r2, #0
 800418c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004190:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	1891      	adds	r1, r2, r2
 800419e:	61b9      	str	r1, [r7, #24]
 80041a0:	415b      	adcs	r3, r3
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a8:	4641      	mov	r1, r8
 80041aa:	1851      	adds	r1, r2, r1
 80041ac:	6139      	str	r1, [r7, #16]
 80041ae:	4649      	mov	r1, r9
 80041b0:	414b      	adcs	r3, r1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c0:	4659      	mov	r1, fp
 80041c2:	00cb      	lsls	r3, r1, #3
 80041c4:	4651      	mov	r1, sl
 80041c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ca:	4651      	mov	r1, sl
 80041cc:	00ca      	lsls	r2, r1, #3
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	4642      	mov	r2, r8
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041dc:	464b      	mov	r3, r9
 80041de:	460a      	mov	r2, r1
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004200:	4649      	mov	r1, r9
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	4641      	mov	r1, r8
 8004206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420a:	4641      	mov	r1, r8
 800420c:	008a      	lsls	r2, r1, #2
 800420e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004212:	f7fc fd51 	bl	8000cb8 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4611      	mov	r1, r2
 800421c:	4b38      	ldr	r3, [pc, #224]	@ (8004300 <UART_SetConfig+0x4e4>)
 800421e:	fba3 2301 	umull	r2, r3, r3, r1
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	@ 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	@ 0x32
 8004230:	4a33      	ldr	r2, [pc, #204]	@ (8004300 <UART_SetConfig+0x4e4>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800423c:	441c      	add	r4, r3
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	673b      	str	r3, [r7, #112]	@ 0x70
 8004246:	677a      	str	r2, [r7, #116]	@ 0x74
 8004248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	415b      	adcs	r3, r3
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800425c:	4641      	mov	r1, r8
 800425e:	1851      	adds	r1, r2, r1
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	4649      	mov	r1, r9
 8004264:	414b      	adcs	r3, r1
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004274:	4659      	mov	r1, fp
 8004276:	00cb      	lsls	r3, r1, #3
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427e:	4651      	mov	r1, sl
 8004280:	00ca      	lsls	r2, r1, #3
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	4603      	mov	r3, r0
 8004288:	4642      	mov	r2, r8
 800428a:	189b      	adds	r3, r3, r2
 800428c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800428e:	464b      	mov	r3, r9
 8004290:	460a      	mov	r2, r1
 8004292:	eb42 0303 	adc.w	r3, r2, r3
 8004296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80042a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042b0:	4649      	mov	r1, r9
 80042b2:	008b      	lsls	r3, r1, #2
 80042b4:	4641      	mov	r1, r8
 80042b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ba:	4641      	mov	r1, r8
 80042bc:	008a      	lsls	r2, r1, #2
 80042be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042c2:	f7fc fcf9 	bl	8000cb8 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <UART_SetConfig+0x4e4>)
 80042cc:	fba3 1302 	umull	r1, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2164      	movs	r1, #100	@ 0x64
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	3332      	adds	r3, #50	@ 0x32
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <UART_SetConfig+0x4e4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4422      	add	r2, r4
 80042f2:	609a      	str	r2, [r3, #8]
}
 80042f4:	bf00      	nop
 80042f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042fa:	46bd      	mov	sp, r7
 80042fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004300:	51eb851f 	.word	0x51eb851f

08004304 <Lcd1602GetInterfaceType>:
		UNDEFINED_GPIO
    };

// Get interface type to communicate with LCD1602 Display
Lcd1602InterfaceType Lcd1602GetInterfaceType()
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
    return g_lcd1602_interface_type;
 8004308:	4b03      	ldr	r3, [pc, #12]	@ (8004318 <Lcd1602GetInterfaceType+0x14>)
 800430a:	781b      	ldrb	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	2000002c 	.word	0x2000002c

0800431c <Lcd1602SetInterfaceType>:

// Set interface type to communicate with LCD1602 Display
void Lcd1602SetInterfaceType(Lcd1602InterfaceType interface_type)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
	g_lcd1602_interface_type = interface_type;
 8004326:	4a04      	ldr	r2, [pc, #16]	@ (8004338 <Lcd1602SetInterfaceType+0x1c>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	7013      	strb	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	2000002c 	.word	0x2000002c

0800433c <Lcd1602Configure>:
// Configure interface type, data bus and registers of the LCD1602
void Lcd1602Configure(Lcd1602InterfaceType interface_type,
		              GpioItem lcd1602_gpio_data_bus[],
					  GpioItem enable_signal,
					  GpioItem register_selection)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	4639      	mov	r1, r7
 8004346:	e881 000c 	stmia.w	r1, {r2, r3}
 800434a:	4603      	mov	r3, r0
 800434c:	73fb      	strb	r3, [r7, #15]
	Lcd1602SetInterfaceType(interface_type);
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ffe3 	bl	800431c <Lcd1602SetInterfaceType>
	Lcd1602ConfigureDataBus(lcd1602_gpio_data_bus);
 8004356:	68b8      	ldr	r0, [r7, #8]
 8004358:	f000 f8d2 	bl	8004500 <Lcd1602ConfigureDataBus>
	Lcd1602ConfigureE(enable_signal);
 800435c:	463b      	mov	r3, r7
 800435e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004362:	f000 f909 	bl	8004578 <Lcd1602ConfigureE>
	Lcd1602ConfigureRS(register_selection);
 8004366:	f107 0318 	add.w	r3, r7, #24
 800436a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800436e:	f000 f8ef 	bl	8004550 <Lcd1602ConfigureRS>
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <Lcd1602ConfigureI2C>:

// Configure data bus of the LCD1602/PCF8574T for the i2c mode
void Lcd1602ConfigureI2C(GpioItem lcd1602_gpio_data_bus[])
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
    Lcd1602Configure(LCD1602_I2C, lcd1602_gpio_data_bus, UNDEFINED_GPIO, UNDEFINED_GPIO);
 8004384:	4a08      	ldr	r2, [pc, #32]	@ (80043a8 <Lcd1602ConfigureI2C+0x2c>)
 8004386:	4908      	ldr	r1, [pc, #32]	@ (80043a8 <Lcd1602ConfigureI2C+0x2c>)
 8004388:	466b      	mov	r3, sp
 800438a:	c903      	ldmia	r1, {r0, r1}
 800438c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004390:	ca0c      	ldmia	r2, {r2, r3}
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	2002      	movs	r0, #2
 8004396:	f7ff ffd1 	bl	800433c <Lcd1602Configure>
    Lcd1602Initialize();
 800439a:	f000 f845 	bl	8004428 <Lcd1602Initialize>
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	0800a540 	.word	0x0800a540

080043ac <Lcd1602Configure4Bits>:

// Configure data bus and registers of the LCD1602 for the 4-bits mode
void Lcd1602Configure4Bits(GpioItem lcd1602_gpio_data_bus[], GpioItem enable_signal, GpioItem register_selection)
{
 80043ac:	b082      	sub	sp, #8
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af02      	add	r7, sp, #8
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	1d38      	adds	r0, r7, #4
 80043b8:	e880 0006 	stmia.w	r0, {r1, r2}
 80043bc:	61fb      	str	r3, [r7, #28]
    Lcd1602Configure(LCD1602_DATA_BUS_SIZE4, lcd1602_gpio_data_bus, enable_signal, register_selection);
 80043be:	466a      	mov	r2, sp
 80043c0:	f107 031c 	add.w	r3, r7, #28
 80043c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	cb0c      	ldmia	r3, {r2, r3}
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	2004      	movs	r0, #4
 80043d4:	f7ff ffb2 	bl	800433c <Lcd1602Configure>
    Lcd1602Initialize();
 80043d8:	f000 f826 	bl	8004428 <Lcd1602Initialize>
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e6:	b002      	add	sp, #8
 80043e8:	4770      	bx	lr

080043ea <Lcd1602Configure8Bits>:

// Configure data bus and registers of the LCD1602 for the 8-bits mode
void Lcd1602Configure8Bits(GpioItem lcd1602_gpio_data_bus[], GpioItem enable_signal, GpioItem register_selection)
{
 80043ea:	b082      	sub	sp, #8
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	1d38      	adds	r0, r7, #4
 80043f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80043fa:	61fb      	str	r3, [r7, #28]
    Lcd1602Configure(LCD1602_DATA_BUS_SIZE8, lcd1602_gpio_data_bus, enable_signal, register_selection);
 80043fc:	466a      	mov	r2, sp
 80043fe:	f107 031c 	add.w	r3, r7, #28
 8004402:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004406:	e882 0003 	stmia.w	r2, {r0, r1}
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	cb0c      	ldmia	r3, {r2, r3}
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	2008      	movs	r0, #8
 8004412:	f7ff ff93 	bl	800433c <Lcd1602Configure>
    Lcd1602Initialize();
 8004416:	f000 f807 	bl	8004428 <Lcd1602Initialize>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004424:	b002      	add	sp, #8
 8004426:	4770      	bx	lr

08004428 <Lcd1602Initialize>:

// Initialize the Display
void Lcd1602Initialize()
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	HAL_Delay(60);
 800442c:	203c      	movs	r0, #60	@ 0x3c
 800442e:	f7fd fc29 	bl	8001c84 <HAL_Delay>
	if (Lcd1602GetInterfaceType() == LCD1602_I2C)
 8004432:	f7ff ff67 	bl	8004304 <Lcd1602GetInterfaceType>
 8004436:	4603      	mov	r3, r0
 8004438:	2b02      	cmp	r3, #2
 800443a:	d102      	bne.n	8004442 <Lcd1602Initialize+0x1a>
	{
		Lcd1602InitializeThrougPCF8574T();
 800443c:	f000 f836 	bl	80044ac <Lcd1602InitializeThrougPCF8574T>
 8004440:	e019      	b.n	8004476 <Lcd1602Initialize+0x4e>
	}
	else if (Lcd1602GetInterfaceType() == LCD1602_DATA_BUS_SIZE4)
 8004442:	f7ff ff5f 	bl	8004304 <Lcd1602GetInterfaceType>
 8004446:	4603      	mov	r3, r0
 8004448:	2b04      	cmp	r3, #4
 800444a:	d109      	bne.n	8004460 <Lcd1602Initialize+0x38>
    {
        // 4-bits bus mode
		Lcd1602Write2NibblesToCommandRegister(LCD1602_BIT4_FIRST_INITIALIZATION_BYTE);
 800444c:	2033      	movs	r0, #51	@ 0x33
 800444e:	f000 fa18 	bl	8004882 <Lcd1602Write2NibblesToCommandRegister>
		Lcd1602Write2NibblesToCommandRegister(LCD1602_BIT4_SECOND_INITIALIZATION_BYTE);
 8004452:	2032      	movs	r0, #50	@ 0x32
 8004454:	f000 fa15 	bl	8004882 <Lcd1602Write2NibblesToCommandRegister>
		// Send the Function Set command with DL=0 flag (i.e. 4-bits), N=1 flag (i.e. 2R) and F=0 (i.e. 5x8 character font)
    	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_N_2R);
 8004458:	2028      	movs	r0, #40	@ 0x28
 800445a:	f000 fa32 	bl	80048c2 <Lcd1602WriteByteToCommandRegister>
 800445e:	e00a      	b.n	8004476 <Lcd1602Initialize+0x4e>
    }
    else if (Lcd1602GetInterfaceType() == LCD1602_DATA_BUS_SIZE8)
 8004460:	f7ff ff50 	bl	8004304 <Lcd1602GetInterfaceType>
 8004464:	4603      	mov	r3, r0
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11e      	bne.n	80044a8 <Lcd1602Initialize+0x80>
    {
        // 8-bits bus mode
    	// Send the Function Set command with DL=1 flag (i.e. 8-bits), N=1 flag (i.e. 2R) and F=0 (i.e. 5x8 character font)
    	Lcd1602WriteByteToCommandRegister(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_DL_8D | LCD1602_FLAG_N_2R);
 800446a:	2038      	movs	r0, #56	@ 0x38
 800446c:	f000 fa29 	bl	80048c2 <Lcd1602WriteByteToCommandRegister>
    	HAL_Delay(20);
 8004470:	2014      	movs	r0, #20
 8004472:	f7fd fc07 	bl	8001c84 <HAL_Delay>
    else
    {
        // Unsupported interface type
    	return;
    }
	HAL_Delay(1);
 8004476:	2001      	movs	r0, #1
 8004478:	f7fd fc04 	bl	8001c84 <HAL_Delay>

	// Common part of initialization
    // Switch Display on; cursor off; blink off
	Lcd1602ShowDisplay();
 800447c:	f000 fa77 	bl	800496e <Lcd1602ShowDisplay>

	if (Lcd1602GetInterfaceType() == LCD1602_DATA_BUS_SIZE8)
 8004480:	f7ff ff40 	bl	8004304 <Lcd1602GetInterfaceType>
 8004484:	4603      	mov	r3, r0
 8004486:	2b08      	cmp	r3, #8
 8004488:	d105      	bne.n	8004496 <Lcd1602Initialize+0x6e>
    {
    	// 8-bits bus mode
        // Send the Function Set command with DL=1 flag (i.e. 8-bits), N=1 flag (i.e. 2R) and F=0 (i.e. 5x8 character font)
        Lcd1602WriteByteToCommandRegister(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_DL_8D | LCD1602_FLAG_N_2R);
 800448a:	2038      	movs	r0, #56	@ 0x38
 800448c:	f000 fa19 	bl	80048c2 <Lcd1602WriteByteToCommandRegister>
        HAL_Delay(20);
 8004490:	2014      	movs	r0, #20
 8004492:	f7fd fbf7 	bl	8001c84 <HAL_Delay>
    }
    // Set increment moving direction of cursor (cursor to increment automatically after writing a character; the display is not shifting)
    Lcd1602SetIncrementDirection();
 8004496:	f000 fa55 	bl	8004944 <Lcd1602SetIncrementDirection>
	// Screen Clear; Set Address counter for DDRAM & CGRAM to 0
	Lcd1602ScreenClear();
 800449a:	f000 fa30 	bl	80048fe <Lcd1602ScreenClear>
	// Return Home
	Lcd1602SetCursor(0, 0);
 800449e:	2100      	movs	r1, #0
 80044a0:	2000      	movs	r0, #0
 80044a2:	f000 fa93 	bl	80049cc <Lcd1602SetCursor>
 80044a6:	e000      	b.n	80044aa <Lcd1602Initialize+0x82>
    	return;
 80044a8:	bf00      	nop
}
 80044aa:	bd80      	pop	{r7, pc}

080044ac <Lcd1602InitializeThrougPCF8574T>:

// Initialize the Display 1602 through I2C converter PCF8574T
void Lcd1602InitializeThrougPCF8574T()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
    // Configure LCD1602 for 4-bit mode through I2C converter PCF8574T
	Lcd1602Send2PausedNibblesThroughPCF8574T(LCD1602_BIT4_FIRST_INITIALIZATION_BYTE);
 80044b0:	2033      	movs	r0, #51	@ 0x33
 80044b2:	f000 f929 	bl	8004708 <Lcd1602Send2PausedNibblesThroughPCF8574T>
	TIM2MicrosecondsDelay(100);
 80044b6:	2064      	movs	r0, #100	@ 0x64
 80044b8:	f7fd fb5a 	bl	8001b70 <TIM2MicrosecondsDelay>
	Lcd1602Send2PausedNibblesThroughPCF8574T(LCD1602_BIT4_SECOND_INITIALIZATION_BYTE);
 80044bc:	2032      	movs	r0, #50	@ 0x32
 80044be:	f000 f923 	bl	8004708 <Lcd1602Send2PausedNibblesThroughPCF8574T>
	Lcd1602SendCommandThroughPCF8574T(LCD1602_CMD_FUNCTION_SET | LCD1602_FLAG_N_2R);
 80044c2:	2028      	movs	r0, #40	@ 0x28
 80044c4:	f000 f990 	bl	80047e8 <Lcd1602SendCommandThroughPCF8574T>
}
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}

080044cc <Lcd1602SendByteThrougPCF8574T>:
    }
}

// Send byte to LCD1602 through I2C (i.e. PCF8574T converter)
void Lcd1602SendByteThrougPCF8574T(uint8_t byte)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
    uint8_t byte_with_backlight = byte | PCF8574T_K;
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	f043 0308 	orr.w	r3, r3, #8
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, (uint8_t*)&byte_with_backlight, 1, 15);
 80044e0:	f107 020f 	add.w	r2, r7, #15
 80044e4:	230f      	movs	r3, #15
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2301      	movs	r3, #1
 80044ea:	214e      	movs	r1, #78	@ 0x4e
 80044ec:	4803      	ldr	r0, [pc, #12]	@ (80044fc <Lcd1602SendByteThrougPCF8574T+0x30>)
 80044ee:	f7fd ffb5 	bl	800245c <HAL_I2C_Master_Transmit>
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000258 	.word	0x20000258

08004500 <Lcd1602ConfigureDataBus>:
	Lcd1602SetInterfaceType(data_bus_size);
}

// Configure a data bus pins' set
void Lcd1602ConfigureDataBus(GpioItem lcd1602_gpio_data_bus[])
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < g_lcd1602_interface_type; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	e00f      	b.n	800452e <Lcd1602ConfigureDataBus+0x2e>
    {
        g_lcd1602_gpio_data_bus[i] = lcd1602_gpio_data_bus[i];
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	18d1      	adds	r1, r2, r3
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	4a0b      	ldr	r2, [pc, #44]	@ (8004548 <Lcd1602ConfigureDataBus+0x48>)
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	460a      	mov	r2, r1
 8004520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004524:	e883 0003 	stmia.w	r3, {r0, r1}
    for (uint8_t i = 0; i < g_lcd1602_interface_type; i++)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	3301      	adds	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	4b07      	ldr	r3, [pc, #28]	@ (800454c <Lcd1602ConfigureDataBus+0x4c>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	7bfa      	ldrb	r2, [r7, #15]
 8004534:	429a      	cmp	r2, r3
 8004536:	d3ea      	bcc.n	800450e <Lcd1602ConfigureDataBus+0xe>
    }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000030 	.word	0x20000030
 800454c:	2000002c 	.word	0x2000002c

08004550 <Lcd1602ConfigureRS>:

// Configure Instruction/Data register selection pin
void Lcd1602ConfigureRS(GpioItem register_selection)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	463b      	mov	r3, r7
 8004558:	e883 0003 	stmia.w	r3, {r0, r1}
	g_lcd1602_gpio_rs.gpio_type = register_selection.gpio_type;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4a05      	ldr	r2, [pc, #20]	@ (8004574 <Lcd1602ConfigureRS+0x24>)
 8004560:	6013      	str	r3, [r2, #0]
	g_lcd1602_gpio_rs.gpio_pin = register_selection.gpio_pin;
 8004562:	88ba      	ldrh	r2, [r7, #4]
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <Lcd1602ConfigureRS+0x24>)
 8004566:	809a      	strh	r2, [r3, #4]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	2000038c 	.word	0x2000038c

08004578 <Lcd1602ConfigureE>:

// Configure Enable signal pin
void Lcd1602ConfigureE(GpioItem enable_signal)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	463b      	mov	r3, r7
 8004580:	e883 0003 	stmia.w	r3, {r0, r1}
	g_lcd1602_gpio_e.gpio_type = enable_signal.gpio_type;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4a05      	ldr	r2, [pc, #20]	@ (800459c <Lcd1602ConfigureE+0x24>)
 8004588:	6013      	str	r3, [r2, #0]
	g_lcd1602_gpio_e.gpio_pin = enable_signal.gpio_pin;
 800458a:	88ba      	ldrh	r2, [r7, #4]
 800458c:	4b03      	ldr	r3, [pc, #12]	@ (800459c <Lcd1602ConfigureE+0x24>)
 800458e:	809a      	strh	r2, [r3, #4]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000394 	.word	0x20000394

080045a0 <Lcd1602SetDataBusAndWrite>:

// Prepare a data bus and write
void Lcd1602SetDataBusAndWrite(uint8_t data)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	71fb      	strb	r3, [r7, #7]
    // Prepare data bus pins
	for (uint8_t i = 0; i < g_lcd1602_interface_type; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	e016      	b.n	80045de <Lcd1602SetDataBusAndWrite+0x3e>
	{
		HAL_GPIO_WritePin(g_lcd1602_gpio_data_bus[i].gpio_type,
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <Lcd1602SetDataBusAndWrite+0x78>)
 80045b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	4a17      	ldr	r2, [pc, #92]	@ (8004618 <Lcd1602SetDataBusAndWrite+0x78>)
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	8899      	ldrh	r1, [r3, #4]
				          g_lcd1602_gpio_data_bus[i].gpio_pin, (data >> i) & 0x01);
 80045c2:	79fa      	ldrb	r2, [r7, #7]
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	fa42 f303 	asr.w	r3, r2, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(g_lcd1602_gpio_data_bus[i].gpio_type,
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fd fde4 	bl	80021a0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < g_lcd1602_interface_type; i++)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	3301      	adds	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	4b0f      	ldr	r3, [pc, #60]	@ (800461c <Lcd1602SetDataBusAndWrite+0x7c>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3e3      	bcc.n	80045b0 <Lcd1602SetDataBusAndWrite+0x10>
	}

    // Enable to write
	HAL_GPIO_WritePin(g_lcd1602_gpio_e.gpio_type, g_lcd1602_gpio_e.gpio_pin, GPIO_PIN_SET);
 80045e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <Lcd1602SetDataBusAndWrite+0x80>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004620 <Lcd1602SetDataBusAndWrite+0x80>)
 80045ee:	8891      	ldrh	r1, [r2, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fdd4 	bl	80021a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80045f8:	2001      	movs	r0, #1
 80045fa:	f7fd fb43 	bl	8001c84 <HAL_Delay>
    HAL_GPIO_WritePin(g_lcd1602_gpio_e.gpio_type, g_lcd1602_gpio_e.gpio_pin, GPIO_PIN_RESET);
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <Lcd1602SetDataBusAndWrite+0x80>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a07      	ldr	r2, [pc, #28]	@ (8004620 <Lcd1602SetDataBusAndWrite+0x80>)
 8004604:	8891      	ldrh	r1, [r2, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd fdc9 	bl	80021a0 <HAL_GPIO_WritePin>
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000030 	.word	0x20000030
 800461c:	2000002c 	.word	0x2000002c
 8004620:	20000394 	.word	0x20000394

08004624 <Lcd1602SelectCommandDataRegister>:

// Select instruction or data register to write
void Lcd1602SelectCommandDataRegister(GPIO_PinState command_data_register)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(g_lcd1602_gpio_rs.gpio_type, g_lcd1602_gpio_rs.gpio_pin, command_data_register);
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <Lcd1602SelectCommandDataRegister+0x24>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a05      	ldr	r2, [pc, #20]	@ (8004648 <Lcd1602SelectCommandDataRegister+0x24>)
 8004634:	8891      	ldrh	r1, [r2, #4]
 8004636:	79fa      	ldrb	r2, [r7, #7]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fd fdb1 	bl	80021a0 <HAL_GPIO_WritePin>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000038c 	.word	0x2000038c

0800464c <Lcd1602WriteByteToRegister>:

// Write byte to the instruction or data register
void Lcd1602WriteByteToRegister(uint8_t data, GPIO_PinState command_data_register)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	460a      	mov	r2, r1
 8004656:	71fb      	strb	r3, [r7, #7]
 8004658:	4613      	mov	r3, r2
 800465a:	71bb      	strb	r3, [r7, #6]
    if (Lcd1602GetInterfaceType() == LCD1602_I2C)
 800465c:	f7ff fe52 	bl	8004304 <Lcd1602GetInterfaceType>
 8004660:	4603      	mov	r3, r0
 8004662:	2b02      	cmp	r3, #2
 8004664:	d10c      	bne.n	8004680 <Lcd1602WriteByteToRegister+0x34>
    {
        // This function does not support I2C interface
    	if (command_data_register == GPIO_PIN_SET)
 8004666:	79bb      	ldrb	r3, [r7, #6]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d104      	bne.n	8004676 <Lcd1602WriteByteToRegister+0x2a>
    	{
            Lcd1602SendDataThroughPCF8574T(data);
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f8cb 	bl	800480a <Lcd1602SendDataThroughPCF8574T>
    	}
    	else
    	{
    		Lcd1602SendCommandThroughPCF8574T(data);
    	}
    	return;
 8004674:	e026      	b.n	80046c4 <Lcd1602WriteByteToRegister+0x78>
    		Lcd1602SendCommandThroughPCF8574T(data);
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f8b5 	bl	80047e8 <Lcd1602SendCommandThroughPCF8574T>
    	return;
 800467e:	e021      	b.n	80046c4 <Lcd1602WriteByteToRegister+0x78>
    }

	Lcd1602SelectCommandDataRegister(command_data_register);
 8004680:	79bb      	ldrb	r3, [r7, #6]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ffce 	bl	8004624 <Lcd1602SelectCommandDataRegister>

    if (Lcd1602GetInterfaceType() == LCD1602_DATA_BUS_SIZE4)
 8004688:	f7ff fe3c 	bl	8004304 <Lcd1602GetInterfaceType>
 800468c:	4603      	mov	r3, r0
 800468e:	2b04      	cmp	r3, #4
 8004690:	d10d      	bne.n	80046ae <Lcd1602WriteByteToRegister+0x62>
    {
        // 4-bit mode
    	Lcd1602SetDataBusAndWrite(data >> 4);
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff81 	bl	80045a0 <Lcd1602SetDataBusAndWrite>
    	Lcd1602SetDataBusAndWrite(data & 0x0F);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff7a 	bl	80045a0 <Lcd1602SetDataBusAndWrite>
 80046ac:	e00a      	b.n	80046c4 <Lcd1602WriteByteToRegister+0x78>
    }
    else if (Lcd1602GetInterfaceType() == LCD1602_DATA_BUS_SIZE8)
 80046ae:	f7ff fe29 	bl	8004304 <Lcd1602GetInterfaceType>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d104      	bne.n	80046c2 <Lcd1602WriteByteToRegister+0x76>
    {
        // 8-bit mode
    	Lcd1602SetDataBusAndWrite(data);
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff70 	bl	80045a0 <Lcd1602SetDataBusAndWrite>
 80046c0:	e000      	b.n	80046c4 <Lcd1602WriteByteToRegister+0x78>
    }
    else
    {
        // Unsupported interface type
    	return;
 80046c2:	bf00      	nop
    }
}
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <Lcd1602EnableToTransmitThroughPCF8574T>:

// Send Enable Pulse to LCD1602 through I2C converter PCF8574T
void Lcd1602EnableToTransmitThroughPCF8574T(uint8_t byte)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	71fb      	strb	r3, [r7, #7]
    uint8_t enabled_byte = byte | PCF8574T_E;
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	f043 0304 	orr.w	r3, r3, #4
 80046da:	73fb      	strb	r3, [r7, #15]
    uint8_t disabled_byte = byte & (~PCF8574T_E);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	73bb      	strb	r3, [r7, #14]
	Lcd1602SendByteThrougPCF8574T(enabled_byte);
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fef0 	bl	80044cc <Lcd1602SendByteThrougPCF8574T>
    TIM2MicrosecondsDelay(20);
 80046ec:	2014      	movs	r0, #20
 80046ee:	f7fd fa3f 	bl	8001b70 <TIM2MicrosecondsDelay>
    Lcd1602SendByteThrougPCF8574T(disabled_byte);
 80046f2:	7bbb      	ldrb	r3, [r7, #14]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fee9 	bl	80044cc <Lcd1602SendByteThrougPCF8574T>
    TIM2MicrosecondsDelay(20);
 80046fa:	2014      	movs	r0, #20
 80046fc:	f7fd fa38 	bl	8001b70 <TIM2MicrosecondsDelay>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <Lcd1602Send2PausedNibblesThroughPCF8574T>:

// Send 2 Nibbles with pause to the instruction register through the converter PCF8574T with pause
void Lcd1602Send2PausedNibblesThroughPCF8574T(uint8_t data)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
    uint8_t byte = (data & 0xF0) | PCF8574T_RS_COMMAND;
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	f023 030f 	bic.w	r3, r3, #15
 8004718:	b2db      	uxtb	r3, r3
 800471a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, (uint8_t*)&byte, 1, 15);
 800471c:	f107 020f 	add.w	r2, r7, #15
 8004720:	230f      	movs	r3, #15
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2301      	movs	r3, #1
 8004726:	214e      	movs	r1, #78	@ 0x4e
 8004728:	480f      	ldr	r0, [pc, #60]	@ (8004768 <Lcd1602Send2PausedNibblesThroughPCF8574T+0x60>)
 800472a:	f7fd fe97 	bl	800245c <HAL_I2C_Master_Transmit>
	Lcd1602EnableToTransmitThroughPCF8574T(byte);
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ffca 	bl	80046ca <Lcd1602EnableToTransmitThroughPCF8574T>
	TIM2MicrosecondsDelay(4100);
 8004736:	f241 0004 	movw	r0, #4100	@ 0x1004
 800473a:	f7fd fa19 	bl	8001b70 <TIM2MicrosecondsDelay>
	byte = ((data << 4) & 0xF0) | PCF8574T_RS_COMMAND;
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	b2db      	uxtb	r3, r3
 8004744:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, (uint8_t*)&byte, 1, 15);
 8004746:	f107 020f 	add.w	r2, r7, #15
 800474a:	230f      	movs	r3, #15
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2301      	movs	r3, #1
 8004750:	214e      	movs	r1, #78	@ 0x4e
 8004752:	4805      	ldr	r0, [pc, #20]	@ (8004768 <Lcd1602Send2PausedNibblesThroughPCF8574T+0x60>)
 8004754:	f7fd fe82 	bl	800245c <HAL_I2C_Master_Transmit>
	Lcd1602EnableToTransmitThroughPCF8574T(byte);
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ffb5 	bl	80046ca <Lcd1602EnableToTransmitThroughPCF8574T>
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000258 	.word	0x20000258

0800476c <Lcd1602Send2NibblesThroughPCF8574T>:

// Send 2 Nibbles through the converter PCF8574T
void Lcd1602Send2NibblesThroughPCF8574T(uint8_t data, uint8_t mode)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af02      	add	r7, sp, #8
 8004772:	4603      	mov	r3, r0
 8004774:	460a      	mov	r2, r1
 8004776:	71fb      	strb	r3, [r7, #7]
 8004778:	4613      	mov	r3, r2
 800477a:	71bb      	strb	r3, [r7, #6]
    uint8_t byte = (data & 0xF0) | mode;
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	f023 030f 	bic.w	r3, r3, #15
 8004784:	b25a      	sxtb	r2, r3
 8004786:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800478a:	4313      	orrs	r3, r2
 800478c:	b25b      	sxtb	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, (uint8_t*)&byte, 1, 15);
 8004792:	f107 020f 	add.w	r2, r7, #15
 8004796:	230f      	movs	r3, #15
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2301      	movs	r3, #1
 800479c:	214e      	movs	r1, #78	@ 0x4e
 800479e:	4811      	ldr	r0, [pc, #68]	@ (80047e4 <Lcd1602Send2NibblesThroughPCF8574T+0x78>)
 80047a0:	f7fd fe5c 	bl	800245c <HAL_I2C_Master_Transmit>
	Lcd1602EnableToTransmitThroughPCF8574T(byte);
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff8f 	bl	80046ca <Lcd1602EnableToTransmitThroughPCF8574T>
	byte = ((data << 4) & 0xF0) | mode;
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	b25a      	sxtb	r2, r3
 80047b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, (uint8_t*)&byte, 1, 15);
 80047c0:	f107 020f 	add.w	r2, r7, #15
 80047c4:	230f      	movs	r3, #15
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2301      	movs	r3, #1
 80047ca:	214e      	movs	r1, #78	@ 0x4e
 80047cc:	4805      	ldr	r0, [pc, #20]	@ (80047e4 <Lcd1602Send2NibblesThroughPCF8574T+0x78>)
 80047ce:	f7fd fe45 	bl	800245c <HAL_I2C_Master_Transmit>
	Lcd1602EnableToTransmitThroughPCF8574T(byte);
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff78 	bl	80046ca <Lcd1602EnableToTransmitThroughPCF8574T>
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000258 	.word	0x20000258

080047e8 <Lcd1602SendCommandThroughPCF8574T>:

// Send command byte through the converter PCF8574T
void Lcd1602SendCommandThroughPCF8574T(uint8_t command)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
	Lcd1602Send2NibblesThroughPCF8574T(command, PCF8574T_RS_COMMAND);
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff ffb8 	bl	800476c <Lcd1602Send2NibblesThroughPCF8574T>
	HAL_Delay(1);
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fd fa41 	bl	8001c84 <HAL_Delay>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <Lcd1602SendDataThroughPCF8574T>:

// Send data byte through the converter PCF8574T
void Lcd1602SendDataThroughPCF8574T(uint8_t data)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	4603      	mov	r3, r0
 8004812:	71fb      	strb	r3, [r7, #7]
	Lcd1602Send2NibblesThroughPCF8574T(data, PCF8574T_RS_DATA);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	2101      	movs	r1, #1
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ffa7 	bl	800476c <Lcd1602Send2NibblesThroughPCF8574T>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <Lcd1602SendCommand>:

// Send command to LCD1602 through current channel
void Lcd1602SendCommand(uint8_t command)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	71fb      	strb	r3, [r7, #7]
    if (Lcd1602GetInterfaceType() == LCD1602_I2C)
 8004830:	f7ff fd68 	bl	8004304 <Lcd1602GetInterfaceType>
 8004834:	4603      	mov	r3, r0
 8004836:	2b02      	cmp	r3, #2
 8004838:	d104      	bne.n	8004844 <Lcd1602SendCommand+0x1e>
    {
    	Lcd1602SendCommandThroughPCF8574T(command);
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ffd3 	bl	80047e8 <Lcd1602SendCommandThroughPCF8574T>
    }
    else
    {
    	Lcd1602WriteByteToCommandRegister(command);
    }
}
 8004842:	e003      	b.n	800484c <Lcd1602SendCommand+0x26>
    	Lcd1602WriteByteToCommandRegister(command);
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f83b 	bl	80048c2 <Lcd1602WriteByteToCommandRegister>
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <Lcd1602SendDataByte>:

// Send data byte to LCD1602 through current channel
void Lcd1602SendDataByte(uint8_t data)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
	if (Lcd1602GetInterfaceType() == LCD1602_I2C)
 800485e:	f7ff fd51 	bl	8004304 <Lcd1602GetInterfaceType>
 8004862:	4603      	mov	r3, r0
 8004864:	2b02      	cmp	r3, #2
 8004866:	d104      	bne.n	8004872 <Lcd1602SendDataByte+0x1e>
    {
        Lcd1602SendDataThroughPCF8574T(data);
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff ffcd 	bl	800480a <Lcd1602SendDataThroughPCF8574T>
    }
    else
    {
        Lcd1602WriteByteToDataRegister(data);
    }
}
 8004870:	e003      	b.n	800487a <Lcd1602SendDataByte+0x26>
        Lcd1602WriteByteToDataRegister(data);
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f833 	bl	80048e0 <Lcd1602WriteByteToDataRegister>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <Lcd1602Write2NibblesToCommandRegister>:

// Write 2 Nibbles to the instruction register with pause
void Lcd1602Write2NibblesToCommandRegister(uint8_t data)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	4603      	mov	r3, r0
 800488a:	71fb      	strb	r3, [r7, #7]
	Lcd1602SelectCommandDataRegister(LCD1602_COMMAND_REG);
 800488c:	2300      	movs	r3, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fec8 	bl	8004624 <Lcd1602SelectCommandDataRegister>

    Lcd1602SetDataBusAndWrite(data >> 4);
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fe80 	bl	80045a0 <Lcd1602SetDataBusAndWrite>
    HAL_Delay(5);
 80048a0:	2005      	movs	r0, #5
 80048a2:	f7fd f9ef 	bl	8001c84 <HAL_Delay>
    Lcd1602SetDataBusAndWrite(data & 0x0F);
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fe76 	bl	80045a0 <Lcd1602SetDataBusAndWrite>
    HAL_Delay(1);
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fd f9e5 	bl	8001c84 <HAL_Delay>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <Lcd1602WriteByteToCommandRegister>:

// Write byte to the instruction register
void Lcd1602WriteByteToCommandRegister(uint8_t command)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	71fb      	strb	r3, [r7, #7]
	Lcd1602WriteByteToRegister(command, LCD1602_COMMAND_REG);
 80048cc:	2200      	movs	r2, #0
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff feba 	bl	800464c <Lcd1602WriteByteToRegister>
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <Lcd1602WriteByteToDataRegister>:
// Write byte to the data register
void Lcd1602WriteByteToDataRegister(uint8_t data)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
	Lcd1602WriteByteToRegister(data, LCD1602_DATA_REG);
 80048ea:	2201      	movs	r2, #1
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff feab 	bl	800464c <Lcd1602WriteByteToRegister>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <Lcd1602ScreenClear>:

// Screen Clear; Set Address counter for DDRAM & CGRAM to 0
void Lcd1602ScreenClear()
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	af00      	add	r7, sp, #0
	Lcd1602SendCommand(LCD1602_CMD_SCREEN_CLEAR);
 8004902:	2001      	movs	r0, #1
 8004904:	f7ff ff8f 	bl	8004826 <Lcd1602SendCommand>
}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}

0800490c <Lcd1602CursorReturn>:

// Set DDRAM AD to 0; Set Cursor position to (0,0); Content of the DDRAM is not changed
void Lcd1602CursorReturn()
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
	Lcd1602SendCommand(LCD1602_CMD_CURSOR_RETURN);
 8004910:	2002      	movs	r0, #2
 8004912:	f7ff ff88 	bl	8004826 <Lcd1602SendCommand>
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}

0800491a <Lcd1602MoveCursorToLeft>:

// Set moving direction of cursor to left while moving
void Lcd1602MoveCursorToLeft()
{
 800491a:	b580      	push	{r7, lr}
 800491c:	af00      	add	r7, sp, #0
	Lcd1602SendCommand(LCD1602_CMD_SHIFT);
 800491e:	2010      	movs	r0, #16
 8004920:	f7ff ff81 	bl	8004826 <Lcd1602SendCommand>
}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}

08004928 <Lcd1602MoveCursorToRight>:

// Set moving direction of cursor to right while moving
void Lcd1602MoveCursorToRight()
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_SHIFT | LCD1602_FLAG_RIGHT_SHIFT);
 800492c:	2014      	movs	r0, #20
 800492e:	f7ff ff7a 	bl	8004826 <Lcd1602SendCommand>
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}

08004936 <Lcd1602SetDecrementDirection>:

// Set decrement cursor moving direction
void Lcd1602SetDecrementDirection()
{
 8004936:	b580      	push	{r7, lr}
 8004938:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_INPUT_SET);
 800493a:	2004      	movs	r0, #4
 800493c:	f7ff ff73 	bl	8004826 <Lcd1602SendCommand>
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}

08004944 <Lcd1602SetIncrementDirection>:

// Set increment cursor moving direction
void Lcd1602SetIncrementDirection()
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_INPUT_SET | LCD1602_FLAG_I_D_INCREMENT_MODE);
 8004948:	2006      	movs	r0, #6
 800494a:	f7ff ff6c 	bl	8004826 <Lcd1602SendCommand>
}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}

08004952 <Lcd1602DisplayToLeft>:

// Scroll Display to left
void Lcd1602DisplayToLeft()
{
 8004952:	b580      	push	{r7, lr}
 8004954:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_SHIFT | LCD1602_FLAG_DISPLAY_SHIFT);
 8004956:	2018      	movs	r0, #24
 8004958:	f7ff ff65 	bl	8004826 <Lcd1602SendCommand>
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}

08004960 <Lcd1602DisplayToRight>:

// Scroll Display to right
void Lcd1602DisplayToRight()
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_SHIFT | LCD1602_FLAG_DISPLAY_SHIFT | LCD1602_FLAG_RIGHT_SHIFT);
 8004964:	201c      	movs	r0, #28
 8004966:	f7ff ff5e 	bl	8004826 <Lcd1602SendCommand>
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}

0800496e <Lcd1602ShowDisplay>:

// Show Display
void Lcd1602ShowDisplay()
{
 800496e:	b580      	push	{r7, lr}
 8004970:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_DISPLAY_SWITCH | LCD1602_FLAG_DISPLAY_ON);
 8004972:	200c      	movs	r0, #12
 8004974:	f7ff ff57 	bl	8004826 <Lcd1602SendCommand>
}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}

0800497c <Lcd1602HideDisplay>:

// Hide Display
void Lcd1602HideDisplay()
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_DISPLAY_SWITCH);
 8004980:	2008      	movs	r0, #8
 8004982:	f7ff ff50 	bl	8004826 <Lcd1602SendCommand>
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}

0800498a <Lcd1602ShowCursor>:

// Show cursor
void Lcd1602ShowCursor()
{
 800498a:	b580      	push	{r7, lr}
 800498c:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_DISPLAY_SWITCH | LCD1602_FLAG_DISPLAY_ON | LCD1602_FLAG_CURSOR_ON);
 800498e:	200e      	movs	r0, #14
 8004990:	f7ff ff49 	bl	8004826 <Lcd1602SendCommand>
}
 8004994:	bf00      	nop
 8004996:	bd80      	pop	{r7, pc}

08004998 <Lcd1602ShowBlinkCursor>:

// Show blink cursor
void Lcd1602ShowBlinkCursor()
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_DISPLAY_SWITCH | LCD1602_FLAG_DISPLAY_ON | LCD1602_FLAG_CURSOR_ON |
 800499c:	200f      	movs	r0, #15
 800499e:	f7ff ff42 	bl	8004826 <Lcd1602SendCommand>
			           LCD1602_FLAG_CURSOR_BLINK_ON);
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <Lcd1602HideCursor>:

// Hide cursor
void Lcd1602HideCursor()
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	af00      	add	r7, sp, #0
    Lcd1602SendCommand(LCD1602_CMD_DISPLAY_SWITCH | LCD1602_FLAG_DISPLAY_ON);
 80049aa:	200c      	movs	r0, #12
 80049ac:	f7ff ff3b 	bl	8004826 <Lcd1602SendCommand>
}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <Lcd1602BlinkCursorOn>:

//LCD1602_FLAG_CURSOR_BLINK_ON
// Switch cursor to blink on
void Lcd1602BlinkCursorOn()
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
	Lcd1602ShowBlinkCursor();
 80049b8:	f7ff ffee 	bl	8004998 <Lcd1602ShowBlinkCursor>
}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}

080049c0 <Lcd1602BlinkCursorOff>:
// Switch cursor to blink off
void Lcd1602BlinkCursorOff()
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	Lcd1602ShowCursor();
 80049c4:	f7ff ffe1 	bl	800498a <Lcd1602ShowCursor>
}
 80049c8:	bf00      	nop
 80049ca:	bd80      	pop	{r7, pc}

080049cc <Lcd1602SetCursor>:
// Set cursor position (0,0) - (1,15)
void Lcd1602SetCursor(uint8_t row, uint8_t col)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	460a      	mov	r2, r1
 80049d6:	71fb      	strb	r3, [r7, #7]
 80049d8:	4613      	mov	r3, r2
 80049da:	71bb      	strb	r3, [r7, #6]
	if (row > 1)
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d901      	bls.n	80049e6 <Lcd1602SetCursor+0x1a>
	{
        row = 1;
 80049e2:	2301      	movs	r3, #1
 80049e4:	71fb      	strb	r3, [r7, #7]
    }
	if (col > 15)
 80049e6:	79bb      	ldrb	r3, [r7, #6]
 80049e8:	2b0f      	cmp	r3, #15
 80049ea:	d901      	bls.n	80049f0 <Lcd1602SetCursor+0x24>
	{
        col = 15;
 80049ec:	230f      	movs	r3, #15
 80049ee:	71bb      	strb	r3, [r7, #6]
    }

	Lcd1602SendCommand(LCD1602_CMD_DDRAM_AD_SET | LCD1602_ROWS[row] | col);
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <Lcd1602SetCursor+0x44>)
 80049f4:	5cd2      	ldrb	r2, [r2, r3]
 80049f6:	79bb      	ldrb	r3, [r7, #6]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ff0f 	bl	8004826 <Lcd1602SendCommand>
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	0800a53c 	.word	0x0800a53c

08004a14 <Lcd1602WriteString>:

// Write string from cursor point
void Lcd1602WriteString(char * string)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < strlen(string); i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
 8004a20:	e009      	b.n	8004a36 <Lcd1602WriteString+0x22>
    {
        Lcd1602SendDataByte(string[i]);
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ff12 	bl	8004854 <Lcd1602SendDataByte>
    for(uint8_t i = 0; i < strlen(string); i++)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	3301      	adds	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
 8004a36:	7bfc      	ldrb	r4, [r7, #15]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fb fc31 	bl	80002a0 <strlen>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	429c      	cmp	r4, r3
 8004a42:	d3ee      	bcc.n	8004a22 <Lcd1602WriteString+0xe>
    }
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd90      	pop	{r4, r7, pc}
	...

08004a50 <Lcd1602WriteNumber>:

// Write number from cursor point
void Lcd1602WriteNumber(int number)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	char str_number[12];

	sprintf(str_number, "%d", number);
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4906      	ldr	r1, [pc, #24]	@ (8004a78 <Lcd1602WriteNumber+0x28>)
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fe37 	bl	80066d4 <siprintf>
	Lcd1602WriteString(str_number);
 8004a66:	f107 030c 	add.w	r3, r7, #12
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ffd2 	bl	8004a14 <Lcd1602WriteString>
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	08009fd0 	.word	0x08009fd0

08004a7c <Lcd1602WriteFloat>:

// Write float from cursor point
void Lcd1602WriteFloat(float value, char * format)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a86:	6038      	str	r0, [r7, #0]
    char str_float[12];

    sprintf(str_float, format, value);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fb fd75 	bl	8000578 <__aeabi_f2d>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	f107 000c 	add.w	r0, r7, #12
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	f001 fe1c 	bl	80066d4 <siprintf>
    Lcd1602WriteString(str_float);
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ffb7 	bl	8004a14 <Lcd1602WriteString>
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <Lcd1602CreateCustomSymbol>:

// Create custom symbol
void Lcd1602CreateCustomSymbol(uint8_t position, char * pattern)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	6039      	str	r1, [r7, #0]
 8004ab8:	71fb      	strb	r3, [r7, #7]
    Lcd1602SendCommand(LCD1602_CMD_CGRAM_AD_SET + position*8);
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	3308      	adds	r3, #8
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff feae 	bl	8004826 <Lcd1602SendCommand>

    for (int i = 0; i < 8; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e009      	b.n	8004ae4 <Lcd1602CreateCustomSymbol+0x36>
    {
        Lcd1602SendDataByte(pattern[i]);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff febb 	bl	8004854 <Lcd1602SendDataByte>
    for (int i = 0; i < 8; i++)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b07      	cmp	r3, #7
 8004ae8:	ddf2      	ble.n	8004ad0 <Lcd1602CreateCustomSymbol+0x22>
    }
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <WriteStringTest>:

// LCD1602 Tests

// Write string test
void WriteStringTest(char comment[], char message[])
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004afe:	f7ff fefe 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Write string");
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a16      	ldr	r2, [pc, #88]	@ (8004b60 <WriteStringTest+0x6c>)
 8004b06:	461c      	mov	r4, r3
 8004b08:	4613      	mov	r3, r2
 8004b0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b0c:	6020      	str	r0, [r4, #0]
 8004b0e:	6061      	str	r1, [r4, #4]
 8004b10:	60a2      	str	r2, [r4, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	7323      	strb	r3, [r4, #12]
    Lcd1602SetCursor(0, 2);
 8004b16:	2102      	movs	r1, #2
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f7ff ff57 	bl	80049cc <Lcd1602SetCursor>
    HAL_Delay(200);
 8004b1e:	20c8      	movs	r0, #200	@ 0xc8
 8004b20:	f7fd f8b0 	bl	8001c84 <HAL_Delay>
    Lcd1602WriteString(comment);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ff75 	bl	8004a14 <Lcd1602WriteString>
    strcpy(message,  "LCD1602 - test");
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <WriteStringTest+0x70>)
 8004b2e:	461c      	mov	r4, r3
 8004b30:	4613      	mov	r3, r2
 8004b32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b34:	6020      	str	r0, [r4, #0]
 8004b36:	6061      	str	r1, [r4, #4]
 8004b38:	60a2      	str	r2, [r4, #8]
 8004b3a:	881a      	ldrh	r2, [r3, #0]
 8004b3c:	789b      	ldrb	r3, [r3, #2]
 8004b3e:	81a2      	strh	r2, [r4, #12]
 8004b40:	73a3      	strb	r3, [r4, #14]
    Lcd1602SetCursor(1, 1);
 8004b42:	2101      	movs	r1, #1
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7ff ff41 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(message);
 8004b4a:	6838      	ldr	r0, [r7, #0]
 8004b4c:	f7ff ff62 	bl	8004a14 <Lcd1602WriteString>
    HAL_Delay(5000);
 8004b50:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004b54:	f7fd f896 	bl	8001c84 <HAL_Delay>
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}
 8004b60:	08009fd4 	.word	0x08009fd4
 8004b64:	08009fe4 	.word	0x08009fe4

08004b68 <ClearScreenTest>:

// Clear screen test
void ClearScreenTest(char comment[], char message[])
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004b72:	f7ff fec4 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Clear screen");
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb4 <ClearScreenTest+0x4c>)
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b80:	6020      	str	r0, [r4, #0]
 8004b82:	6061      	str	r1, [r4, #4]
 8004b84:	60a2      	str	r2, [r4, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	7323      	strb	r3, [r4, #12]
    Lcd1602SetCursor(0, 2);
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7ff ff1d 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff3e 	bl	8004a14 <Lcd1602WriteString>
    HAL_Delay(2000);
 8004b98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004b9c:	f7fd f872 	bl	8001c84 <HAL_Delay>
    Lcd1602ScreenClear();
 8004ba0:	f7ff fead 	bl	80048fe <Lcd1602ScreenClear>
    HAL_Delay(5000);
 8004ba4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004ba8:	f7fd f86c 	bl	8001c84 <HAL_Delay>
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}
 8004bb4:	08009ff4 	.word	0x08009ff4

08004bb8 <ShowCursorTest>:

// Show cursor test
void ShowCursorTest(char comment[], char message[])
{
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004bc2:	f7ff fe9c 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Show cursor");
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c00 <ShowCursorTest+0x48>)
 8004bca:	461c      	mov	r4, r3
 8004bcc:	4613      	mov	r3, r2
 8004bce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004bd0:	6020      	str	r0, [r4, #0]
 8004bd2:	6061      	str	r1, [r4, #4]
 8004bd4:	60a2      	str	r2, [r4, #8]
    Lcd1602SetCursor(0, 3);
 8004bd6:	2103      	movs	r1, #3
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f7ff fef7 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff18 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetCursor(1, 8);
 8004be4:	2108      	movs	r1, #8
 8004be6:	2001      	movs	r0, #1
 8004be8:	f7ff fef0 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602ShowCursor();
 8004bec:	f7ff fecd 	bl	800498a <Lcd1602ShowCursor>
    HAL_Delay(5000);   // Cursor is visible
 8004bf0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004bf4:	f7fd f846 	bl	8001c84 <HAL_Delay>
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd90      	pop	{r4, r7, pc}
 8004c00:	0800a004 	.word	0x0800a004

08004c04 <ReturnCursorTest>:

// Return Cursor test
void ReturnCursorTest(char comment[], char message[])
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();  // Cursor is visible
 8004c0e:	f7ff fe76 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Return cursor");
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a0c      	ldr	r2, [pc, #48]	@ (8004c48 <ReturnCursorTest+0x44>)
 8004c16:	461c      	mov	r4, r3
 8004c18:	4613      	mov	r3, r2
 8004c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c1c:	6020      	str	r0, [r4, #0]
 8004c1e:	6061      	str	r1, [r4, #4]
 8004c20:	60a2      	str	r2, [r4, #8]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	81a3      	strh	r3, [r4, #12]
    Lcd1602SetCursor(1, 2);
 8004c26:	2102      	movs	r1, #2
 8004c28:	2001      	movs	r0, #1
 8004c2a:	f7ff fecf 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fef0 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602CursorReturn();
 8004c34:	f7ff fe6a 	bl	800490c <Lcd1602CursorReturn>
    HAL_Delay(5000);
 8004c38:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004c3c:	f7fd f822 	bl	8001c84 <HAL_Delay>
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}
 8004c48:	0800a010 	.word	0x0800a010

08004c4c <HideCursorTest>:

// Hide Cursor test
void HideCursorTest(char comment[], char message[])
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
	Lcd1602ScreenClear();  // Cursor is visible
 8004c56:	f7ff fe52 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Hide cursor");
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c8c <HideCursorTest+0x40>)
 8004c5e:	461c      	mov	r4, r3
 8004c60:	4613      	mov	r3, r2
 8004c62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c64:	6020      	str	r0, [r4, #0]
 8004c66:	6061      	str	r1, [r4, #4]
 8004c68:	60a2      	str	r2, [r4, #8]
    Lcd1602SetCursor(0, 3);
 8004c6a:	2103      	movs	r1, #3
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f7ff fead 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff fece 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602HideCursor();
 8004c78:	f7ff fe95 	bl	80049a6 <Lcd1602HideCursor>
    HAL_Delay(5000);  // Cursor is not visible
 8004c7c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004c80:	f7fd f800 	bl	8001c84 <HAL_Delay>
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}
 8004c8c:	0800a020 	.word	0x0800a020

08004c90 <HideDisplayTest>:

// Hide Display test
void HideDisplayTest(char comment[], char message[])
{
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	Lcd1602ScreenClear();  // Cursor is visible
 8004c9a:	f7ff fe30 	bl	80048fe <Lcd1602ScreenClear>
	strcpy(comment, "Hide display");
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8004cdc <HideDisplayTest+0x4c>)
 8004ca2:	461c      	mov	r4, r3
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ca8:	6020      	str	r0, [r4, #0]
 8004caa:	6061      	str	r1, [r4, #4]
 8004cac:	60a2      	str	r2, [r4, #8]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	7323      	strb	r3, [r4, #12]
    Lcd1602SetCursor(0, 2);
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7ff fe89 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff feaa 	bl	8004a14 <Lcd1602WriteString>
    HAL_Delay(2000);
 8004cc0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004cc4:	f7fc ffde 	bl	8001c84 <HAL_Delay>
    Lcd1602HideDisplay();
 8004cc8:	f7ff fe58 	bl	800497c <Lcd1602HideDisplay>
    HAL_Delay(5000);  // Cursor is not visible
 8004ccc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004cd0:	f7fc ffd8 	bl	8001c84 <HAL_Delay>
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd90      	pop	{r4, r7, pc}
 8004cdc:	0800a02c 	.word	0x0800a02c

08004ce0 <ShowDisplayTest>:

// Show Display test
void ShowDisplayTest(char comment[], char message[])
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004cea:	f7ff fe08 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Show display");
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8004d24 <ShowDisplayTest+0x44>)
 8004cf2:	461c      	mov	r4, r3
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004cf8:	6020      	str	r0, [r4, #0]
 8004cfa:	6061      	str	r1, [r4, #4]
 8004cfc:	60a2      	str	r2, [r4, #8]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	7323      	strb	r3, [r4, #12]
    Lcd1602SetCursor(0, 2);
 8004d02:	2102      	movs	r1, #2
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7ff fe61 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);  // Message and cursor are not visible
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fe82 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602ShowDisplay();
 8004d10:	f7ff fe2d 	bl	800496e <Lcd1602ShowDisplay>
    HAL_Delay(5000);  // Message is visible, Cursor is not visible
 8004d14:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004d18:	f7fc ffb4 	bl	8001c84 <HAL_Delay>
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd90      	pop	{r4, r7, pc}
 8004d24:	0800a03c 	.word	0x0800a03c

08004d28 <BlinkCursorOnTest>:

// Blink Cursor On test
void BlinkCursorOnTest(char comment[], char message[])
{
 8004d28:	b5b0      	push	{r4, r5, r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004d32:	f7ff fde4 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Blink cursor On");
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a0f      	ldr	r2, [pc, #60]	@ (8004d78 <BlinkCursorOnTest+0x50>)
 8004d3a:	461c      	mov	r4, r3
 8004d3c:	4615      	mov	r5, r2
 8004d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d40:	6020      	str	r0, [r4, #0]
 8004d42:	6061      	str	r1, [r4, #4]
 8004d44:	60a2      	str	r2, [r4, #8]
 8004d46:	60e3      	str	r3, [r4, #12]
    Lcd1602SetCursor(0, 0);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f7ff fe3e 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);  // Cursor is not visible
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fe5f 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetCursor(1, 8);
 8004d56:	2108      	movs	r1, #8
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7ff fe37 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602ShowCursor();
 8004d5e:	f7ff fe14 	bl	800498a <Lcd1602ShowCursor>
    Lcd1602BlinkCursorOn();  // Cursor is visible
 8004d62:	f7ff fe27 	bl	80049b4 <Lcd1602BlinkCursorOn>
    HAL_Delay(5000);  // Cursor is blinking
 8004d66:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004d6a:	f7fc ff8b 	bl	8001c84 <HAL_Delay>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	0800a04c 	.word	0x0800a04c

08004d7c <BlinkCursorOffTest>:

// Blink Cursor Off test
void BlinkCursorOffTest(char comment[], char message[])
{
 8004d7c:	b5b0      	push	{r4, r5, r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004d86:	f7ff fdba 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Blink cursor Off");
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <BlinkCursorOffTest+0x5c>)
 8004d8e:	461d      	mov	r5, r3
 8004d90:	4614      	mov	r4, r2
 8004d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d94:	6028      	str	r0, [r5, #0]
 8004d96:	6069      	str	r1, [r5, #4]
 8004d98:	60aa      	str	r2, [r5, #8]
 8004d9a:	60eb      	str	r3, [r5, #12]
 8004d9c:	7823      	ldrb	r3, [r4, #0]
 8004d9e:	742b      	strb	r3, [r5, #16]
    Lcd1602SetCursor(0, 0);
 8004da0:	2100      	movs	r1, #0
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7ff fe12 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fe33 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetCursor(1, 8);
 8004dae:	2108      	movs	r1, #8
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7ff fe0b 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602ShowCursor();
 8004db6:	f7ff fde8 	bl	800498a <Lcd1602ShowCursor>
    HAL_Delay(1000);
 8004dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004dbe:	f7fc ff61 	bl	8001c84 <HAL_Delay>
    Lcd1602BlinkCursorOff();
 8004dc2:	f7ff fdfd 	bl	80049c0 <Lcd1602BlinkCursorOff>
    HAL_Delay(5000);
 8004dc6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004dca:	f7fc ff5b 	bl	8001c84 <HAL_Delay>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	0800a05c 	.word	0x0800a05c

08004ddc <MoveCursorToRightTest>:

// Move Cursor to right test
void MoveCursorToRightTest(char comment[], char message[])
{
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004de6:	f7ff fd8a 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602HideCursor();
 8004dea:	f7ff fddc 	bl	80049a6 <Lcd1602HideCursor>
	strcpy(comment, "Cursor to right");
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <MoveCursorToRightTest+0x68>)
 8004df2:	461c      	mov	r4, r3
 8004df4:	4615      	mov	r5, r2
 8004df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df8:	6020      	str	r0, [r4, #0]
 8004dfa:	6061      	str	r1, [r4, #4]
 8004dfc:	60a2      	str	r2, [r4, #8]
 8004dfe:	60e3      	str	r3, [r4, #12]
	Lcd1602SetCursor(0, 0);
 8004e00:	2100      	movs	r1, #0
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7ff fde2 	bl	80049cc <Lcd1602SetCursor>
	Lcd1602WriteString(comment);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fe03 	bl	8004a14 <Lcd1602WriteString>
	Lcd1602SetCursor(1, 8);
 8004e0e:	2108      	movs	r1, #8
 8004e10:	2001      	movs	r0, #1
 8004e12:	f7ff fddb 	bl	80049cc <Lcd1602SetCursor>
	Lcd1602ShowCursor();
 8004e16:	f7ff fdb8 	bl	800498a <Lcd1602ShowCursor>
	HAL_Delay(1000);
 8004e1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e1e:	f7fc ff31 	bl	8001c84 <HAL_Delay>
	Lcd1602MoveCursorToRight();
 8004e22:	f7ff fd81 	bl	8004928 <Lcd1602MoveCursorToRight>
	HAL_Delay(500);
 8004e26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e2a:	f7fc ff2b 	bl	8001c84 <HAL_Delay>
	Lcd1602MoveCursorToRight();
 8004e2e:	f7ff fd7b 	bl	8004928 <Lcd1602MoveCursorToRight>
	HAL_Delay(2000);
 8004e32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004e36:	f7fc ff25 	bl	8001c84 <HAL_Delay>
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bdb0      	pop	{r4, r5, r7, pc}
 8004e42:	bf00      	nop
 8004e44:	0800a070 	.word	0x0800a070

08004e48 <MoveCursorToLeftTest>:

// Move Cursor to left test
void MoveCursorToLeftTest(char comment[], char message[])
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004e52:	f7ff fd54 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602HideCursor();
 8004e56:	f7ff fda6 	bl	80049a6 <Lcd1602HideCursor>
    strcpy(comment, "Cursor to left");
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	@ (8004eb4 <MoveCursorToLeftTest+0x6c>)
 8004e5e:	461c      	mov	r4, r3
 8004e60:	4613      	mov	r3, r2
 8004e62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e64:	6020      	str	r0, [r4, #0]
 8004e66:	6061      	str	r1, [r4, #4]
 8004e68:	60a2      	str	r2, [r4, #8]
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	789b      	ldrb	r3, [r3, #2]
 8004e6e:	81a2      	strh	r2, [r4, #12]
 8004e70:	73a3      	strb	r3, [r4, #14]
    Lcd1602SetCursor(0, 1);
 8004e72:	2101      	movs	r1, #1
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7ff fda9 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fdca 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetCursor(1, 8);
 8004e80:	2108      	movs	r1, #8
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7ff fda2 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602ShowCursor();
 8004e88:	f7ff fd7f 	bl	800498a <Lcd1602ShowCursor>
    HAL_Delay(1000);
 8004e8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e90:	f7fc fef8 	bl	8001c84 <HAL_Delay>
    Lcd1602MoveCursorToLeft();
 8004e94:	f7ff fd41 	bl	800491a <Lcd1602MoveCursorToLeft>
    HAL_Delay(500);
 8004e98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e9c:	f7fc fef2 	bl	8001c84 <HAL_Delay>
    Lcd1602MoveCursorToLeft();
 8004ea0:	f7ff fd3b 	bl	800491a <Lcd1602MoveCursorToLeft>
    HAL_Delay(2000);
 8004ea4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ea8:	f7fc feec 	bl	8001c84 <HAL_Delay>
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	0800a080 	.word	0x0800a080

08004eb8 <SetCursorPositionTest>:

// Set Cursor Position test
void SetCursorPositionTest(char comment[], char message[])
{
 8004eb8:	b5b0      	push	{r4, r5, r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004ec2:	f7ff fd1c 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "Setting cursor >");
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a37      	ldr	r2, [pc, #220]	@ (8004fa8 <SetCursorPositionTest+0xf0>)
 8004eca:	461d      	mov	r5, r3
 8004ecc:	4614      	mov	r4, r2
 8004ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed0:	6028      	str	r0, [r5, #0]
 8004ed2:	6069      	str	r1, [r5, #4]
 8004ed4:	60aa      	str	r2, [r5, #8]
 8004ed6:	60eb      	str	r3, [r5, #12]
 8004ed8:	7823      	ldrb	r3, [r4, #0]
 8004eda:	742b      	strb	r3, [r5, #16]
    Lcd1602SetCursor(0, 0);
 8004edc:	2100      	movs	r1, #0
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f7ff fd74 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fd95 	bl	8004a14 <Lcd1602WriteString>

    Lcd1602ShowCursor(0, 0);
 8004eea:	2100      	movs	r1, #0
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7ff fd4c 	bl	800498a <Lcd1602ShowCursor>
	for (uint8_t row = 0; row < 2; row++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e014      	b.n	8004f22 <SetCursorPositionTest+0x6a>
    {
        for (uint8_t col = 0; col < 16; col++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73bb      	strb	r3, [r7, #14]
 8004efc:	e00b      	b.n	8004f16 <SetCursorPositionTest+0x5e>
        {
  	      Lcd1602SetCursor(row, col);
 8004efe:	7bba      	ldrb	r2, [r7, #14]
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fd61 	bl	80049cc <Lcd1602SetCursor>
  	      HAL_Delay(200);
 8004f0a:	20c8      	movs	r0, #200	@ 0xc8
 8004f0c:	f7fc feba 	bl	8001c84 <HAL_Delay>
        for (uint8_t col = 0; col < 16; col++)
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	3301      	adds	r3, #1
 8004f14:	73bb      	strb	r3, [r7, #14]
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	2b0f      	cmp	r3, #15
 8004f1a:	d9f0      	bls.n	8004efe <SetCursorPositionTest+0x46>
	for (uint8_t row = 0; row < 2; row++)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d9e7      	bls.n	8004ef8 <SetCursorPositionTest+0x40>
        }
    }

    strcpy(comment, "Setting cursor <");
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a20      	ldr	r2, [pc, #128]	@ (8004fac <SetCursorPositionTest+0xf4>)
 8004f2c:	461d      	mov	r5, r3
 8004f2e:	4614      	mov	r4, r2
 8004f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f32:	6028      	str	r0, [r5, #0]
 8004f34:	6069      	str	r1, [r5, #4]
 8004f36:	60aa      	str	r2, [r5, #8]
 8004f38:	60eb      	str	r3, [r5, #12]
 8004f3a:	7823      	ldrb	r3, [r4, #0]
 8004f3c:	742b      	strb	r3, [r5, #16]
    Lcd1602SetCursor(0, 0);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2000      	movs	r0, #0
 8004f42:	f7ff fd43 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fd64 	bl	8004a14 <Lcd1602WriteString>

    Lcd1602SetCursor(1, 15);
 8004f4c:	210f      	movs	r1, #15
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f7ff fd3c 	bl	80049cc <Lcd1602SetCursor>
	for (uint8_t row = 0; row < 2; row++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	737b      	strb	r3, [r7, #13]
 8004f58:	e01a      	b.n	8004f90 <SetCursorPositionTest+0xd8>
    {
        for (uint8_t col = 0; col < 16; col++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	733b      	strb	r3, [r7, #12]
 8004f5e:	e011      	b.n	8004f84 <SetCursorPositionTest+0xcc>
        {
  	      Lcd1602SetCursor(1 - row, 15 - col);
 8004f60:	7b7b      	ldrb	r3, [r7, #13]
 8004f62:	f1c3 0301 	rsb	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	7b3b      	ldrb	r3, [r7, #12]
 8004f6a:	f1c3 030f 	rsb	r3, r3, #15
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7ff fd2a 	bl	80049cc <Lcd1602SetCursor>
          HAL_Delay(200);
 8004f78:	20c8      	movs	r0, #200	@ 0xc8
 8004f7a:	f7fc fe83 	bl	8001c84 <HAL_Delay>
        for (uint8_t col = 0; col < 16; col++)
 8004f7e:	7b3b      	ldrb	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	733b      	strb	r3, [r7, #12]
 8004f84:	7b3b      	ldrb	r3, [r7, #12]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d9ea      	bls.n	8004f60 <SetCursorPositionTest+0xa8>
	for (uint8_t row = 0; row < 2; row++)
 8004f8a:	7b7b      	ldrb	r3, [r7, #13]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	737b      	strb	r3, [r7, #13]
 8004f90:	7b7b      	ldrb	r3, [r7, #13]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d9e1      	bls.n	8004f5a <SetCursorPositionTest+0xa2>
        }
    }
    HAL_Delay(2000);
 8004f96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004f9a:	f7fc fe73 	bl	8001c84 <HAL_Delay>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	0800a090 	.word	0x0800a090
 8004fac:	0800a0a4 	.word	0x0800a0a4

08004fb0 <WriteNumberTest>:

// Write number test
void WriteNumberTest(char comment[], char message[])
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
    Lcd1602ScreenClear();
 8004fba:	f7ff fca0 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602HideCursor();
 8004fbe:	f7ff fcf2 	bl	80049a6 <Lcd1602HideCursor>
    strcpy(comment, "Write Number");
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	@ (8005018 <WriteNumberTest+0x68>)
 8004fc6:	461c      	mov	r4, r3
 8004fc8:	4613      	mov	r3, r2
 8004fca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fcc:	6020      	str	r0, [r4, #0]
 8004fce:	6061      	str	r1, [r4, #4]
 8004fd0:	60a2      	str	r2, [r4, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	7323      	strb	r3, [r4, #12]
    Lcd1602SetCursor(0, 2);
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7ff fcf7 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fd18 	bl	8004a14 <Lcd1602WriteString>

    for (int i = 0; i < 15 ; i++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e00d      	b.n	8005006 <WriteNumberTest+0x56>
    {
        Lcd1602SetCursor(1, 7);
 8004fea:	2107      	movs	r1, #7
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7ff fced 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteNumber(i);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fd2c 	bl	8004a50 <Lcd1602WriteNumber>
        HAL_Delay (500);
 8004ff8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ffc:	f7fc fe42 	bl	8001c84 <HAL_Delay>
    for (int i = 0; i < 15 ; i++)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b0e      	cmp	r3, #14
 800500a:	ddee      	ble.n	8004fea <WriteNumberTest+0x3a>
    }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	0800a0b8 	.word	0x0800a0b8

0800501c <WriteFloatTest>:

// Write float test
void WriteFloatTest(char comment[], char message[])
{
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
    float start = 25.25;
 8005026:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <WriteFloatTest+0xac>)
 8005028:	613b      	str	r3, [r7, #16]

    Lcd1602ScreenClear();
 800502a:	f7ff fc68 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602HideCursor();
 800502e:	f7ff fcba 	bl	80049a6 <Lcd1602HideCursor>
    strcpy(comment, "Write Float");
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <WriteFloatTest+0xb0>)
 8005036:	461c      	mov	r4, r3
 8005038:	4613      	mov	r3, r2
 800503a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800503c:	6020      	str	r0, [r4, #0]
 800503e:	6061      	str	r1, [r4, #4]
 8005040:	60a2      	str	r2, [r4, #8]
    Lcd1602SetCursor(0, 3);
 8005042:	2103      	movs	r1, #3
 8005044:	2000      	movs	r0, #0
 8005046:	f7ff fcc1 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(comment);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fce2 	bl	8004a14 <Lcd1602WriteString>

    for (int i = 0; i < 10; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e030      	b.n	80050b8 <WriteFloatTest+0x9c>
    {
	      Lcd1602SetCursor(1, 5);
 8005056:	2105      	movs	r1, #5
 8005058:	2001      	movs	r0, #1
 800505a:	f7ff fcb7 	bl	80049cc <Lcd1602SetCursor>
	      float result = start + (float)i/100.;
 800505e:	6938      	ldr	r0, [r7, #16]
 8005060:	f7fb fa8a 	bl	8000578 <__aeabi_f2d>
 8005064:	4604      	mov	r4, r0
 8005066:	460d      	mov	r5, r1
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005072:	ee17 0a90 	vmov	r0, s15
 8005076:	f7fb fa7f 	bl	8000578 <__aeabi_f2d>
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <WriteFloatTest+0xb4>)
 8005080:	f7fb fbfc 	bl	800087c <__aeabi_ddiv>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4620      	mov	r0, r4
 800508a:	4629      	mov	r1, r5
 800508c:	f7fb f916 	bl	80002bc <__adddf3>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	f7fb fdbe 	bl	8000c18 <__aeabi_d2f>
 800509c:	4603      	mov	r3, r0
 800509e:	60fb      	str	r3, [r7, #12]
	      Lcd1602WriteFloat(result, "%2.2f");
 80050a0:	480c      	ldr	r0, [pc, #48]	@ (80050d4 <WriteFloatTest+0xb8>)
 80050a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80050a6:	f7ff fce9 	bl	8004a7c <Lcd1602WriteFloat>
	      HAL_Delay (500);
 80050aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80050ae:	f7fc fde9 	bl	8001c84 <HAL_Delay>
    for (int i = 0; i < 10; i++)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	3301      	adds	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	ddcb      	ble.n	8005056 <WriteFloatTest+0x3a>
    }
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdb0      	pop	{r4, r5, r7, pc}
 80050c8:	41ca0000 	.word	0x41ca0000
 80050cc:	0800a0c8 	.word	0x0800a0c8
 80050d0:	40590000 	.word	0x40590000
 80050d4:	0800a0d4 	.word	0x0800a0d4

080050d8 <WriteDecrementDirTest>:

// Write Decrement Direction test
void WriteDecrementDirTest()
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
    Lcd1602ScreenClear();
 80050dc:	f7ff fc0f 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602HideCursor();
 80050e0:	f7ff fc61 	bl	80049a6 <Lcd1602HideCursor>
    Lcd1602SetCursor(0, 0);
 80050e4:	2100      	movs	r1, #0
 80050e6:	2000      	movs	r0, #0
 80050e8:	f7ff fc70 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Decrement direct");
 80050ec:	4808      	ldr	r0, [pc, #32]	@ (8005110 <WriteDecrementDirTest+0x38>)
 80050ee:	f7ff fc91 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetDecrementDirection();
 80050f2:	f7ff fc20 	bl	8004936 <Lcd1602SetDecrementDirection>
    Lcd1602SetCursor(1, 15);
 80050f6:	210f      	movs	r1, #15
 80050f8:	2001      	movs	r0, #1
 80050fa:	f7ff fc67 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Decrement direct");
 80050fe:	4804      	ldr	r0, [pc, #16]	@ (8005110 <WriteDecrementDirTest+0x38>)
 8005100:	f7ff fc88 	bl	8004a14 <Lcd1602WriteString>
    HAL_Delay(5000);
 8005104:	f241 3088 	movw	r0, #5000	@ 0x1388
 8005108:	f7fc fdbc 	bl	8001c84 <HAL_Delay>
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	0800a0dc 	.word	0x0800a0dc

08005114 <WriteIncrementDirTest>:

// Write Increment Direction test
void WriteIncrementDirTest()
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
    Lcd1602ScreenClear();
 8005118:	f7ff fbf1 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602SetIncrementDirection();
 800511c:	f7ff fc12 	bl	8004944 <Lcd1602SetIncrementDirection>
    Lcd1602SetCursor(0, 0);
 8005120:	2100      	movs	r1, #0
 8005122:	2000      	movs	r0, #0
 8005124:	f7ff fc52 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Increment direct");
 8005128:	4808      	ldr	r0, [pc, #32]	@ (800514c <WriteIncrementDirTest+0x38>)
 800512a:	f7ff fc73 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetCursor(1, 0);
 800512e:	2100      	movs	r1, #0
 8005130:	2001      	movs	r0, #1
 8005132:	f7ff fc4b 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Increment direct");
 8005136:	4805      	ldr	r0, [pc, #20]	@ (800514c <WriteIncrementDirTest+0x38>)
 8005138:	f7ff fc6c 	bl	8004a14 <Lcd1602WriteString>
    Lcd1602SetIncrementDirection();
 800513c:	f7ff fc02 	bl	8004944 <Lcd1602SetIncrementDirection>
    HAL_Delay(5000);
 8005140:	f241 3088 	movw	r0, #5000	@ 0x1388
 8005144:	f7fc fd9e 	bl	8001c84 <HAL_Delay>
}
 8005148:	bf00      	nop
 800514a:	bd80      	pop	{r7, pc}
 800514c:	0800a0f0 	.word	0x0800a0f0

08005150 <MoveDisplayTest>:

// Move Display test
void MoveDisplayTest()
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
    Lcd1602ScreenClear();
 8005156:	f7ff fbd2 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602SetCursor(0, 0);
 800515a:	2100      	movs	r1, #0
 800515c:	2000      	movs	r0, #0
 800515e:	f7ff fc35 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Move Display < < < < < < <");
 8005162:	4818      	ldr	r0, [pc, #96]	@ (80051c4 <MoveDisplayTest+0x74>)
 8005164:	f7ff fc56 	bl	8004a14 <Lcd1602WriteString>
    HAL_Delay(1000);
 8005168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800516c:	f7fc fd8a 	bl	8001c84 <HAL_Delay>
	for (uint8_t i = 0; i < 16; i++)
 8005170:	2300      	movs	r3, #0
 8005172:	71fb      	strb	r3, [r7, #7]
 8005174:	e008      	b.n	8005188 <MoveDisplayTest+0x38>
    {
        Lcd1602DisplayToLeft();
 8005176:	f7ff fbec 	bl	8004952 <Lcd1602DisplayToLeft>
        HAL_Delay(500);
 800517a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800517e:	f7fc fd81 	bl	8001c84 <HAL_Delay>
	for (uint8_t i = 0; i < 16; i++)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	3301      	adds	r3, #1
 8005186:	71fb      	strb	r3, [r7, #7]
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b0f      	cmp	r3, #15
 800518c:	d9f3      	bls.n	8005176 <MoveDisplayTest+0x26>
    }

	HAL_Delay(1000);
 800518e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005192:	f7fc fd77 	bl	8001c84 <HAL_Delay>

	for (uint8_t i = 0; i < 16; i++)
 8005196:	2300      	movs	r3, #0
 8005198:	71bb      	strb	r3, [r7, #6]
 800519a:	e008      	b.n	80051ae <MoveDisplayTest+0x5e>
    {
        Lcd1602DisplayToRight();
 800519c:	f7ff fbe0 	bl	8004960 <Lcd1602DisplayToRight>
        HAL_Delay(500);
 80051a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80051a4:	f7fc fd6e 	bl	8001c84 <HAL_Delay>
	for (uint8_t i = 0; i < 16; i++)
 80051a8:	79bb      	ldrb	r3, [r7, #6]
 80051aa:	3301      	adds	r3, #1
 80051ac:	71bb      	strb	r3, [r7, #6]
 80051ae:	79bb      	ldrb	r3, [r7, #6]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	d9f3      	bls.n	800519c <MoveDisplayTest+0x4c>
    }

	HAL_Delay(1000);
 80051b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051b8:	f7fc fd64 	bl	8001c84 <HAL_Delay>
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	0800a104 	.word	0x0800a104

080051c8 <WriteCustomSymbolsTest>:

// Write custom symbols test
void WriteCustomSymbolsTest()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
    Lcd1602ScreenClear();
 80051ce:	f7ff fb96 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602SetCursor(0, 2);
 80051d2:	2102      	movs	r1, #2
 80051d4:	2000      	movs	r0, #0
 80051d6:	f7ff fbf9 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Custom symbol");
 80051da:	4820      	ldr	r0, [pc, #128]	@ (800525c <WriteCustomSymbolsTest+0x94>)
 80051dc:	f7ff fc1a 	bl	8004a14 <Lcd1602WriteString>
    //HAL_Delay(1000);
	Lcd1602CreateCustomSymbol(BIG_BE, PATTERN_BIG_BE);
 80051e0:	491f      	ldr	r1, [pc, #124]	@ (8005260 <WriteCustomSymbolsTest+0x98>)
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7ff fc63 	bl	8004aae <Lcd1602CreateCustomSymbol>
	Lcd1602CreateCustomSymbol(LITTLE_BE, PATTERN_LITTLE_BE);
 80051e8:	491e      	ldr	r1, [pc, #120]	@ (8005264 <WriteCustomSymbolsTest+0x9c>)
 80051ea:	2002      	movs	r0, #2
 80051ec:	f7ff fc5f 	bl	8004aae <Lcd1602CreateCustomSymbol>
	Lcd1602CreateCustomSymbol(BIG_GE, PATTERN_BIG_GE);
 80051f0:	491d      	ldr	r1, [pc, #116]	@ (8005268 <WriteCustomSymbolsTest+0xa0>)
 80051f2:	2003      	movs	r0, #3
 80051f4:	f7ff fc5b 	bl	8004aae <Lcd1602CreateCustomSymbol>
	Lcd1602CreateCustomSymbol(LITTLE_GE, PATTERN_LITTLE_GE);
 80051f8:	491c      	ldr	r1, [pc, #112]	@ (800526c <WriteCustomSymbolsTest+0xa4>)
 80051fa:	2004      	movs	r0, #4
 80051fc:	f7ff fc57 	bl	8004aae <Lcd1602CreateCustomSymbol>
	HAL_Delay(100);
 8005200:	2064      	movs	r0, #100	@ 0x64
 8005202:	f7fc fd3f 	bl	8001c84 <HAL_Delay>
	Lcd1602SetCursor(1, 8);
 8005206:	2108      	movs	r1, #8
 8005208:	2001      	movs	r0, #1
 800520a:	f7ff fbdf 	bl	80049cc <Lcd1602SetCursor>
	Lcd1602WriteByteToRegister(BIG_BE, LCD1602_DATA_REG);
 800520e:	4b18      	ldr	r3, [pc, #96]	@ (8005270 <WriteCustomSymbolsTest+0xa8>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	2001      	movs	r0, #1
 8005216:	f7ff fa19 	bl	800464c <Lcd1602WriteByteToRegister>
	HAL_Delay(5000);
 800521a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800521e:	f7fc fd31 	bl	8001c84 <HAL_Delay>
	Lcd1602ScreenClear();
 8005222:	f7ff fb6c 	bl	80048fe <Lcd1602ScreenClear>
    Lcd1602SetCursor(0, 1);
 8005226:	2101      	movs	r1, #1
 8005228:	2000      	movs	r0, #0
 800522a:	f7ff fbcf 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString("Custom symbols");
 800522e:	4811      	ldr	r0, [pc, #68]	@ (8005274 <WriteCustomSymbolsTest+0xac>)
 8005230:	f7ff fbf0 	bl	8004a14 <Lcd1602WriteString>
	char test_string[] = {BIG_BE, LITTLE_BE, BIG_GE, LITTLE_GE, 0};
 8005234:	4b10      	ldr	r3, [pc, #64]	@ (8005278 <WriteCustomSymbolsTest+0xb0>)
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	2300      	movs	r3, #0
 800523a:	713b      	strb	r3, [r7, #4]
	Lcd1602SetCursor(1, 6);
 800523c:	2106      	movs	r1, #6
 800523e:	2001      	movs	r0, #1
 8005240:	f7ff fbc4 	bl	80049cc <Lcd1602SetCursor>
	Lcd1602WriteString(test_string);
 8005244:	463b      	mov	r3, r7
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fbe4 	bl	8004a14 <Lcd1602WriteString>
	HAL_Delay(5000);
 800524c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8005250:	f7fc fd18 	bl	8001c84 <HAL_Delay>
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	0800a120 	.word	0x0800a120
 8005260:	2000000c 	.word	0x2000000c
 8005264:	20000014 	.word	0x20000014
 8005268:	2000001c 	.word	0x2000001c
 800526c:	20000024 	.word	0x20000024
 8005270:	0800a53e 	.word	0x0800a53e
 8005274:	0800a130 	.word	0x0800a130
 8005278:	04030201 	.word	0x04030201

0800527c <TestsLCD1602>:

// Common LCD1602 test (21 steps)
void TestsLCD1602()
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b0b3      	sub	sp, #204	@ 0xcc
 8005280:	af00      	add	r7, sp, #0
	  char comment[100];
	  char message[100];

	  // 1. Write string test
	  WriteStringTest(comment, message);
 8005282:	463a      	mov	r2, r7
 8005284:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fc32 	bl	8004af4 <WriteStringTest>

      // 2. Write Number test
	  WriteNumberTest(comment, message);
 8005290:	463a      	mov	r2, r7
 8005292:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fe89 	bl	8004fb0 <WriteNumberTest>

      // 3. Write Float test
	  WriteFloatTest(comment, message);
 800529e:	463a      	mov	r2, r7
 80052a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff feb8 	bl	800501c <WriteFloatTest>

      // 4. Write Custom Symbols test
	  WriteCustomSymbolsTest();
 80052ac:	f7ff ff8c 	bl	80051c8 <WriteCustomSymbolsTest>

	  // 5. Clear screen
	  ClearScreenTest(comment, message);
 80052b0:	463a      	mov	r2, r7
 80052b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fc55 	bl	8004b68 <ClearScreenTest>

	  // 6. Show cursor
	  ShowCursorTest(comment, message);
 80052be:	463a      	mov	r2, r7
 80052c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fc76 	bl	8004bb8 <ShowCursorTest>

	  // 7. Return cursor
	  ReturnCursorTest(comment, message);
 80052cc:	463a      	mov	r2, r7
 80052ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fc95 	bl	8004c04 <ReturnCursorTest>

	  // 8. Hide cursor
	  HideCursorTest(comment, message);
 80052da:	463a      	mov	r2, r7
 80052dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fcb2 	bl	8004c4c <HideCursorTest>

	  // 9. Show cursor
	  ShowCursorTest(comment, message);
 80052e8:	463a      	mov	r2, r7
 80052ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fc61 	bl	8004bb8 <ShowCursorTest>

	  // 10. Hide display
	  HideDisplayTest(comment, message);
 80052f6:	463a      	mov	r2, r7
 80052f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fcc6 	bl	8004c90 <HideDisplayTest>

	  // 11. Show display
	  ShowDisplayTest(comment, message);
 8005304:	463a      	mov	r2, r7
 8005306:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fce7 	bl	8004ce0 <ShowDisplayTest>

	  // 12. Blink cursor On
	  BlinkCursorOnTest(comment, message);
 8005312:	463a      	mov	r2, r7
 8005314:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fd04 	bl	8004d28 <BlinkCursorOnTest>

	  // 13. Blink cursor Off
	  BlinkCursorOffTest(comment, message);
 8005320:	463a      	mov	r2, r7
 8005322:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fd27 	bl	8004d7c <BlinkCursorOffTest>

      // 14. Move Cursor to right
	  MoveCursorToRightTest(comment, message);
 800532e:	463a      	mov	r2, r7
 8005330:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fd50 	bl	8004ddc <MoveCursorToRightTest>

      // 15. Move Cursor to left
	  MoveCursorToLeftTest(comment, message);
 800533c:	463a      	mov	r2, r7
 800533e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fd7f 	bl	8004e48 <MoveCursorToLeftTest>

      // 16. Move Cursor to right
	  MoveCursorToRightTest(comment, message);
 800534a:	463a      	mov	r2, r7
 800534c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fd42 	bl	8004ddc <MoveCursorToRightTest>

      // 17. Move Cursor to left
	  MoveCursorToLeftTest(comment, message);
 8005358:	463a      	mov	r2, r7
 800535a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fd71 	bl	8004e48 <MoveCursorToLeftTest>

	  // 18. Set Cursor position
	  SetCursorPositionTest(comment, message);
 8005366:	463a      	mov	r2, r7
 8005368:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fda2 	bl	8004eb8 <SetCursorPositionTest>

	  // 19. Write Decrement Direction test
	  WriteDecrementDirTest();
 8005374:	f7ff feb0 	bl	80050d8 <WriteDecrementDirTest>

      // 20. Write Increment Direction test
	  WriteIncrementDirTest();
 8005378:	f7ff fecc 	bl	8005114 <WriteIncrementDirTest>

	// 21. Move Display Left and Right Test
    MoveDisplayTest();
 800537c:	f7ff fee8 	bl	8005150 <MoveDisplayTest>

    Lcd1602ScreenClear();
 8005380:	f7ff fabd 	bl	80048fe <Lcd1602ScreenClear>
    strcpy(comment, "LCD1602 - test");
 8005384:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005388:	4a14      	ldr	r2, [pc, #80]	@ (80053dc <TestsLCD1602+0x160>)
 800538a:	461c      	mov	r4, r3
 800538c:	4613      	mov	r3, r2
 800538e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005390:	c407      	stmia	r4!, {r0, r1, r2}
 8005392:	8023      	strh	r3, [r4, #0]
 8005394:	3402      	adds	r4, #2
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	7023      	strb	r3, [r4, #0]
    Lcd1602SetCursor(0, 1);
 800539a:	2101      	movs	r1, #1
 800539c:	2000      	movs	r0, #0
 800539e:	f7ff fb15 	bl	80049cc <Lcd1602SetCursor>
    HAL_Delay(200);
 80053a2:	20c8      	movs	r0, #200	@ 0xc8
 80053a4:	f7fc fc6e 	bl	8001c84 <HAL_Delay>
    Lcd1602WriteString(comment);
 80053a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fb31 	bl	8004a14 <Lcd1602WriteString>
    strcpy(message,  "*** END ***");
 80053b2:	463b      	mov	r3, r7
 80053b4:	4a0a      	ldr	r2, [pc, #40]	@ (80053e0 <TestsLCD1602+0x164>)
 80053b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80053b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Lcd1602SetCursor(1, 2);
 80053bc:	2102      	movs	r1, #2
 80053be:	2001      	movs	r0, #1
 80053c0:	f7ff fb04 	bl	80049cc <Lcd1602SetCursor>
    Lcd1602WriteString(message);
 80053c4:	463b      	mov	r3, r7
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fb24 	bl	8004a14 <Lcd1602WriteString>
    HAL_Delay(5000);
 80053cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80053d0:	f7fc fc58 	bl	8001c84 <HAL_Delay>
}
 80053d4:	bf00      	nop
 80053d6:	37cc      	adds	r7, #204	@ 0xcc
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	08009fe4 	.word	0x08009fe4
 80053e0:	0800a140 	.word	0x0800a140

080053e4 <ShowLCD1602Interface>:

// Show LCD1602 interface
uint8_t ShowLCD1602Interface(Lcd1602InterfaceType lcd1602_interface_type)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b091      	sub	sp, #68	@ 0x44
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
    if (lcd1602_interface_type == LCD1602_I2C)
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d115      	bne.n	8005420 <ShowLCD1602Interface+0x3c>
    {
    	char first_line[] = "LCD-1602";
 80053f4:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <ShowLCD1602Interface+0x74>)
 80053f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80053fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80053fc:	c303      	stmia	r3!, {r0, r1}
 80053fe:	701a      	strb	r2, [r3, #0]
    	char second_line[] = "I2C Interface";
 8005400:	4b16      	ldr	r3, [pc, #88]	@ (800545c <ShowLCD1602Interface+0x78>)
 8005402:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8005406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005408:	c407      	stmia	r4!, {r0, r1, r2}
 800540a:	8023      	strh	r3, [r4, #0]
    	return PrologueTestsLCD1602(LCD1602_I2C, first_line, second_line);
 800540c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005410:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005414:	4619      	mov	r1, r3
 8005416:	2002      	movs	r0, #2
 8005418:	f000 f824 	bl	8005464 <PrologueTestsLCD1602>
 800541c:	4603      	mov	r3, r0
 800541e:	e017      	b.n	8005450 <ShowLCD1602Interface+0x6c>
    }
    else
    {
    	char first_line[] = "LCD-1602";
 8005420:	4a0d      	ldr	r2, [pc, #52]	@ (8005458 <ShowLCD1602Interface+0x74>)
 8005422:	f107 0318 	add.w	r3, r7, #24
 8005426:	ca07      	ldmia	r2, {r0, r1, r2}
 8005428:	c303      	stmia	r3!, {r0, r1}
 800542a:	701a      	strb	r2, [r3, #0]
    	char second_line[] = "  Parallel bus";
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <ShowLCD1602Interface+0x7c>)
 800542e:	f107 0408 	add.w	r4, r7, #8
 8005432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005434:	c407      	stmia	r4!, {r0, r1, r2}
 8005436:	8023      	strh	r3, [r4, #0]
 8005438:	3402      	adds	r4, #2
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	7023      	strb	r3, [r4, #0]
    	return PrologueTestsLCD1602(LCD1602_DATA_BUS_SIZE4, first_line, second_line);
 800543e:	f107 0208 	add.w	r2, r7, #8
 8005442:	f107 0318 	add.w	r3, r7, #24
 8005446:	4619      	mov	r1, r3
 8005448:	2004      	movs	r0, #4
 800544a:	f000 f80b 	bl	8005464 <PrologueTestsLCD1602>
 800544e:	4603      	mov	r3, r0
    }

    return 0;
}
 8005450:	4618      	mov	r0, r3
 8005452:	3744      	adds	r7, #68	@ 0x44
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}
 8005458:	0800a14c 	.word	0x0800a14c
 800545c:	0800a158 	.word	0x0800a158
 8005460:	0800a168 	.word	0x0800a168

08005464 <PrologueTestsLCD1602>:

// Test Prologue function
uint8_t PrologueTestsLCD1602(Lcd1602InterfaceType lcd1602_interface_type, char first_line[], char second_line[])
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b0a0      	sub	sp, #128	@ 0x80
 8005468:	af02      	add	r7, sp, #8
 800546a:	4603      	mov	r3, r0
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	73fb      	strb	r3, [r7, #15]
    // Prolog for lcd1602 testing
	uint8_t result = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (lcd1602_interface_type == LCD1602_I2C)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d14c      	bne.n	8005518 <PrologueTestsLCD1602+0xb4>
    {
        // I2C communication mode
    	GpioItem lcd1602_gpio_data_bus[] =
 800547e:	4b6b      	ldr	r3, [pc, #428]	@ (800562c <PrologueTestsLCD1602+0x1c8>)
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005486:	833b      	strh	r3, [r7, #24]
 8005488:	4b68      	ldr	r3, [pc, #416]	@ (800562c <PrologueTestsLCD1602+0x1c8>)
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005490:	843b      	strh	r3, [r7, #32]
 8005492:	4a67      	ldr	r2, [pc, #412]	@ (8005630 <PrologueTestsLCD1602+0x1cc>)
 8005494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800549c:	e883 0003 	stmia.w	r3, {r0, r1}
 80054a0:	4a63      	ldr	r2, [pc, #396]	@ (8005630 <PrologueTestsLCD1602+0x1cc>)
 80054a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80054ae:	4a60      	ldr	r2, [pc, #384]	@ (8005630 <PrologueTestsLCD1602+0x1cc>)
 80054b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80054b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80054bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005630 <PrologueTestsLCD1602+0x1cc>)
 80054be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80054c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054ca:	4a59      	ldr	r2, [pc, #356]	@ (8005630 <PrologueTestsLCD1602+0x1cc>)
 80054cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80054d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80054d8:	4a55      	ldr	r2, [pc, #340]	@ (8005630 <PrologueTestsLCD1602+0x1cc>)
 80054da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80054de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e2:	e883 0003 	stmia.w	r3, {r0, r1}
    		UNDEFINED_GPIO,
    		UNDEFINED_GPIO,
    		UNDEFINED_GPIO,
    		UNDEFINED_GPIO
        };
		Lcd1602ConfigureI2C(lcd1602_gpio_data_bus);
 80054e6:	f107 0314 	add.w	r3, r7, #20
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe ff46 	bl	800437c <Lcd1602ConfigureI2C>
        Lcd1602ScreenClear();
 80054f0:	f7ff fa05 	bl	80048fe <Lcd1602ScreenClear>
        Lcd1602SetCursor(0, 4);
 80054f4:	2104      	movs	r1, #4
 80054f6:	2000      	movs	r0, #0
 80054f8:	f7ff fa68 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString(first_line);
 80054fc:	68b8      	ldr	r0, [r7, #8]
 80054fe:	f7ff fa89 	bl	8004a14 <Lcd1602WriteString>
        Lcd1602SetCursor(1, 1);
 8005502:	2101      	movs	r1, #1
 8005504:	2001      	movs	r0, #1
 8005506:	f7ff fa61 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString(second_line);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fa82 	bl	8004a14 <Lcd1602WriteString>
        result = 1;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005516:	e083      	b.n	8005620 <PrologueTestsLCD1602+0x1bc>
    }
	else if (lcd1602_interface_type == LCD1602_DATA_BUS_SIZE4)
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d13c      	bne.n	8005598 <PrologueTestsLCD1602+0x134>
	{
        // 4-bit communication mode
		g_lcd1602_interface_type = LCD1602_DATA_BUS_SIZE4;
 800551e:	4b45      	ldr	r3, [pc, #276]	@ (8005634 <PrologueTestsLCD1602+0x1d0>)
 8005520:	2204      	movs	r2, #4
 8005522:	701a      	strb	r2, [r3, #0]
		GpioItem enable_signal = {GPIOB, GPIO_PIN_4};
 8005524:	4a44      	ldr	r2, [pc, #272]	@ (8005638 <PrologueTestsLCD1602+0x1d4>)
 8005526:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800552a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800552e:	e883 0003 	stmia.w	r3, {r0, r1}
        GpioItem register_selection = {GPIOB, GPIO_PIN_5};
 8005532:	4a42      	ldr	r2, [pc, #264]	@ (800563c <PrologueTestsLCD1602+0x1d8>)
 8005534:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553c:	e883 0003 	stmia.w	r3, {r0, r1}
		GpioItem lcd1602_gpio_data_bus[] =
 8005540:	4b3f      	ldr	r3, [pc, #252]	@ (8005640 <PrologueTestsLCD1602+0x1dc>)
 8005542:	f107 0414 	add.w	r4, r7, #20
 8005546:	461d      	mov	r5, r3
 8005548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800554a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800554c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800554e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            {NULL, 0},
            {NULL, 0},
            {NULL, 0}
        };

		Lcd1602Configure4Bits(lcd1602_gpio_data_bus, enable_signal, register_selection);
 800555c:	f107 0014 	add.w	r0, r7, #20
 8005560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005566:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800556a:	ca06      	ldmia	r2, {r1, r2}
 800556c:	f7fe ff1e 	bl	80043ac <Lcd1602Configure4Bits>
        Lcd1602ScreenClear();
 8005570:	f7ff f9c5 	bl	80048fe <Lcd1602ScreenClear>
        Lcd1602SetCursor(0, 4);
 8005574:	2104      	movs	r1, #4
 8005576:	2000      	movs	r0, #0
 8005578:	f7ff fa28 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString(first_line);
 800557c:	68b8      	ldr	r0, [r7, #8]
 800557e:	f7ff fa49 	bl	8004a14 <Lcd1602WriteString>
        Lcd1602SetCursor(1, 0);
 8005582:	2100      	movs	r1, #0
 8005584:	2001      	movs	r0, #1
 8005586:	f7ff fa21 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString(second_line);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fa42 	bl	8004a14 <Lcd1602WriteString>
		result = 1;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005596:	e043      	b.n	8005620 <PrologueTestsLCD1602+0x1bc>
	}
    else if (lcd1602_interface_type == LCD1602_DATA_BUS_SIZE8)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b08      	cmp	r3, #8
 800559c:	d13d      	bne.n	800561a <PrologueTestsLCD1602+0x1b6>
	{
		// 8-bit communication mode
        GpioItem lcd1602_gpio_data_bus[] =
 800559e:	4b29      	ldr	r3, [pc, #164]	@ (8005644 <PrologueTestsLCD1602+0x1e0>)
 80055a0:	f107 0414 	add.w	r4, r7, #20
 80055a4:	461d      	mov	r5, r3
 80055a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80055b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      	    {GPIOB, GPIO_PIN_6},  // D5
      	    {GPIOA, GPIO_PIN_7},  // D6
      	    {GPIOA, GPIO_PIN_6}   // D7
        };

		GpioItem enable_signal = {GPIOB, GPIO_PIN_4};
 80055ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005638 <PrologueTestsLCD1602+0x1d4>)
 80055bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80055c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055c4:	e883 0003 	stmia.w	r3, {r0, r1}
		GpioItem register_selection = {GPIOB, GPIO_PIN_5};
 80055c8:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <PrologueTestsLCD1602+0x1d8>)
 80055ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055d2:	e883 0003 	stmia.w	r3, {r0, r1}
		Lcd1602Configure8Bits(lcd1602_gpio_data_bus, enable_signal, register_selection);
 80055d6:	f107 0014 	add.w	r0, r7, #20
 80055da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80055e4:	ca06      	ldmia	r2, {r1, r2}
 80055e6:	f7fe ff00 	bl	80043ea <Lcd1602Configure8Bits>
        Lcd1602ScreenClear();
 80055ea:	f7ff f988 	bl	80048fe <Lcd1602ScreenClear>
        Lcd1602SetCursor(0, 4);
 80055ee:	2104      	movs	r1, #4
 80055f0:	2000      	movs	r0, #0
 80055f2:	f7ff f9eb 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString(first_line);
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	f7ff fa0c 	bl	8004a14 <Lcd1602WriteString>
        Lcd1602SetCursor(1, 0);
 80055fc:	2100      	movs	r1, #0
 80055fe:	2001      	movs	r0, #1
 8005600:	f7ff f9e4 	bl	80049cc <Lcd1602SetCursor>
        Lcd1602WriteString(second_line);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff fa05 	bl	8004a14 <Lcd1602WriteString>
        HAL_Delay(2000);
 800560a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800560e:	f7fc fb39 	bl	8001c84 <HAL_Delay>
        result = 1;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005618:	e002      	b.n	8005620 <PrologueTestsLCD1602+0x1bc>
	}
	else
	{
		// Wrong/unsupported interface type.
		return result;
 800561a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800561e:	e001      	b.n	8005624 <PrologueTestsLCD1602+0x1c0>
	}

    return result;
 8005620:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005624:	4618      	mov	r0, r3
 8005626:	3778      	adds	r7, #120	@ 0x78
 8005628:	46bd      	mov	sp, r7
 800562a:	bdb0      	pop	{r4, r5, r7, pc}
 800562c:	40020400 	.word	0x40020400
 8005630:	0800a540 	.word	0x0800a540
 8005634:	2000002c 	.word	0x2000002c
 8005638:	0800a178 	.word	0x0800a178
 800563c:	0800a180 	.word	0x0800a180
 8005640:	0800a188 	.word	0x0800a188
 8005644:	0800a1c8 	.word	0x0800a1c8

08005648 <IsLatinLetter>:
static const char HELLO[] = "\r\nHello! Please, say \"Hello\" to check UART channel\r\n>>";
static const char RESPONSE[] = "Hello";

// Check if the character is a letter
static uint8_t IsLatinLetter(uint8_t symbol)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]

    if ((symbol >=65 && symbol <=90) || (symbol >=97 && symbol <= 122))
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d902      	bls.n	800565e <IsLatinLetter+0x16>
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b5a      	cmp	r3, #90	@ 0x5a
 800565c:	d905      	bls.n	800566a <IsLatinLetter+0x22>
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b60      	cmp	r3, #96	@ 0x60
 8005662:	d904      	bls.n	800566e <IsLatinLetter+0x26>
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	2b7a      	cmp	r3, #122	@ 0x7a
 8005668:	d801      	bhi.n	800566e <IsLatinLetter+0x26>
    {
        return 1;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <IsLatinLetter+0x28>
    }

    return 0;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UartReceiveSymbol>:

// Receive one symbol from UART
static HAL_StatusTypeDef UartReceiveSymbol(UART_HandleTypeDef * uart_handle_type_def, uint8_t * symbol, uint32_t timeout_ms)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
	return HAL_UART_Receive(uart_handle_type_def, symbol, 1, timeout_ms);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7fe fa71 	bl	8003b76 <HAL_UART_Receive>
 8005694:	4603      	mov	r3, r0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <UartReady>:

// Do perform a handshake communication to ensure the UART channel is ready
HAL_StatusTypeDef UartReady(UART_HandleTypeDef * uart_handle_type_def)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	77fb      	strb	r3, [r7, #31]
    char response[20];

	hal_status = HAL_UART_Transmit(uart_handle_type_def, (uint8_t *)HELLO, strlen(HELLO), UART_TIMEOUT_SEC);
 80056ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056b0:	2236      	movs	r2, #54	@ 0x36
 80056b2:	4915      	ldr	r1, [pc, #84]	@ (8005708 <UartReady+0x68>)
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fe f9d3 	bl	8003a60 <HAL_UART_Transmit>
 80056ba:	4603      	mov	r3, r0
 80056bc:	77fb      	strb	r3, [r7, #31]

	if (hal_status != HAL_OK)
 80056be:	7ffb      	ldrb	r3, [r7, #31]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <UartReady+0x28>
    {
	    return hal_status;
 80056c4:	7ffb      	ldrb	r3, [r7, #31]
 80056c6:	e01a      	b.n	80056fe <UartReady+0x5e>
    }

	while (1)
	{
        // Wait for response to ensure the UART channel is OK
		hal_status = UartReceiveCommand(uart_handle_type_def, (uint8_t *)response, 6, UART_CHANNEL_TIMEOUT);
 80056c8:	f107 0108 	add.w	r1, r7, #8
 80056cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056d0:	2206      	movs	r2, #6
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f834 	bl	8005740 <UartReceiveCommand>
 80056d8:	4603      	mov	r3, r0
 80056da:	77fb      	strb	r3, [r7, #31]
        if (hal_status != HAL_OK)
 80056dc:	7ffb      	ldrb	r3, [r7, #31]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <UartReady+0x46>
        {
            return hal_status;
 80056e2:	7ffb      	ldrb	r3, [r7, #31]
 80056e4:	e00b      	b.n	80056fe <UartReady+0x5e>
        }
        if (!strcmp(response, RESPONSE))
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4908      	ldr	r1, [pc, #32]	@ (800570c <UartReady+0x6c>)
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa fd77 	bl	80001e0 <strcmp>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d000      	beq.n	80056fa <UartReady+0x5a>
		hal_status = UartReceiveCommand(uart_handle_type_def, (uint8_t *)response, 6, UART_CHANNEL_TIMEOUT);
 80056f8:	e7e6      	b.n	80056c8 <UartReady+0x28>
        {
            break;
 80056fa:	bf00      	nop
        }
	}

	return hal_status;
 80056fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	0800a550 	.word	0x0800a550
 800570c:	0800a588 	.word	0x0800a588

08005710 <UartSendString>:

// Send string to UART channel
HAL_StatusTypeDef UartSendString(UART_HandleTypeDef * uart_handle_type_def, const char * string,
		                         uint16_t string_size, uint32_t timeout_ms)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	80fb      	strh	r3, [r7, #6]
    return HAL_UART_Transmit(uart_handle_type_def, (uint8_t *)string, strlen(string), timeout_ms);
 8005720:	68b8      	ldr	r0, [r7, #8]
 8005722:	f7fa fdbd 	bl	80002a0 <strlen>
 8005726:	4603      	mov	r3, r0
 8005728:	b29a      	uxth	r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7fe f996 	bl	8003a60 <HAL_UART_Transmit>
 8005734:	4603      	mov	r3, r0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <UartReceiveCommand>:

// Receive a command through the UART channel
HAL_StatusTypeDef UartReceiveCommand(UART_HandleTypeDef * uart_handle_type_def,
		                             uint8_t command[], uint16_t data_size, uint32_t timeout_ms)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75bb      	strb	r3, [r7, #22]
    uint8_t symbol;
    uint8_t idx = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	75fb      	strb	r3, [r7, #23]

    memset(command, 0, data_size);
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	461a      	mov	r2, r3
 800575c:	2100      	movs	r1, #0
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f001 f81d 	bl	800679e <memset>
    while (1)
    {
        // Get command name "symbol by symbol"
   	    if((status = UartReceiveSymbol(uart_handle_type_def, &symbol, timeout_ms)) != HAL_OK)
 8005764:	f107 0315 	add.w	r3, r7, #21
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff85 	bl	800567c <UartReceiveSymbol>
 8005772:	4603      	mov	r3, r0
 8005774:	75bb      	strb	r3, [r7, #22]
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <UartReceiveCommand+0x40>
        {
            // Failed to receive next command name character
   	    	return status;
 800577c:	7dbb      	ldrb	r3, [r7, #22]
 800577e:	e07a      	b.n	8005876 <UartReceiveCommand+0x136>
        }

   	   	switch (symbol)
 8005780:	7d7b      	ldrb	r3, [r7, #21]
 8005782:	2b1b      	cmp	r3, #27
 8005784:	dc30      	bgt.n	80057e8 <UartReceiveCommand+0xa8>
 8005786:	2b08      	cmp	r3, #8
 8005788:	db52      	blt.n	8005830 <UartReceiveCommand+0xf0>
 800578a:	3b08      	subs	r3, #8
 800578c:	2b13      	cmp	r3, #19
 800578e:	d84f      	bhi.n	8005830 <UartReceiveCommand+0xf0>
 8005790:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <UartReceiveCommand+0x58>)
 8005792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005796:	bf00      	nop
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005831 	.word	0x08005831
 80057a0:	08005813 	.word	0x08005813
 80057a4:	08005831 	.word	0x08005831
 80057a8:	08005831 	.word	0x08005831
 80057ac:	08005813 	.word	0x08005813
 80057b0:	08005831 	.word	0x08005831
 80057b4:	08005831 	.word	0x08005831
 80057b8:	08005831 	.word	0x08005831
 80057bc:	08005831 	.word	0x08005831
 80057c0:	08005831 	.word	0x08005831
 80057c4:	08005831 	.word	0x08005831
 80057c8:	08005831 	.word	0x08005831
 80057cc:	08005831 	.word	0x08005831
 80057d0:	08005831 	.word	0x08005831
 80057d4:	08005831 	.word	0x08005831
 80057d8:	08005831 	.word	0x08005831
 80057dc:	08005831 	.word	0x08005831
 80057e0:	08005831 	.word	0x08005831
 80057e4:	080057ed 	.word	0x080057ed
 80057e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ea:	d121      	bne.n	8005830 <UartReceiveCommand+0xf0>
   	   	{
   	   	    case BS:
   	   	    case DEL:
   	   	    case ESC:
   	            // Backspace, Delete or ESC was received. Remove previous symbol from command and from terminal
   	    	    if (idx > 0)
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03d      	beq.n	800586e <UartReceiveCommand+0x12e>
   	    	    {
   	    		    idx--;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
   				    status = HAL_UART_Transmit(uart_handle_type_def, (uint8_t *)DELETE, strlen(DELETE), timeout_ms);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	4920      	ldr	r1, [pc, #128]	@ (8005880 <UartReceiveCommand+0x140>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7fe f92e 	bl	8003a60 <HAL_UART_Transmit>
 8005804:	4603      	mov	r3, r0
 8005806:	75bb      	strb	r3, [r7, #22]
   				    if (status != HAL_OK)
 8005808:	7dbb      	ldrb	r3, [r7, #22]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d02f      	beq.n	800586e <UartReceiveCommand+0x12e>
   				    {
   					    return status;
 800580e:	7dbb      	ldrb	r3, [r7, #22]
 8005810:	e031      	b.n	8005876 <UartReceiveCommand+0x136>
   	    	    }
   	   	        break;
   	   	    case CRET:
   	   	    case LF:
   	        	// Pressed ENTER means the end of the command name
   	        	command[idx] = 0;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	4413      	add	r3, r2
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
   		    	status = HAL_UART_Transmit(uart_handle_type_def, (uint8_t *)ENTER, strlen(ENTER), timeout_ms);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2202      	movs	r2, #2
 8005820:	4918      	ldr	r1, [pc, #96]	@ (8005884 <UartReceiveCommand+0x144>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7fe f91c 	bl	8003a60 <HAL_UART_Transmit>
 8005828:	4603      	mov	r3, r0
 800582a:	75bb      	strb	r3, [r7, #22]
   	            return status;
 800582c:	7dbb      	ldrb	r3, [r7, #22]
 800582e:	e022      	b.n	8005876 <UartReceiveCommand+0x136>
   	   	    default:
   	   	    	if (IsLatinLetter(symbol))
 8005830:	7d7b      	ldrb	r3, [r7, #21]
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff ff08 	bl	8005648 <IsLatinLetter>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d019      	beq.n	8005872 <UartReceiveCommand+0x132>
   	   	    	{
   	   	    	    // Next command name latter was received
   	   	    	    if ((idx < (data_size - 1)))
 800583e:	7dfa      	ldrb	r2, [r7, #23]
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	3b01      	subs	r3, #1
 8005844:	429a      	cmp	r2, r3
 8005846:	da14      	bge.n	8005872 <UartReceiveCommand+0x132>
   	   	    	    {
   	   	    	        command[idx] = symbol;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4413      	add	r3, r2
 800584e:	7d7a      	ldrb	r2, [r7, #21]
 8005850:	701a      	strb	r2, [r3, #0]
   	   	    	        status = HAL_UART_Transmit(uart_handle_type_def, &command[idx], 1, timeout_ms);
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	18d1      	adds	r1, r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7fe f8ff 	bl	8003a60 <HAL_UART_Transmit>
 8005862:	4603      	mov	r3, r0
 8005864:	75bb      	strb	r3, [r7, #22]
   	   	    	        idx++;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	3301      	adds	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
   	   	    	}
   	   	    	else
   	   	    	{
   	   	    	    // Unexpected symbol was received. Do nothing
   	   	    	}
   	            break;
 800586c:	e001      	b.n	8005872 <UartReceiveCommand+0x132>
   	   	        break;
 800586e:	bf00      	nop
 8005870:	e778      	b.n	8005764 <UartReceiveCommand+0x24>
   	            break;
 8005872:	bf00      	nop
   	    if((status = UartReceiveSymbol(uart_handle_type_def, &symbol, timeout_ms)) != HAL_OK)
 8005874:	e776      	b.n	8005764 <UartReceiveCommand+0x24>
   	   	}
    }

    return status;
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	0800a548 	.word	0x0800a548
 8005884:	0800a54c 	.word	0x0800a54c

08005888 <__cvt>:
 8005888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	ec57 6b10 	vmov	r6, r7, d0
 8005890:	2f00      	cmp	r7, #0
 8005892:	460c      	mov	r4, r1
 8005894:	4619      	mov	r1, r3
 8005896:	463b      	mov	r3, r7
 8005898:	bfbb      	ittet	lt
 800589a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800589e:	461f      	movlt	r7, r3
 80058a0:	2300      	movge	r3, #0
 80058a2:	232d      	movlt	r3, #45	@ 0x2d
 80058a4:	700b      	strb	r3, [r1, #0]
 80058a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80058ac:	4691      	mov	r9, r2
 80058ae:	f023 0820 	bic.w	r8, r3, #32
 80058b2:	bfbc      	itt	lt
 80058b4:	4632      	movlt	r2, r6
 80058b6:	4616      	movlt	r6, r2
 80058b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058bc:	d005      	beq.n	80058ca <__cvt+0x42>
 80058be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80058c2:	d100      	bne.n	80058c6 <__cvt+0x3e>
 80058c4:	3401      	adds	r4, #1
 80058c6:	2102      	movs	r1, #2
 80058c8:	e000      	b.n	80058cc <__cvt+0x44>
 80058ca:	2103      	movs	r1, #3
 80058cc:	ab03      	add	r3, sp, #12
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	ab02      	add	r3, sp, #8
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	ec47 6b10 	vmov	d0, r6, r7
 80058d8:	4653      	mov	r3, sl
 80058da:	4622      	mov	r2, r4
 80058dc:	f001 f87c 	bl	80069d8 <_dtoa_r>
 80058e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058e4:	4605      	mov	r5, r0
 80058e6:	d119      	bne.n	800591c <__cvt+0x94>
 80058e8:	f019 0f01 	tst.w	r9, #1
 80058ec:	d00e      	beq.n	800590c <__cvt+0x84>
 80058ee:	eb00 0904 	add.w	r9, r0, r4
 80058f2:	2200      	movs	r2, #0
 80058f4:	2300      	movs	r3, #0
 80058f6:	4630      	mov	r0, r6
 80058f8:	4639      	mov	r1, r7
 80058fa:	f7fb f8fd 	bl	8000af8 <__aeabi_dcmpeq>
 80058fe:	b108      	cbz	r0, 8005904 <__cvt+0x7c>
 8005900:	f8cd 900c 	str.w	r9, [sp, #12]
 8005904:	2230      	movs	r2, #48	@ 0x30
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	454b      	cmp	r3, r9
 800590a:	d31e      	bcc.n	800594a <__cvt+0xc2>
 800590c:	9b03      	ldr	r3, [sp, #12]
 800590e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005910:	1b5b      	subs	r3, r3, r5
 8005912:	4628      	mov	r0, r5
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	b004      	add	sp, #16
 8005918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005920:	eb00 0904 	add.w	r9, r0, r4
 8005924:	d1e5      	bne.n	80058f2 <__cvt+0x6a>
 8005926:	7803      	ldrb	r3, [r0, #0]
 8005928:	2b30      	cmp	r3, #48	@ 0x30
 800592a:	d10a      	bne.n	8005942 <__cvt+0xba>
 800592c:	2200      	movs	r2, #0
 800592e:	2300      	movs	r3, #0
 8005930:	4630      	mov	r0, r6
 8005932:	4639      	mov	r1, r7
 8005934:	f7fb f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8005938:	b918      	cbnz	r0, 8005942 <__cvt+0xba>
 800593a:	f1c4 0401 	rsb	r4, r4, #1
 800593e:	f8ca 4000 	str.w	r4, [sl]
 8005942:	f8da 3000 	ldr.w	r3, [sl]
 8005946:	4499      	add	r9, r3
 8005948:	e7d3      	b.n	80058f2 <__cvt+0x6a>
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	9103      	str	r1, [sp, #12]
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e7d9      	b.n	8005906 <__cvt+0x7e>

08005952 <__exponent>:
 8005952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005954:	2900      	cmp	r1, #0
 8005956:	bfba      	itte	lt
 8005958:	4249      	neglt	r1, r1
 800595a:	232d      	movlt	r3, #45	@ 0x2d
 800595c:	232b      	movge	r3, #43	@ 0x2b
 800595e:	2909      	cmp	r1, #9
 8005960:	7002      	strb	r2, [r0, #0]
 8005962:	7043      	strb	r3, [r0, #1]
 8005964:	dd29      	ble.n	80059ba <__exponent+0x68>
 8005966:	f10d 0307 	add.w	r3, sp, #7
 800596a:	461d      	mov	r5, r3
 800596c:	270a      	movs	r7, #10
 800596e:	461a      	mov	r2, r3
 8005970:	fbb1 f6f7 	udiv	r6, r1, r7
 8005974:	fb07 1416 	mls	r4, r7, r6, r1
 8005978:	3430      	adds	r4, #48	@ 0x30
 800597a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800597e:	460c      	mov	r4, r1
 8005980:	2c63      	cmp	r4, #99	@ 0x63
 8005982:	f103 33ff 	add.w	r3, r3, #4294967295
 8005986:	4631      	mov	r1, r6
 8005988:	dcf1      	bgt.n	800596e <__exponent+0x1c>
 800598a:	3130      	adds	r1, #48	@ 0x30
 800598c:	1e94      	subs	r4, r2, #2
 800598e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005992:	1c41      	adds	r1, r0, #1
 8005994:	4623      	mov	r3, r4
 8005996:	42ab      	cmp	r3, r5
 8005998:	d30a      	bcc.n	80059b0 <__exponent+0x5e>
 800599a:	f10d 0309 	add.w	r3, sp, #9
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	42ac      	cmp	r4, r5
 80059a2:	bf88      	it	hi
 80059a4:	2300      	movhi	r3, #0
 80059a6:	3302      	adds	r3, #2
 80059a8:	4403      	add	r3, r0
 80059aa:	1a18      	subs	r0, r3, r0
 80059ac:	b003      	add	sp, #12
 80059ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80059b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80059b8:	e7ed      	b.n	8005996 <__exponent+0x44>
 80059ba:	2330      	movs	r3, #48	@ 0x30
 80059bc:	3130      	adds	r1, #48	@ 0x30
 80059be:	7083      	strb	r3, [r0, #2]
 80059c0:	70c1      	strb	r1, [r0, #3]
 80059c2:	1d03      	adds	r3, r0, #4
 80059c4:	e7f1      	b.n	80059aa <__exponent+0x58>
	...

080059c8 <_printf_float>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	b08d      	sub	sp, #52	@ 0x34
 80059ce:	460c      	mov	r4, r1
 80059d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80059d4:	4616      	mov	r6, r2
 80059d6:	461f      	mov	r7, r3
 80059d8:	4605      	mov	r5, r0
 80059da:	f000 fef7 	bl	80067cc <_localeconv_r>
 80059de:	6803      	ldr	r3, [r0, #0]
 80059e0:	9304      	str	r3, [sp, #16]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fa fc5c 	bl	80002a0 <strlen>
 80059e8:	2300      	movs	r3, #0
 80059ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ec:	f8d8 3000 	ldr.w	r3, [r8]
 80059f0:	9005      	str	r0, [sp, #20]
 80059f2:	3307      	adds	r3, #7
 80059f4:	f023 0307 	bic.w	r3, r3, #7
 80059f8:	f103 0208 	add.w	r2, r3, #8
 80059fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a00:	f8d4 b000 	ldr.w	fp, [r4]
 8005a04:	f8c8 2000 	str.w	r2, [r8]
 8005a08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a10:	9307      	str	r3, [sp, #28]
 8005a12:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8005c90 <_printf_float+0x2c8>)
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295
 8005a24:	f7fb f89a 	bl	8000b5c <__aeabi_dcmpun>
 8005a28:	bb70      	cbnz	r0, 8005a88 <_printf_float+0xc0>
 8005a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a2e:	4b98      	ldr	r3, [pc, #608]	@ (8005c90 <_printf_float+0x2c8>)
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295
 8005a34:	f7fb f874 	bl	8000b20 <__aeabi_dcmple>
 8005a38:	bb30      	cbnz	r0, 8005a88 <_printf_float+0xc0>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4640      	mov	r0, r8
 8005a40:	4649      	mov	r1, r9
 8005a42:	f7fb f863 	bl	8000b0c <__aeabi_dcmplt>
 8005a46:	b110      	cbz	r0, 8005a4e <_printf_float+0x86>
 8005a48:	232d      	movs	r3, #45	@ 0x2d
 8005a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4e:	4a91      	ldr	r2, [pc, #580]	@ (8005c94 <_printf_float+0x2cc>)
 8005a50:	4b91      	ldr	r3, [pc, #580]	@ (8005c98 <_printf_float+0x2d0>)
 8005a52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a56:	bf8c      	ite	hi
 8005a58:	4690      	movhi	r8, r2
 8005a5a:	4698      	movls	r8, r3
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	f02b 0304 	bic.w	r3, fp, #4
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	f04f 0900 	mov.w	r9, #0
 8005a6a:	9700      	str	r7, [sp, #0]
 8005a6c:	4633      	mov	r3, r6
 8005a6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f9d2 	bl	8005e1c <_printf_common>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f040 808d 	bne.w	8005b98 <_printf_float+0x1d0>
 8005a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a82:	b00d      	add	sp, #52	@ 0x34
 8005a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	4649      	mov	r1, r9
 8005a90:	f7fb f864 	bl	8000b5c <__aeabi_dcmpun>
 8005a94:	b140      	cbz	r0, 8005aa8 <_printf_float+0xe0>
 8005a96:	464b      	mov	r3, r9
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfbc      	itt	lt
 8005a9c:	232d      	movlt	r3, #45	@ 0x2d
 8005a9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8005c9c <_printf_float+0x2d4>)
 8005aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca0 <_printf_float+0x2d8>)
 8005aa6:	e7d4      	b.n	8005a52 <_printf_float+0x8a>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005aae:	9206      	str	r2, [sp, #24]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	d13b      	bne.n	8005b2c <_printf_float+0x164>
 8005ab4:	2306      	movs	r3, #6
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005abc:	2300      	movs	r3, #0
 8005abe:	6022      	str	r2, [r4, #0]
 8005ac0:	9303      	str	r3, [sp, #12]
 8005ac2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ac4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ac8:	ab09      	add	r3, sp, #36	@ 0x24
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	6861      	ldr	r1, [r4, #4]
 8005ace:	ec49 8b10 	vmov	d0, r8, r9
 8005ad2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f7ff fed6 	bl	8005888 <__cvt>
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ae0:	2b47      	cmp	r3, #71	@ 0x47
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	d129      	bne.n	8005b3a <_printf_float+0x172>
 8005ae6:	1cc8      	adds	r0, r1, #3
 8005ae8:	db02      	blt.n	8005af0 <_printf_float+0x128>
 8005aea:	6863      	ldr	r3, [r4, #4]
 8005aec:	4299      	cmp	r1, r3
 8005aee:	dd41      	ble.n	8005b74 <_printf_float+0x1ac>
 8005af0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005af4:	fa5f fa8a 	uxtb.w	sl, sl
 8005af8:	3901      	subs	r1, #1
 8005afa:	4652      	mov	r2, sl
 8005afc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b00:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b02:	f7ff ff26 	bl	8005952 <__exponent>
 8005b06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b08:	1813      	adds	r3, r2, r0
 8005b0a:	2a01      	cmp	r2, #1
 8005b0c:	4681      	mov	r9, r0
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	dc02      	bgt.n	8005b18 <_printf_float+0x150>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	07d2      	lsls	r2, r2, #31
 8005b16:	d501      	bpl.n	8005b1c <_printf_float+0x154>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0a2      	beq.n	8005a6a <_printf_float+0xa2>
 8005b24:	232d      	movs	r3, #45	@ 0x2d
 8005b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b2a:	e79e      	b.n	8005a6a <_printf_float+0xa2>
 8005b2c:	9a06      	ldr	r2, [sp, #24]
 8005b2e:	2a47      	cmp	r2, #71	@ 0x47
 8005b30:	d1c2      	bne.n	8005ab8 <_printf_float+0xf0>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1c0      	bne.n	8005ab8 <_printf_float+0xf0>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7bd      	b.n	8005ab6 <_printf_float+0xee>
 8005b3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b3e:	d9db      	bls.n	8005af8 <_printf_float+0x130>
 8005b40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b44:	d118      	bne.n	8005b78 <_printf_float+0x1b0>
 8005b46:	2900      	cmp	r1, #0
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	dd0b      	ble.n	8005b64 <_printf_float+0x19c>
 8005b4c:	6121      	str	r1, [r4, #16]
 8005b4e:	b913      	cbnz	r3, 8005b56 <_printf_float+0x18e>
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	07d0      	lsls	r0, r2, #31
 8005b54:	d502      	bpl.n	8005b5c <_printf_float+0x194>
 8005b56:	3301      	adds	r3, #1
 8005b58:	440b      	add	r3, r1
 8005b5a:	6123      	str	r3, [r4, #16]
 8005b5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b5e:	f04f 0900 	mov.w	r9, #0
 8005b62:	e7db      	b.n	8005b1c <_printf_float+0x154>
 8005b64:	b913      	cbnz	r3, 8005b6c <_printf_float+0x1a4>
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	07d2      	lsls	r2, r2, #31
 8005b6a:	d501      	bpl.n	8005b70 <_printf_float+0x1a8>
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	e7f4      	b.n	8005b5a <_printf_float+0x192>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e7f2      	b.n	8005b5a <_printf_float+0x192>
 8005b74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	db05      	blt.n	8005b8a <_printf_float+0x1c2>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	6121      	str	r1, [r4, #16]
 8005b82:	07d8      	lsls	r0, r3, #31
 8005b84:	d5ea      	bpl.n	8005b5c <_printf_float+0x194>
 8005b86:	1c4b      	adds	r3, r1, #1
 8005b88:	e7e7      	b.n	8005b5a <_printf_float+0x192>
 8005b8a:	2900      	cmp	r1, #0
 8005b8c:	bfd4      	ite	le
 8005b8e:	f1c1 0202 	rsble	r2, r1, #2
 8005b92:	2201      	movgt	r2, #1
 8005b94:	4413      	add	r3, r2
 8005b96:	e7e0      	b.n	8005b5a <_printf_float+0x192>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	055a      	lsls	r2, r3, #21
 8005b9c:	d407      	bmi.n	8005bae <_printf_float+0x1e6>
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d12b      	bne.n	8005c04 <_printf_float+0x23c>
 8005bac:	e767      	b.n	8005a7e <_printf_float+0xb6>
 8005bae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bb2:	f240 80dd 	bls.w	8005d70 <_printf_float+0x3a8>
 8005bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f7fa ff9b 	bl	8000af8 <__aeabi_dcmpeq>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d033      	beq.n	8005c2e <_printf_float+0x266>
 8005bc6:	4a37      	ldr	r2, [pc, #220]	@ (8005ca4 <_printf_float+0x2dc>)
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f af54 	beq.w	8005a7e <_printf_float+0xb6>
 8005bd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005bda:	4543      	cmp	r3, r8
 8005bdc:	db02      	blt.n	8005be4 <_printf_float+0x21c>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	07d8      	lsls	r0, r3, #31
 8005be2:	d50f      	bpl.n	8005c04 <_printf_float+0x23c>
 8005be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f af45 	beq.w	8005a7e <_printf_float+0xb6>
 8005bf4:	f04f 0900 	mov.w	r9, #0
 8005bf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bfc:	f104 0a1a 	add.w	sl, r4, #26
 8005c00:	45c8      	cmp	r8, r9
 8005c02:	dc09      	bgt.n	8005c18 <_printf_float+0x250>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	079b      	lsls	r3, r3, #30
 8005c08:	f100 8103 	bmi.w	8005e12 <_printf_float+0x44a>
 8005c0c:	68e0      	ldr	r0, [r4, #12]
 8005c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c10:	4298      	cmp	r0, r3
 8005c12:	bfb8      	it	lt
 8005c14:	4618      	movlt	r0, r3
 8005c16:	e734      	b.n	8005a82 <_printf_float+0xba>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4652      	mov	r2, sl
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f af2b 	beq.w	8005a7e <_printf_float+0xb6>
 8005c28:	f109 0901 	add.w	r9, r9, #1
 8005c2c:	e7e8      	b.n	8005c00 <_printf_float+0x238>
 8005c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dc39      	bgt.n	8005ca8 <_printf_float+0x2e0>
 8005c34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <_printf_float+0x2dc>)
 8005c36:	2301      	movs	r3, #1
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f af1d 	beq.w	8005a7e <_printf_float+0xb6>
 8005c44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005c48:	ea59 0303 	orrs.w	r3, r9, r3
 8005c4c:	d102      	bne.n	8005c54 <_printf_float+0x28c>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	07d9      	lsls	r1, r3, #31
 8005c52:	d5d7      	bpl.n	8005c04 <_printf_float+0x23c>
 8005c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f af0d 	beq.w	8005a7e <_printf_float+0xb6>
 8005c64:	f04f 0a00 	mov.w	sl, #0
 8005c68:	f104 0b1a 	add.w	fp, r4, #26
 8005c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6e:	425b      	negs	r3, r3
 8005c70:	4553      	cmp	r3, sl
 8005c72:	dc01      	bgt.n	8005c78 <_printf_float+0x2b0>
 8005c74:	464b      	mov	r3, r9
 8005c76:	e793      	b.n	8005ba0 <_printf_float+0x1d8>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	465a      	mov	r2, fp
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f aefb 	beq.w	8005a7e <_printf_float+0xb6>
 8005c88:	f10a 0a01 	add.w	sl, sl, #1
 8005c8c:	e7ee      	b.n	8005c6c <_printf_float+0x2a4>
 8005c8e:	bf00      	nop
 8005c90:	7fefffff 	.word	0x7fefffff
 8005c94:	0800a592 	.word	0x0800a592
 8005c98:	0800a58e 	.word	0x0800a58e
 8005c9c:	0800a59a 	.word	0x0800a59a
 8005ca0:	0800a596 	.word	0x0800a596
 8005ca4:	0800a59e 	.word	0x0800a59e
 8005ca8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005caa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cae:	4553      	cmp	r3, sl
 8005cb0:	bfa8      	it	ge
 8005cb2:	4653      	movge	r3, sl
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	4699      	mov	r9, r3
 8005cb8:	dc36      	bgt.n	8005d28 <_printf_float+0x360>
 8005cba:	f04f 0b00 	mov.w	fp, #0
 8005cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cc2:	f104 021a 	add.w	r2, r4, #26
 8005cc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cc8:	9306      	str	r3, [sp, #24]
 8005cca:	eba3 0309 	sub.w	r3, r3, r9
 8005cce:	455b      	cmp	r3, fp
 8005cd0:	dc31      	bgt.n	8005d36 <_printf_float+0x36e>
 8005cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd4:	459a      	cmp	sl, r3
 8005cd6:	dc3a      	bgt.n	8005d4e <_printf_float+0x386>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	d437      	bmi.n	8005d4e <_printf_float+0x386>
 8005cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce0:	ebaa 0903 	sub.w	r9, sl, r3
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	ebaa 0303 	sub.w	r3, sl, r3
 8005cea:	4599      	cmp	r9, r3
 8005cec:	bfa8      	it	ge
 8005cee:	4699      	movge	r9, r3
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	dc33      	bgt.n	8005d5e <_printf_float+0x396>
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfe:	f104 0b1a 	add.w	fp, r4, #26
 8005d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d04:	ebaa 0303 	sub.w	r3, sl, r3
 8005d08:	eba3 0309 	sub.w	r3, r3, r9
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	f77f af79 	ble.w	8005c04 <_printf_float+0x23c>
 8005d12:	2301      	movs	r3, #1
 8005d14:	465a      	mov	r2, fp
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f aeae 	beq.w	8005a7e <_printf_float+0xb6>
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	e7ec      	b.n	8005d02 <_printf_float+0x33a>
 8005d28:	4642      	mov	r2, r8
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	d1c2      	bne.n	8005cba <_printf_float+0x2f2>
 8005d34:	e6a3      	b.n	8005a7e <_printf_float+0xb6>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	9206      	str	r2, [sp, #24]
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f ae9c 	beq.w	8005a7e <_printf_float+0xb6>
 8005d46:	9a06      	ldr	r2, [sp, #24]
 8005d48:	f10b 0b01 	add.w	fp, fp, #1
 8005d4c:	e7bb      	b.n	8005cc6 <_printf_float+0x2fe>
 8005d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1c0      	bne.n	8005cde <_printf_float+0x316>
 8005d5c:	e68f      	b.n	8005a7e <_printf_float+0xb6>
 8005d5e:	9a06      	ldr	r2, [sp, #24]
 8005d60:	464b      	mov	r3, r9
 8005d62:	4442      	add	r2, r8
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d1c3      	bne.n	8005cf6 <_printf_float+0x32e>
 8005d6e:	e686      	b.n	8005a7e <_printf_float+0xb6>
 8005d70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d74:	f1ba 0f01 	cmp.w	sl, #1
 8005d78:	dc01      	bgt.n	8005d7e <_printf_float+0x3b6>
 8005d7a:	07db      	lsls	r3, r3, #31
 8005d7c:	d536      	bpl.n	8005dec <_printf_float+0x424>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4642      	mov	r2, r8
 8005d82:	4631      	mov	r1, r6
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b8      	blx	r7
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f ae78 	beq.w	8005a7e <_printf_float+0xb6>
 8005d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f43f ae70 	beq.w	8005a7e <_printf_float+0xb6>
 8005d9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005da2:	2200      	movs	r2, #0
 8005da4:	2300      	movs	r3, #0
 8005da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005daa:	f7fa fea5 	bl	8000af8 <__aeabi_dcmpeq>
 8005dae:	b9c0      	cbnz	r0, 8005de2 <_printf_float+0x41a>
 8005db0:	4653      	mov	r3, sl
 8005db2:	f108 0201 	add.w	r2, r8, #1
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d10c      	bne.n	8005dda <_printf_float+0x412>
 8005dc0:	e65d      	b.n	8005a7e <_printf_float+0xb6>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	465a      	mov	r2, fp
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f ae56 	beq.w	8005a7e <_printf_float+0xb6>
 8005dd2:	f108 0801 	add.w	r8, r8, #1
 8005dd6:	45d0      	cmp	r8, sl
 8005dd8:	dbf3      	blt.n	8005dc2 <_printf_float+0x3fa>
 8005dda:	464b      	mov	r3, r9
 8005ddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005de0:	e6df      	b.n	8005ba2 <_printf_float+0x1da>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	f104 0b1a 	add.w	fp, r4, #26
 8005dea:	e7f4      	b.n	8005dd6 <_printf_float+0x40e>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4642      	mov	r2, r8
 8005df0:	e7e1      	b.n	8005db6 <_printf_float+0x3ee>
 8005df2:	2301      	movs	r3, #1
 8005df4:	464a      	mov	r2, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae3e 	beq.w	8005a7e <_printf_float+0xb6>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e0a:	1a5b      	subs	r3, r3, r1
 8005e0c:	4543      	cmp	r3, r8
 8005e0e:	dcf0      	bgt.n	8005df2 <_printf_float+0x42a>
 8005e10:	e6fc      	b.n	8005c0c <_printf_float+0x244>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	f104 0919 	add.w	r9, r4, #25
 8005e1a:	e7f4      	b.n	8005e06 <_printf_float+0x43e>

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4698      	mov	r8, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bfb8      	it	lt
 8005e30:	4613      	movlt	r3, r2
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc26      	bgt.n	8005eb2 <_printf_common+0x96>
 8005e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	3b00      	subs	r3, #0
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d42b      	bmi.n	8005ecc <_printf_common+0xb0>
 8005e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e78:	4641      	mov	r1, r8
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c8      	blx	r9
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d01e      	beq.n	8005ec0 <_printf_common+0xa4>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6922      	ldr	r2, [r4, #16]
 8005e86:	f003 0306 	and.w	r3, r3, #6
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	bf02      	ittt	eq
 8005e8e:	68e5      	ldreq	r5, [r4, #12]
 8005e90:	6833      	ldreq	r3, [r6, #0]
 8005e92:	1aed      	subeq	r5, r5, r3
 8005e94:	68a3      	ldr	r3, [r4, #8]
 8005e96:	bf0c      	ite	eq
 8005e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e9c:	2500      	movne	r5, #0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfc4      	itt	gt
 8005ea2:	1a9b      	subgt	r3, r3, r2
 8005ea4:	18ed      	addgt	r5, r5, r3
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	341a      	adds	r4, #26
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d11a      	bne.n	8005ee4 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e008      	b.n	8005ec4 <_printf_common+0xa8>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4641      	mov	r1, r8
 8005eb8:	4638      	mov	r0, r7
 8005eba:	47c8      	blx	r9
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0xac>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7c6      	b.n	8005e5a <_printf_common+0x3e>
 8005ecc:	18e1      	adds	r1, r4, r3
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	2030      	movs	r0, #48	@ 0x30
 8005ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ed6:	4422      	add	r2, r4
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7c7      	b.n	8005e74 <_printf_common+0x58>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4641      	mov	r1, r8
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c8      	blx	r9
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa4>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d9      	b.n	8005eaa <_printf_common+0x8e>
	...

08005ef8 <_printf_i>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	7e0f      	ldrb	r7, [r1, #24]
 8005efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f00:	2f78      	cmp	r7, #120	@ 0x78
 8005f02:	4691      	mov	r9, r2
 8005f04:	4680      	mov	r8, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f0e:	d807      	bhi.n	8005f20 <_printf_i+0x28>
 8005f10:	2f62      	cmp	r7, #98	@ 0x62
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x32>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	f000 80d1 	beq.w	80060bc <_printf_i+0x1c4>
 8005f1a:	2f58      	cmp	r7, #88	@ 0x58
 8005f1c:	f000 80b8 	beq.w	8006090 <_printf_i+0x198>
 8005f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f28:	e03a      	b.n	8005fa0 <_printf_i+0xa8>
 8005f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f2e:	2b15      	cmp	r3, #21
 8005f30:	d8f6      	bhi.n	8005f20 <_printf_i+0x28>
 8005f32:	a101      	add	r1, pc, #4	@ (adr r1, 8005f38 <_printf_i+0x40>)
 8005f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005f21 	.word	0x08005f21
 8005f44:	08005f21 	.word	0x08005f21
 8005f48:	08005f21 	.word	0x08005f21
 8005f4c:	08005f21 	.word	0x08005f21
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005f21 	.word	0x08005f21
 8005f58:	08005f21 	.word	0x08005f21
 8005f5c:	08005f21 	.word	0x08005f21
 8005f60:	08005f21 	.word	0x08005f21
 8005f64:	080060a3 	.word	0x080060a3
 8005f68:	08005fcf 	.word	0x08005fcf
 8005f6c:	0800605d 	.word	0x0800605d
 8005f70:	08005f21 	.word	0x08005f21
 8005f74:	08005f21 	.word	0x08005f21
 8005f78:	080060c5 	.word	0x080060c5
 8005f7c:	08005f21 	.word	0x08005f21
 8005f80:	08005fcf 	.word	0x08005fcf
 8005f84:	08005f21 	.word	0x08005f21
 8005f88:	08005f21 	.word	0x08005f21
 8005f8c:	08006065 	.word	0x08006065
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6032      	str	r2, [r6, #0]
 8005f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e09c      	b.n	80060de <_printf_i+0x1e6>
 8005fa4:	6833      	ldr	r3, [r6, #0]
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	1d19      	adds	r1, r3, #4
 8005faa:	6031      	str	r1, [r6, #0]
 8005fac:	0606      	lsls	r6, r0, #24
 8005fae:	d501      	bpl.n	8005fb4 <_printf_i+0xbc>
 8005fb0:	681d      	ldr	r5, [r3, #0]
 8005fb2:	e003      	b.n	8005fbc <_printf_i+0xc4>
 8005fb4:	0645      	lsls	r5, r0, #25
 8005fb6:	d5fb      	bpl.n	8005fb0 <_printf_i+0xb8>
 8005fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	da03      	bge.n	8005fc8 <_printf_i+0xd0>
 8005fc0:	232d      	movs	r3, #45	@ 0x2d
 8005fc2:	426d      	negs	r5, r5
 8005fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fc8:	4858      	ldr	r0, [pc, #352]	@ (800612c <_printf_i+0x234>)
 8005fca:	230a      	movs	r3, #10
 8005fcc:	e011      	b.n	8005ff2 <_printf_i+0xfa>
 8005fce:	6821      	ldr	r1, [r4, #0]
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	0608      	lsls	r0, r1, #24
 8005fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fd8:	d402      	bmi.n	8005fe0 <_printf_i+0xe8>
 8005fda:	0649      	lsls	r1, r1, #25
 8005fdc:	bf48      	it	mi
 8005fde:	b2ad      	uxthmi	r5, r5
 8005fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fe2:	4852      	ldr	r0, [pc, #328]	@ (800612c <_printf_i+0x234>)
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	bf14      	ite	ne
 8005fe8:	230a      	movne	r3, #10
 8005fea:	2308      	moveq	r3, #8
 8005fec:	2100      	movs	r1, #0
 8005fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ff2:	6866      	ldr	r6, [r4, #4]
 8005ff4:	60a6      	str	r6, [r4, #8]
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	db05      	blt.n	8006006 <_printf_i+0x10e>
 8005ffa:	6821      	ldr	r1, [r4, #0]
 8005ffc:	432e      	orrs	r6, r5
 8005ffe:	f021 0104 	bic.w	r1, r1, #4
 8006002:	6021      	str	r1, [r4, #0]
 8006004:	d04b      	beq.n	800609e <_printf_i+0x1a6>
 8006006:	4616      	mov	r6, r2
 8006008:	fbb5 f1f3 	udiv	r1, r5, r3
 800600c:	fb03 5711 	mls	r7, r3, r1, r5
 8006010:	5dc7      	ldrb	r7, [r0, r7]
 8006012:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006016:	462f      	mov	r7, r5
 8006018:	42bb      	cmp	r3, r7
 800601a:	460d      	mov	r5, r1
 800601c:	d9f4      	bls.n	8006008 <_printf_i+0x110>
 800601e:	2b08      	cmp	r3, #8
 8006020:	d10b      	bne.n	800603a <_printf_i+0x142>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	07df      	lsls	r7, r3, #31
 8006026:	d508      	bpl.n	800603a <_printf_i+0x142>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	6861      	ldr	r1, [r4, #4]
 800602c:	4299      	cmp	r1, r3
 800602e:	bfde      	ittt	le
 8006030:	2330      	movle	r3, #48	@ 0x30
 8006032:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006036:	f106 36ff 	addle.w	r6, r6, #4294967295
 800603a:	1b92      	subs	r2, r2, r6
 800603c:	6122      	str	r2, [r4, #16]
 800603e:	f8cd a000 	str.w	sl, [sp]
 8006042:	464b      	mov	r3, r9
 8006044:	aa03      	add	r2, sp, #12
 8006046:	4621      	mov	r1, r4
 8006048:	4640      	mov	r0, r8
 800604a:	f7ff fee7 	bl	8005e1c <_printf_common>
 800604e:	3001      	adds	r0, #1
 8006050:	d14a      	bne.n	80060e8 <_printf_i+0x1f0>
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	b004      	add	sp, #16
 8006058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	f043 0320 	orr.w	r3, r3, #32
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	4832      	ldr	r0, [pc, #200]	@ (8006130 <_printf_i+0x238>)
 8006066:	2778      	movs	r7, #120	@ 0x78
 8006068:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	6831      	ldr	r1, [r6, #0]
 8006070:	061f      	lsls	r7, r3, #24
 8006072:	f851 5b04 	ldr.w	r5, [r1], #4
 8006076:	d402      	bmi.n	800607e <_printf_i+0x186>
 8006078:	065f      	lsls	r7, r3, #25
 800607a:	bf48      	it	mi
 800607c:	b2ad      	uxthmi	r5, r5
 800607e:	6031      	str	r1, [r6, #0]
 8006080:	07d9      	lsls	r1, r3, #31
 8006082:	bf44      	itt	mi
 8006084:	f043 0320 	orrmi.w	r3, r3, #32
 8006088:	6023      	strmi	r3, [r4, #0]
 800608a:	b11d      	cbz	r5, 8006094 <_printf_i+0x19c>
 800608c:	2310      	movs	r3, #16
 800608e:	e7ad      	b.n	8005fec <_printf_i+0xf4>
 8006090:	4826      	ldr	r0, [pc, #152]	@ (800612c <_printf_i+0x234>)
 8006092:	e7e9      	b.n	8006068 <_printf_i+0x170>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	f023 0320 	bic.w	r3, r3, #32
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	e7f6      	b.n	800608c <_printf_i+0x194>
 800609e:	4616      	mov	r6, r2
 80060a0:	e7bd      	b.n	800601e <_printf_i+0x126>
 80060a2:	6833      	ldr	r3, [r6, #0]
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	6961      	ldr	r1, [r4, #20]
 80060a8:	1d18      	adds	r0, r3, #4
 80060aa:	6030      	str	r0, [r6, #0]
 80060ac:	062e      	lsls	r6, r5, #24
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	d501      	bpl.n	80060b6 <_printf_i+0x1be>
 80060b2:	6019      	str	r1, [r3, #0]
 80060b4:	e002      	b.n	80060bc <_printf_i+0x1c4>
 80060b6:	0668      	lsls	r0, r5, #25
 80060b8:	d5fb      	bpl.n	80060b2 <_printf_i+0x1ba>
 80060ba:	8019      	strh	r1, [r3, #0]
 80060bc:	2300      	movs	r3, #0
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	4616      	mov	r6, r2
 80060c2:	e7bc      	b.n	800603e <_printf_i+0x146>
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	6032      	str	r2, [r6, #0]
 80060ca:	681e      	ldr	r6, [r3, #0]
 80060cc:	6862      	ldr	r2, [r4, #4]
 80060ce:	2100      	movs	r1, #0
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7fa f895 	bl	8000200 <memchr>
 80060d6:	b108      	cbz	r0, 80060dc <_printf_i+0x1e4>
 80060d8:	1b80      	subs	r0, r0, r6
 80060da:	6060      	str	r0, [r4, #4]
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	2300      	movs	r3, #0
 80060e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e6:	e7aa      	b.n	800603e <_printf_i+0x146>
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	4632      	mov	r2, r6
 80060ec:	4649      	mov	r1, r9
 80060ee:	4640      	mov	r0, r8
 80060f0:	47d0      	blx	sl
 80060f2:	3001      	adds	r0, #1
 80060f4:	d0ad      	beq.n	8006052 <_printf_i+0x15a>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	079b      	lsls	r3, r3, #30
 80060fa:	d413      	bmi.n	8006124 <_printf_i+0x22c>
 80060fc:	68e0      	ldr	r0, [r4, #12]
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	4298      	cmp	r0, r3
 8006102:	bfb8      	it	lt
 8006104:	4618      	movlt	r0, r3
 8006106:	e7a6      	b.n	8006056 <_printf_i+0x15e>
 8006108:	2301      	movs	r3, #1
 800610a:	4632      	mov	r2, r6
 800610c:	4649      	mov	r1, r9
 800610e:	4640      	mov	r0, r8
 8006110:	47d0      	blx	sl
 8006112:	3001      	adds	r0, #1
 8006114:	d09d      	beq.n	8006052 <_printf_i+0x15a>
 8006116:	3501      	adds	r5, #1
 8006118:	68e3      	ldr	r3, [r4, #12]
 800611a:	9903      	ldr	r1, [sp, #12]
 800611c:	1a5b      	subs	r3, r3, r1
 800611e:	42ab      	cmp	r3, r5
 8006120:	dcf2      	bgt.n	8006108 <_printf_i+0x210>
 8006122:	e7eb      	b.n	80060fc <_printf_i+0x204>
 8006124:	2500      	movs	r5, #0
 8006126:	f104 0619 	add.w	r6, r4, #25
 800612a:	e7f5      	b.n	8006118 <_printf_i+0x220>
 800612c:	0800a5a0 	.word	0x0800a5a0
 8006130:	0800a5b1 	.word	0x0800a5b1

08006134 <_scanf_float>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	b087      	sub	sp, #28
 800613a:	4691      	mov	r9, r2
 800613c:	9303      	str	r3, [sp, #12]
 800613e:	688b      	ldr	r3, [r1, #8]
 8006140:	1e5a      	subs	r2, r3, #1
 8006142:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006146:	bf81      	itttt	hi
 8006148:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800614c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006150:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006154:	608b      	strhi	r3, [r1, #8]
 8006156:	680b      	ldr	r3, [r1, #0]
 8006158:	460a      	mov	r2, r1
 800615a:	f04f 0500 	mov.w	r5, #0
 800615e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006162:	f842 3b1c 	str.w	r3, [r2], #28
 8006166:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800616a:	4680      	mov	r8, r0
 800616c:	460c      	mov	r4, r1
 800616e:	bf98      	it	ls
 8006170:	f04f 0b00 	movls.w	fp, #0
 8006174:	9201      	str	r2, [sp, #4]
 8006176:	4616      	mov	r6, r2
 8006178:	46aa      	mov	sl, r5
 800617a:	462f      	mov	r7, r5
 800617c:	9502      	str	r5, [sp, #8]
 800617e:	68a2      	ldr	r2, [r4, #8]
 8006180:	b15a      	cbz	r2, 800619a <_scanf_float+0x66>
 8006182:	f8d9 3000 	ldr.w	r3, [r9]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b4e      	cmp	r3, #78	@ 0x4e
 800618a:	d863      	bhi.n	8006254 <_scanf_float+0x120>
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d83b      	bhi.n	8006208 <_scanf_float+0xd4>
 8006190:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006194:	b2c8      	uxtb	r0, r1
 8006196:	280e      	cmp	r0, #14
 8006198:	d939      	bls.n	800620e <_scanf_float+0xda>
 800619a:	b11f      	cbz	r7, 80061a4 <_scanf_float+0x70>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061a8:	f1ba 0f01 	cmp.w	sl, #1
 80061ac:	f200 8114 	bhi.w	80063d8 <_scanf_float+0x2a4>
 80061b0:	9b01      	ldr	r3, [sp, #4]
 80061b2:	429e      	cmp	r6, r3
 80061b4:	f200 8105 	bhi.w	80063c2 <_scanf_float+0x28e>
 80061b8:	2001      	movs	r0, #1
 80061ba:	b007      	add	sp, #28
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80061c4:	2a0d      	cmp	r2, #13
 80061c6:	d8e8      	bhi.n	800619a <_scanf_float+0x66>
 80061c8:	a101      	add	r1, pc, #4	@ (adr r1, 80061d0 <_scanf_float+0x9c>)
 80061ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006319 	.word	0x08006319
 80061d4:	0800619b 	.word	0x0800619b
 80061d8:	0800619b 	.word	0x0800619b
 80061dc:	0800619b 	.word	0x0800619b
 80061e0:	08006375 	.word	0x08006375
 80061e4:	0800634f 	.word	0x0800634f
 80061e8:	0800619b 	.word	0x0800619b
 80061ec:	0800619b 	.word	0x0800619b
 80061f0:	08006327 	.word	0x08006327
 80061f4:	0800619b 	.word	0x0800619b
 80061f8:	0800619b 	.word	0x0800619b
 80061fc:	0800619b 	.word	0x0800619b
 8006200:	0800619b 	.word	0x0800619b
 8006204:	080062e3 	.word	0x080062e3
 8006208:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800620c:	e7da      	b.n	80061c4 <_scanf_float+0x90>
 800620e:	290e      	cmp	r1, #14
 8006210:	d8c3      	bhi.n	800619a <_scanf_float+0x66>
 8006212:	a001      	add	r0, pc, #4	@ (adr r0, 8006218 <_scanf_float+0xe4>)
 8006214:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006218:	080062d3 	.word	0x080062d3
 800621c:	0800619b 	.word	0x0800619b
 8006220:	080062d3 	.word	0x080062d3
 8006224:	08006363 	.word	0x08006363
 8006228:	0800619b 	.word	0x0800619b
 800622c:	08006275 	.word	0x08006275
 8006230:	080062b9 	.word	0x080062b9
 8006234:	080062b9 	.word	0x080062b9
 8006238:	080062b9 	.word	0x080062b9
 800623c:	080062b9 	.word	0x080062b9
 8006240:	080062b9 	.word	0x080062b9
 8006244:	080062b9 	.word	0x080062b9
 8006248:	080062b9 	.word	0x080062b9
 800624c:	080062b9 	.word	0x080062b9
 8006250:	080062b9 	.word	0x080062b9
 8006254:	2b6e      	cmp	r3, #110	@ 0x6e
 8006256:	d809      	bhi.n	800626c <_scanf_float+0x138>
 8006258:	2b60      	cmp	r3, #96	@ 0x60
 800625a:	d8b1      	bhi.n	80061c0 <_scanf_float+0x8c>
 800625c:	2b54      	cmp	r3, #84	@ 0x54
 800625e:	d07b      	beq.n	8006358 <_scanf_float+0x224>
 8006260:	2b59      	cmp	r3, #89	@ 0x59
 8006262:	d19a      	bne.n	800619a <_scanf_float+0x66>
 8006264:	2d07      	cmp	r5, #7
 8006266:	d198      	bne.n	800619a <_scanf_float+0x66>
 8006268:	2508      	movs	r5, #8
 800626a:	e02f      	b.n	80062cc <_scanf_float+0x198>
 800626c:	2b74      	cmp	r3, #116	@ 0x74
 800626e:	d073      	beq.n	8006358 <_scanf_float+0x224>
 8006270:	2b79      	cmp	r3, #121	@ 0x79
 8006272:	e7f6      	b.n	8006262 <_scanf_float+0x12e>
 8006274:	6821      	ldr	r1, [r4, #0]
 8006276:	05c8      	lsls	r0, r1, #23
 8006278:	d51e      	bpl.n	80062b8 <_scanf_float+0x184>
 800627a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800627e:	6021      	str	r1, [r4, #0]
 8006280:	3701      	adds	r7, #1
 8006282:	f1bb 0f00 	cmp.w	fp, #0
 8006286:	d003      	beq.n	8006290 <_scanf_float+0x15c>
 8006288:	3201      	adds	r2, #1
 800628a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800628e:	60a2      	str	r2, [r4, #8]
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	3b01      	subs	r3, #1
 8006294:	60a3      	str	r3, [r4, #8]
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f8c9 3004 	str.w	r3, [r9, #4]
 80062a8:	f340 8082 	ble.w	80063b0 <_scanf_float+0x27c>
 80062ac:	f8d9 3000 	ldr.w	r3, [r9]
 80062b0:	3301      	adds	r3, #1
 80062b2:	f8c9 3000 	str.w	r3, [r9]
 80062b6:	e762      	b.n	800617e <_scanf_float+0x4a>
 80062b8:	eb1a 0105 	adds.w	r1, sl, r5
 80062bc:	f47f af6d 	bne.w	800619a <_scanf_float+0x66>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80062c6:	6022      	str	r2, [r4, #0]
 80062c8:	460d      	mov	r5, r1
 80062ca:	468a      	mov	sl, r1
 80062cc:	f806 3b01 	strb.w	r3, [r6], #1
 80062d0:	e7de      	b.n	8006290 <_scanf_float+0x15c>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	0610      	lsls	r0, r2, #24
 80062d6:	f57f af60 	bpl.w	800619a <_scanf_float+0x66>
 80062da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062de:	6022      	str	r2, [r4, #0]
 80062e0:	e7f4      	b.n	80062cc <_scanf_float+0x198>
 80062e2:	f1ba 0f00 	cmp.w	sl, #0
 80062e6:	d10c      	bne.n	8006302 <_scanf_float+0x1ce>
 80062e8:	b977      	cbnz	r7, 8006308 <_scanf_float+0x1d4>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80062f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80062f4:	d108      	bne.n	8006308 <_scanf_float+0x1d4>
 80062f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	f04f 0a01 	mov.w	sl, #1
 8006300:	e7e4      	b.n	80062cc <_scanf_float+0x198>
 8006302:	f1ba 0f02 	cmp.w	sl, #2
 8006306:	d050      	beq.n	80063aa <_scanf_float+0x276>
 8006308:	2d01      	cmp	r5, #1
 800630a:	d002      	beq.n	8006312 <_scanf_float+0x1de>
 800630c:	2d04      	cmp	r5, #4
 800630e:	f47f af44 	bne.w	800619a <_scanf_float+0x66>
 8006312:	3501      	adds	r5, #1
 8006314:	b2ed      	uxtb	r5, r5
 8006316:	e7d9      	b.n	80062cc <_scanf_float+0x198>
 8006318:	f1ba 0f01 	cmp.w	sl, #1
 800631c:	f47f af3d 	bne.w	800619a <_scanf_float+0x66>
 8006320:	f04f 0a02 	mov.w	sl, #2
 8006324:	e7d2      	b.n	80062cc <_scanf_float+0x198>
 8006326:	b975      	cbnz	r5, 8006346 <_scanf_float+0x212>
 8006328:	2f00      	cmp	r7, #0
 800632a:	f47f af37 	bne.w	800619c <_scanf_float+0x68>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006334:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006338:	f040 8103 	bne.w	8006542 <_scanf_float+0x40e>
 800633c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006340:	6022      	str	r2, [r4, #0]
 8006342:	2501      	movs	r5, #1
 8006344:	e7c2      	b.n	80062cc <_scanf_float+0x198>
 8006346:	2d03      	cmp	r5, #3
 8006348:	d0e3      	beq.n	8006312 <_scanf_float+0x1de>
 800634a:	2d05      	cmp	r5, #5
 800634c:	e7df      	b.n	800630e <_scanf_float+0x1da>
 800634e:	2d02      	cmp	r5, #2
 8006350:	f47f af23 	bne.w	800619a <_scanf_float+0x66>
 8006354:	2503      	movs	r5, #3
 8006356:	e7b9      	b.n	80062cc <_scanf_float+0x198>
 8006358:	2d06      	cmp	r5, #6
 800635a:	f47f af1e 	bne.w	800619a <_scanf_float+0x66>
 800635e:	2507      	movs	r5, #7
 8006360:	e7b4      	b.n	80062cc <_scanf_float+0x198>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	0591      	lsls	r1, r2, #22
 8006366:	f57f af18 	bpl.w	800619a <_scanf_float+0x66>
 800636a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	9702      	str	r7, [sp, #8]
 8006372:	e7ab      	b.n	80062cc <_scanf_float+0x198>
 8006374:	6822      	ldr	r2, [r4, #0]
 8006376:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800637a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800637e:	d005      	beq.n	800638c <_scanf_float+0x258>
 8006380:	0550      	lsls	r0, r2, #21
 8006382:	f57f af0a 	bpl.w	800619a <_scanf_float+0x66>
 8006386:	2f00      	cmp	r7, #0
 8006388:	f000 80db 	beq.w	8006542 <_scanf_float+0x40e>
 800638c:	0591      	lsls	r1, r2, #22
 800638e:	bf58      	it	pl
 8006390:	9902      	ldrpl	r1, [sp, #8]
 8006392:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006396:	bf58      	it	pl
 8006398:	1a79      	subpl	r1, r7, r1
 800639a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800639e:	bf58      	it	pl
 80063a0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063a4:	6022      	str	r2, [r4, #0]
 80063a6:	2700      	movs	r7, #0
 80063a8:	e790      	b.n	80062cc <_scanf_float+0x198>
 80063aa:	f04f 0a03 	mov.w	sl, #3
 80063ae:	e78d      	b.n	80062cc <_scanf_float+0x198>
 80063b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80063b4:	4649      	mov	r1, r9
 80063b6:	4640      	mov	r0, r8
 80063b8:	4798      	blx	r3
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f43f aedf 	beq.w	800617e <_scanf_float+0x4a>
 80063c0:	e6eb      	b.n	800619a <_scanf_float+0x66>
 80063c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ca:	464a      	mov	r2, r9
 80063cc:	4640      	mov	r0, r8
 80063ce:	4798      	blx	r3
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	e6eb      	b.n	80061b0 <_scanf_float+0x7c>
 80063d8:	1e6b      	subs	r3, r5, #1
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d824      	bhi.n	8006428 <_scanf_float+0x2f4>
 80063de:	2d02      	cmp	r5, #2
 80063e0:	d836      	bhi.n	8006450 <_scanf_float+0x31c>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	429e      	cmp	r6, r3
 80063e6:	f67f aee7 	bls.w	80061b8 <_scanf_float+0x84>
 80063ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063f2:	464a      	mov	r2, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	4798      	blx	r3
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	e7f0      	b.n	80063e2 <_scanf_float+0x2ae>
 8006400:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006404:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006408:	464a      	mov	r2, r9
 800640a:	4640      	mov	r0, r8
 800640c:	4798      	blx	r3
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	3b01      	subs	r3, #1
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006418:	fa5f fa8a 	uxtb.w	sl, sl
 800641c:	f1ba 0f02 	cmp.w	sl, #2
 8006420:	d1ee      	bne.n	8006400 <_scanf_float+0x2cc>
 8006422:	3d03      	subs	r5, #3
 8006424:	b2ed      	uxtb	r5, r5
 8006426:	1b76      	subs	r6, r6, r5
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	05da      	lsls	r2, r3, #23
 800642c:	d530      	bpl.n	8006490 <_scanf_float+0x35c>
 800642e:	055b      	lsls	r3, r3, #21
 8006430:	d511      	bpl.n	8006456 <_scanf_float+0x322>
 8006432:	9b01      	ldr	r3, [sp, #4]
 8006434:	429e      	cmp	r6, r3
 8006436:	f67f aebf 	bls.w	80061b8 <_scanf_float+0x84>
 800643a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800643e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006442:	464a      	mov	r2, r9
 8006444:	4640      	mov	r0, r8
 8006446:	4798      	blx	r3
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	3b01      	subs	r3, #1
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	e7f0      	b.n	8006432 <_scanf_float+0x2fe>
 8006450:	46aa      	mov	sl, r5
 8006452:	46b3      	mov	fp, r6
 8006454:	e7de      	b.n	8006414 <_scanf_float+0x2e0>
 8006456:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	2965      	cmp	r1, #101	@ 0x65
 800645e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006462:	f106 35ff 	add.w	r5, r6, #4294967295
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	d00c      	beq.n	8006484 <_scanf_float+0x350>
 800646a:	2945      	cmp	r1, #69	@ 0x45
 800646c:	d00a      	beq.n	8006484 <_scanf_float+0x350>
 800646e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006472:	464a      	mov	r2, r9
 8006474:	4640      	mov	r0, r8
 8006476:	4798      	blx	r3
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800647e:	3b01      	subs	r3, #1
 8006480:	1eb5      	subs	r5, r6, #2
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006488:	464a      	mov	r2, r9
 800648a:	4640      	mov	r0, r8
 800648c:	4798      	blx	r3
 800648e:	462e      	mov	r6, r5
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	f012 0210 	ands.w	r2, r2, #16
 8006496:	d001      	beq.n	800649c <_scanf_float+0x368>
 8006498:	2000      	movs	r0, #0
 800649a:	e68e      	b.n	80061ba <_scanf_float+0x86>
 800649c:	7032      	strb	r2, [r6, #0]
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a8:	d125      	bne.n	80064f6 <_scanf_float+0x3c2>
 80064aa:	9b02      	ldr	r3, [sp, #8]
 80064ac:	429f      	cmp	r7, r3
 80064ae:	d00a      	beq.n	80064c6 <_scanf_float+0x392>
 80064b0:	1bda      	subs	r2, r3, r7
 80064b2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80064b6:	429e      	cmp	r6, r3
 80064b8:	bf28      	it	cs
 80064ba:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80064be:	4922      	ldr	r1, [pc, #136]	@ (8006548 <_scanf_float+0x414>)
 80064c0:	4630      	mov	r0, r6
 80064c2:	f000 f907 	bl	80066d4 <siprintf>
 80064c6:	9901      	ldr	r1, [sp, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	4640      	mov	r0, r8
 80064cc:	f002 fc00 	bl	8008cd0 <_strtod_r>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	6821      	ldr	r1, [r4, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f011 0f02 	tst.w	r1, #2
 80064da:	ec57 6b10 	vmov	r6, r7, d0
 80064de:	f103 0204 	add.w	r2, r3, #4
 80064e2:	d015      	beq.n	8006510 <_scanf_float+0x3dc>
 80064e4:	9903      	ldr	r1, [sp, #12]
 80064e6:	600a      	str	r2, [r1, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	e9c3 6700 	strd	r6, r7, [r3]
 80064ee:	68e3      	ldr	r3, [r4, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60e3      	str	r3, [r4, #12]
 80064f4:	e7d0      	b.n	8006498 <_scanf_float+0x364>
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0e4      	beq.n	80064c6 <_scanf_float+0x392>
 80064fc:	9905      	ldr	r1, [sp, #20]
 80064fe:	230a      	movs	r3, #10
 8006500:	3101      	adds	r1, #1
 8006502:	4640      	mov	r0, r8
 8006504:	f002 fc64 	bl	8008dd0 <_strtol_r>
 8006508:	9b04      	ldr	r3, [sp, #16]
 800650a:	9e05      	ldr	r6, [sp, #20]
 800650c:	1ac2      	subs	r2, r0, r3
 800650e:	e7d0      	b.n	80064b2 <_scanf_float+0x37e>
 8006510:	f011 0f04 	tst.w	r1, #4
 8006514:	9903      	ldr	r1, [sp, #12]
 8006516:	600a      	str	r2, [r1, #0]
 8006518:	d1e6      	bne.n	80064e8 <_scanf_float+0x3b4>
 800651a:	681d      	ldr	r5, [r3, #0]
 800651c:	4632      	mov	r2, r6
 800651e:	463b      	mov	r3, r7
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fb1a 	bl	8000b5c <__aeabi_dcmpun>
 8006528:	b128      	cbz	r0, 8006536 <_scanf_float+0x402>
 800652a:	4808      	ldr	r0, [pc, #32]	@ (800654c <_scanf_float+0x418>)
 800652c:	f000 f9c6 	bl	80068bc <nanf>
 8006530:	ed85 0a00 	vstr	s0, [r5]
 8006534:	e7db      	b.n	80064ee <_scanf_float+0x3ba>
 8006536:	4630      	mov	r0, r6
 8006538:	4639      	mov	r1, r7
 800653a:	f7fa fb6d 	bl	8000c18 <__aeabi_d2f>
 800653e:	6028      	str	r0, [r5, #0]
 8006540:	e7d5      	b.n	80064ee <_scanf_float+0x3ba>
 8006542:	2700      	movs	r7, #0
 8006544:	e62e      	b.n	80061a4 <_scanf_float+0x70>
 8006546:	bf00      	nop
 8006548:	0800a5c2 	.word	0x0800a5c2
 800654c:	0800a703 	.word	0x0800a703

08006550 <std>:
 8006550:	2300      	movs	r3, #0
 8006552:	b510      	push	{r4, lr}
 8006554:	4604      	mov	r4, r0
 8006556:	e9c0 3300 	strd	r3, r3, [r0]
 800655a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800655e:	6083      	str	r3, [r0, #8]
 8006560:	8181      	strh	r1, [r0, #12]
 8006562:	6643      	str	r3, [r0, #100]	@ 0x64
 8006564:	81c2      	strh	r2, [r0, #14]
 8006566:	6183      	str	r3, [r0, #24]
 8006568:	4619      	mov	r1, r3
 800656a:	2208      	movs	r2, #8
 800656c:	305c      	adds	r0, #92	@ 0x5c
 800656e:	f000 f916 	bl	800679e <memset>
 8006572:	4b0d      	ldr	r3, [pc, #52]	@ (80065a8 <std+0x58>)
 8006574:	6263      	str	r3, [r4, #36]	@ 0x24
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <std+0x5c>)
 8006578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800657a:	4b0d      	ldr	r3, [pc, #52]	@ (80065b0 <std+0x60>)
 800657c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800657e:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <std+0x64>)
 8006580:	6323      	str	r3, [r4, #48]	@ 0x30
 8006582:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <std+0x68>)
 8006584:	6224      	str	r4, [r4, #32]
 8006586:	429c      	cmp	r4, r3
 8006588:	d006      	beq.n	8006598 <std+0x48>
 800658a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800658e:	4294      	cmp	r4, r2
 8006590:	d002      	beq.n	8006598 <std+0x48>
 8006592:	33d0      	adds	r3, #208	@ 0xd0
 8006594:	429c      	cmp	r4, r3
 8006596:	d105      	bne.n	80065a4 <std+0x54>
 8006598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a0:	f000 b988 	b.w	80068b4 <__retarget_lock_init_recursive>
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop
 80065a8:	08006719 	.word	0x08006719
 80065ac:	0800673b 	.word	0x0800673b
 80065b0:	08006773 	.word	0x08006773
 80065b4:	08006797 	.word	0x08006797
 80065b8:	2000039c 	.word	0x2000039c

080065bc <stdio_exit_handler>:
 80065bc:	4a02      	ldr	r2, [pc, #8]	@ (80065c8 <stdio_exit_handler+0xc>)
 80065be:	4903      	ldr	r1, [pc, #12]	@ (80065cc <stdio_exit_handler+0x10>)
 80065c0:	4803      	ldr	r0, [pc, #12]	@ (80065d0 <stdio_exit_handler+0x14>)
 80065c2:	f000 b869 	b.w	8006698 <_fwalk_sglue>
 80065c6:	bf00      	nop
 80065c8:	20000070 	.word	0x20000070
 80065cc:	0800918d 	.word	0x0800918d
 80065d0:	20000080 	.word	0x20000080

080065d4 <cleanup_stdio>:
 80065d4:	6841      	ldr	r1, [r0, #4]
 80065d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <cleanup_stdio+0x34>)
 80065d8:	4299      	cmp	r1, r3
 80065da:	b510      	push	{r4, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	d001      	beq.n	80065e4 <cleanup_stdio+0x10>
 80065e0:	f002 fdd4 	bl	800918c <_fflush_r>
 80065e4:	68a1      	ldr	r1, [r4, #8]
 80065e6:	4b09      	ldr	r3, [pc, #36]	@ (800660c <cleanup_stdio+0x38>)
 80065e8:	4299      	cmp	r1, r3
 80065ea:	d002      	beq.n	80065f2 <cleanup_stdio+0x1e>
 80065ec:	4620      	mov	r0, r4
 80065ee:	f002 fdcd 	bl	800918c <_fflush_r>
 80065f2:	68e1      	ldr	r1, [r4, #12]
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <cleanup_stdio+0x3c>)
 80065f6:	4299      	cmp	r1, r3
 80065f8:	d004      	beq.n	8006604 <cleanup_stdio+0x30>
 80065fa:	4620      	mov	r0, r4
 80065fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006600:	f002 bdc4 	b.w	800918c <_fflush_r>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	bf00      	nop
 8006608:	2000039c 	.word	0x2000039c
 800660c:	20000404 	.word	0x20000404
 8006610:	2000046c 	.word	0x2000046c

08006614 <global_stdio_init.part.0>:
 8006614:	b510      	push	{r4, lr}
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <global_stdio_init.part.0+0x30>)
 8006618:	4c0b      	ldr	r4, [pc, #44]	@ (8006648 <global_stdio_init.part.0+0x34>)
 800661a:	4a0c      	ldr	r2, [pc, #48]	@ (800664c <global_stdio_init.part.0+0x38>)
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	4620      	mov	r0, r4
 8006620:	2200      	movs	r2, #0
 8006622:	2104      	movs	r1, #4
 8006624:	f7ff ff94 	bl	8006550 <std>
 8006628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800662c:	2201      	movs	r2, #1
 800662e:	2109      	movs	r1, #9
 8006630:	f7ff ff8e 	bl	8006550 <std>
 8006634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006638:	2202      	movs	r2, #2
 800663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663e:	2112      	movs	r1, #18
 8006640:	f7ff bf86 	b.w	8006550 <std>
 8006644:	200004d4 	.word	0x200004d4
 8006648:	2000039c 	.word	0x2000039c
 800664c:	080065bd 	.word	0x080065bd

08006650 <__sfp_lock_acquire>:
 8006650:	4801      	ldr	r0, [pc, #4]	@ (8006658 <__sfp_lock_acquire+0x8>)
 8006652:	f000 b930 	b.w	80068b6 <__retarget_lock_acquire_recursive>
 8006656:	bf00      	nop
 8006658:	200004dd 	.word	0x200004dd

0800665c <__sfp_lock_release>:
 800665c:	4801      	ldr	r0, [pc, #4]	@ (8006664 <__sfp_lock_release+0x8>)
 800665e:	f000 b92b 	b.w	80068b8 <__retarget_lock_release_recursive>
 8006662:	bf00      	nop
 8006664:	200004dd 	.word	0x200004dd

08006668 <__sinit>:
 8006668:	b510      	push	{r4, lr}
 800666a:	4604      	mov	r4, r0
 800666c:	f7ff fff0 	bl	8006650 <__sfp_lock_acquire>
 8006670:	6a23      	ldr	r3, [r4, #32]
 8006672:	b11b      	cbz	r3, 800667c <__sinit+0x14>
 8006674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006678:	f7ff bff0 	b.w	800665c <__sfp_lock_release>
 800667c:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__sinit+0x28>)
 800667e:	6223      	str	r3, [r4, #32]
 8006680:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <__sinit+0x2c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f5      	bne.n	8006674 <__sinit+0xc>
 8006688:	f7ff ffc4 	bl	8006614 <global_stdio_init.part.0>
 800668c:	e7f2      	b.n	8006674 <__sinit+0xc>
 800668e:	bf00      	nop
 8006690:	080065d5 	.word	0x080065d5
 8006694:	200004d4 	.word	0x200004d4

08006698 <_fwalk_sglue>:
 8006698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800669c:	4607      	mov	r7, r0
 800669e:	4688      	mov	r8, r1
 80066a0:	4614      	mov	r4, r2
 80066a2:	2600      	movs	r6, #0
 80066a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066a8:	f1b9 0901 	subs.w	r9, r9, #1
 80066ac:	d505      	bpl.n	80066ba <_fwalk_sglue+0x22>
 80066ae:	6824      	ldr	r4, [r4, #0]
 80066b0:	2c00      	cmp	r4, #0
 80066b2:	d1f7      	bne.n	80066a4 <_fwalk_sglue+0xc>
 80066b4:	4630      	mov	r0, r6
 80066b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ba:	89ab      	ldrh	r3, [r5, #12]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d907      	bls.n	80066d0 <_fwalk_sglue+0x38>
 80066c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c4:	3301      	adds	r3, #1
 80066c6:	d003      	beq.n	80066d0 <_fwalk_sglue+0x38>
 80066c8:	4629      	mov	r1, r5
 80066ca:	4638      	mov	r0, r7
 80066cc:	47c0      	blx	r8
 80066ce:	4306      	orrs	r6, r0
 80066d0:	3568      	adds	r5, #104	@ 0x68
 80066d2:	e7e9      	b.n	80066a8 <_fwalk_sglue+0x10>

080066d4 <siprintf>:
 80066d4:	b40e      	push	{r1, r2, r3}
 80066d6:	b510      	push	{r4, lr}
 80066d8:	b09d      	sub	sp, #116	@ 0x74
 80066da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80066dc:	9002      	str	r0, [sp, #8]
 80066de:	9006      	str	r0, [sp, #24]
 80066e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066e4:	480a      	ldr	r0, [pc, #40]	@ (8006710 <siprintf+0x3c>)
 80066e6:	9107      	str	r1, [sp, #28]
 80066e8:	9104      	str	r1, [sp, #16]
 80066ea:	490a      	ldr	r1, [pc, #40]	@ (8006714 <siprintf+0x40>)
 80066ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f0:	9105      	str	r1, [sp, #20]
 80066f2:	2400      	movs	r4, #0
 80066f4:	a902      	add	r1, sp, #8
 80066f6:	6800      	ldr	r0, [r0, #0]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80066fc:	f002 fbc6 	bl	8008e8c <_svfiprintf_r>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	701c      	strb	r4, [r3, #0]
 8006704:	b01d      	add	sp, #116	@ 0x74
 8006706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670a:	b003      	add	sp, #12
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	2000007c 	.word	0x2000007c
 8006714:	ffff0208 	.word	0xffff0208

08006718 <__sread>:
 8006718:	b510      	push	{r4, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006720:	f000 f87a 	bl	8006818 <_read_r>
 8006724:	2800      	cmp	r0, #0
 8006726:	bfab      	itete	ge
 8006728:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800672a:	89a3      	ldrhlt	r3, [r4, #12]
 800672c:	181b      	addge	r3, r3, r0
 800672e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006732:	bfac      	ite	ge
 8006734:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006736:	81a3      	strhlt	r3, [r4, #12]
 8006738:	bd10      	pop	{r4, pc}

0800673a <__swrite>:
 800673a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673e:	461f      	mov	r7, r3
 8006740:	898b      	ldrh	r3, [r1, #12]
 8006742:	05db      	lsls	r3, r3, #23
 8006744:	4605      	mov	r5, r0
 8006746:	460c      	mov	r4, r1
 8006748:	4616      	mov	r6, r2
 800674a:	d505      	bpl.n	8006758 <__swrite+0x1e>
 800674c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006750:	2302      	movs	r3, #2
 8006752:	2200      	movs	r2, #0
 8006754:	f000 f84e 	bl	80067f4 <_lseek_r>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800675e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	4632      	mov	r2, r6
 8006766:	463b      	mov	r3, r7
 8006768:	4628      	mov	r0, r5
 800676a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	f000 b865 	b.w	800683c <_write_r>

08006772 <__sseek>:
 8006772:	b510      	push	{r4, lr}
 8006774:	460c      	mov	r4, r1
 8006776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677a:	f000 f83b 	bl	80067f4 <_lseek_r>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	bf15      	itete	ne
 8006784:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006786:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800678a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800678e:	81a3      	strheq	r3, [r4, #12]
 8006790:	bf18      	it	ne
 8006792:	81a3      	strhne	r3, [r4, #12]
 8006794:	bd10      	pop	{r4, pc}

08006796 <__sclose>:
 8006796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679a:	f000 b81b 	b.w	80067d4 <_close_r>

0800679e <memset>:
 800679e:	4402      	add	r2, r0
 80067a0:	4603      	mov	r3, r0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d100      	bne.n	80067a8 <memset+0xa>
 80067a6:	4770      	bx	lr
 80067a8:	f803 1b01 	strb.w	r1, [r3], #1
 80067ac:	e7f9      	b.n	80067a2 <memset+0x4>

080067ae <strcat>:
 80067ae:	b510      	push	{r4, lr}
 80067b0:	4602      	mov	r2, r0
 80067b2:	7814      	ldrb	r4, [r2, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	3201      	adds	r2, #1
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	d1fa      	bne.n	80067b2 <strcat+0x4>
 80067bc:	3b01      	subs	r3, #1
 80067be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	d1f9      	bne.n	80067be <strcat+0x10>
 80067ca:	bd10      	pop	{r4, pc}

080067cc <_localeconv_r>:
 80067cc:	4800      	ldr	r0, [pc, #0]	@ (80067d0 <_localeconv_r+0x4>)
 80067ce:	4770      	bx	lr
 80067d0:	200001bc 	.word	0x200001bc

080067d4 <_close_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d06      	ldr	r5, [pc, #24]	@ (80067f0 <_close_r+0x1c>)
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	602b      	str	r3, [r5, #0]
 80067e0:	f7fb f8e1 	bl	80019a6 <_close>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_close_r+0x1a>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_close_r+0x1a>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	200004d8 	.word	0x200004d8

080067f4 <_lseek_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4d07      	ldr	r5, [pc, #28]	@ (8006814 <_lseek_r+0x20>)
 80067f8:	4604      	mov	r4, r0
 80067fa:	4608      	mov	r0, r1
 80067fc:	4611      	mov	r1, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	602a      	str	r2, [r5, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f7fb f8f6 	bl	80019f4 <_lseek>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_lseek_r+0x1e>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_lseek_r+0x1e>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	200004d8 	.word	0x200004d8

08006818 <_read_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d07      	ldr	r5, [pc, #28]	@ (8006838 <_read_r+0x20>)
 800681c:	4604      	mov	r4, r0
 800681e:	4608      	mov	r0, r1
 8006820:	4611      	mov	r1, r2
 8006822:	2200      	movs	r2, #0
 8006824:	602a      	str	r2, [r5, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f7fb f884 	bl	8001934 <_read>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_read_r+0x1e>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_read_r+0x1e>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	200004d8 	.word	0x200004d8

0800683c <_write_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d07      	ldr	r5, [pc, #28]	@ (800685c <_write_r+0x20>)
 8006840:	4604      	mov	r4, r0
 8006842:	4608      	mov	r0, r1
 8006844:	4611      	mov	r1, r2
 8006846:	2200      	movs	r2, #0
 8006848:	602a      	str	r2, [r5, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f7fb f88f 	bl	800196e <_write>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_write_r+0x1e>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_write_r+0x1e>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	200004d8 	.word	0x200004d8

08006860 <__errno>:
 8006860:	4b01      	ldr	r3, [pc, #4]	@ (8006868 <__errno+0x8>)
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	2000007c 	.word	0x2000007c

0800686c <__libc_init_array>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	4d0d      	ldr	r5, [pc, #52]	@ (80068a4 <__libc_init_array+0x38>)
 8006870:	4c0d      	ldr	r4, [pc, #52]	@ (80068a8 <__libc_init_array+0x3c>)
 8006872:	1b64      	subs	r4, r4, r5
 8006874:	10a4      	asrs	r4, r4, #2
 8006876:	2600      	movs	r6, #0
 8006878:	42a6      	cmp	r6, r4
 800687a:	d109      	bne.n	8006890 <__libc_init_array+0x24>
 800687c:	4d0b      	ldr	r5, [pc, #44]	@ (80068ac <__libc_init_array+0x40>)
 800687e:	4c0c      	ldr	r4, [pc, #48]	@ (80068b0 <__libc_init_array+0x44>)
 8006880:	f003 fb74 	bl	8009f6c <_init>
 8006884:	1b64      	subs	r4, r4, r5
 8006886:	10a4      	asrs	r4, r4, #2
 8006888:	2600      	movs	r6, #0
 800688a:	42a6      	cmp	r6, r4
 800688c:	d105      	bne.n	800689a <__libc_init_array+0x2e>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	f855 3b04 	ldr.w	r3, [r5], #4
 8006894:	4798      	blx	r3
 8006896:	3601      	adds	r6, #1
 8006898:	e7ee      	b.n	8006878 <__libc_init_array+0xc>
 800689a:	f855 3b04 	ldr.w	r3, [r5], #4
 800689e:	4798      	blx	r3
 80068a0:	3601      	adds	r6, #1
 80068a2:	e7f2      	b.n	800688a <__libc_init_array+0x1e>
 80068a4:	0800a9bc 	.word	0x0800a9bc
 80068a8:	0800a9bc 	.word	0x0800a9bc
 80068ac:	0800a9bc 	.word	0x0800a9bc
 80068b0:	0800a9c0 	.word	0x0800a9c0

080068b4 <__retarget_lock_init_recursive>:
 80068b4:	4770      	bx	lr

080068b6 <__retarget_lock_acquire_recursive>:
 80068b6:	4770      	bx	lr

080068b8 <__retarget_lock_release_recursive>:
 80068b8:	4770      	bx	lr
	...

080068bc <nanf>:
 80068bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068c4 <nanf+0x8>
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	7fc00000 	.word	0x7fc00000

080068c8 <quorem>:
 80068c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	6903      	ldr	r3, [r0, #16]
 80068ce:	690c      	ldr	r4, [r1, #16]
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	4607      	mov	r7, r0
 80068d4:	db7e      	blt.n	80069d4 <quorem+0x10c>
 80068d6:	3c01      	subs	r4, #1
 80068d8:	f101 0814 	add.w	r8, r1, #20
 80068dc:	00a3      	lsls	r3, r4, #2
 80068de:	f100 0514 	add.w	r5, r0, #20
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f2:	3301      	adds	r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80068fe:	d32e      	bcc.n	800695e <quorem+0x96>
 8006900:	f04f 0a00 	mov.w	sl, #0
 8006904:	46c4      	mov	ip, r8
 8006906:	46ae      	mov	lr, r5
 8006908:	46d3      	mov	fp, sl
 800690a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800690e:	b298      	uxth	r0, r3
 8006910:	fb06 a000 	mla	r0, r6, r0, sl
 8006914:	0c02      	lsrs	r2, r0, #16
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	fb06 2303 	mla	r3, r6, r3, r2
 800691c:	f8de 2000 	ldr.w	r2, [lr]
 8006920:	b280      	uxth	r0, r0
 8006922:	b292      	uxth	r2, r2
 8006924:	1a12      	subs	r2, r2, r0
 8006926:	445a      	add	r2, fp
 8006928:	f8de 0000 	ldr.w	r0, [lr]
 800692c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006930:	b29b      	uxth	r3, r3
 8006932:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006936:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800693a:	b292      	uxth	r2, r2
 800693c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006940:	45e1      	cmp	r9, ip
 8006942:	f84e 2b04 	str.w	r2, [lr], #4
 8006946:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800694a:	d2de      	bcs.n	800690a <quorem+0x42>
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	58eb      	ldr	r3, [r5, r3]
 8006950:	b92b      	cbnz	r3, 800695e <quorem+0x96>
 8006952:	9b01      	ldr	r3, [sp, #4]
 8006954:	3b04      	subs	r3, #4
 8006956:	429d      	cmp	r5, r3
 8006958:	461a      	mov	r2, r3
 800695a:	d32f      	bcc.n	80069bc <quorem+0xf4>
 800695c:	613c      	str	r4, [r7, #16]
 800695e:	4638      	mov	r0, r7
 8006960:	f001 f9c6 	bl	8007cf0 <__mcmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	db25      	blt.n	80069b4 <quorem+0xec>
 8006968:	4629      	mov	r1, r5
 800696a:	2000      	movs	r0, #0
 800696c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006970:	f8d1 c000 	ldr.w	ip, [r1]
 8006974:	fa1f fe82 	uxth.w	lr, r2
 8006978:	fa1f f38c 	uxth.w	r3, ip
 800697c:	eba3 030e 	sub.w	r3, r3, lr
 8006980:	4403      	add	r3, r0
 8006982:	0c12      	lsrs	r2, r2, #16
 8006984:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006988:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006992:	45c1      	cmp	r9, r8
 8006994:	f841 3b04 	str.w	r3, [r1], #4
 8006998:	ea4f 4022 	mov.w	r0, r2, asr #16
 800699c:	d2e6      	bcs.n	800696c <quorem+0xa4>
 800699e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069a6:	b922      	cbnz	r2, 80069b2 <quorem+0xea>
 80069a8:	3b04      	subs	r3, #4
 80069aa:	429d      	cmp	r5, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	d30b      	bcc.n	80069c8 <quorem+0x100>
 80069b0:	613c      	str	r4, [r7, #16]
 80069b2:	3601      	adds	r6, #1
 80069b4:	4630      	mov	r0, r6
 80069b6:	b003      	add	sp, #12
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	3b04      	subs	r3, #4
 80069c0:	2a00      	cmp	r2, #0
 80069c2:	d1cb      	bne.n	800695c <quorem+0x94>
 80069c4:	3c01      	subs	r4, #1
 80069c6:	e7c6      	b.n	8006956 <quorem+0x8e>
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	3b04      	subs	r3, #4
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	d1ef      	bne.n	80069b0 <quorem+0xe8>
 80069d0:	3c01      	subs	r4, #1
 80069d2:	e7ea      	b.n	80069aa <quorem+0xe2>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7ee      	b.n	80069b6 <quorem+0xee>

080069d8 <_dtoa_r>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	69c7      	ldr	r7, [r0, #28]
 80069de:	b097      	sub	sp, #92	@ 0x5c
 80069e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80069e4:	ec55 4b10 	vmov	r4, r5, d0
 80069e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80069ea:	9107      	str	r1, [sp, #28]
 80069ec:	4681      	mov	r9, r0
 80069ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80069f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80069f2:	b97f      	cbnz	r7, 8006a14 <_dtoa_r+0x3c>
 80069f4:	2010      	movs	r0, #16
 80069f6:	f000 fe09 	bl	800760c <malloc>
 80069fa:	4602      	mov	r2, r0
 80069fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a00:	b920      	cbnz	r0, 8006a0c <_dtoa_r+0x34>
 8006a02:	4ba9      	ldr	r3, [pc, #676]	@ (8006ca8 <_dtoa_r+0x2d0>)
 8006a04:	21ef      	movs	r1, #239	@ 0xef
 8006a06:	48a9      	ldr	r0, [pc, #676]	@ (8006cac <_dtoa_r+0x2d4>)
 8006a08:	f002 fc3a 	bl	8009280 <__assert_func>
 8006a0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a10:	6007      	str	r7, [r0, #0]
 8006a12:	60c7      	str	r7, [r0, #12]
 8006a14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	b159      	cbz	r1, 8006a34 <_dtoa_r+0x5c>
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	604a      	str	r2, [r1, #4]
 8006a20:	2301      	movs	r3, #1
 8006a22:	4093      	lsls	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	4648      	mov	r0, r9
 8006a28:	f000 fee6 	bl	80077f8 <_Bfree>
 8006a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	1e2b      	subs	r3, r5, #0
 8006a36:	bfb9      	ittee	lt
 8006a38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a3c:	9305      	strlt	r3, [sp, #20]
 8006a3e:	2300      	movge	r3, #0
 8006a40:	6033      	strge	r3, [r6, #0]
 8006a42:	9f05      	ldr	r7, [sp, #20]
 8006a44:	4b9a      	ldr	r3, [pc, #616]	@ (8006cb0 <_dtoa_r+0x2d8>)
 8006a46:	bfbc      	itt	lt
 8006a48:	2201      	movlt	r2, #1
 8006a4a:	6032      	strlt	r2, [r6, #0]
 8006a4c:	43bb      	bics	r3, r7
 8006a4e:	d112      	bne.n	8006a76 <_dtoa_r+0x9e>
 8006a50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a5c:	4323      	orrs	r3, r4
 8006a5e:	f000 855a 	beq.w	8007516 <_dtoa_r+0xb3e>
 8006a62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006cc4 <_dtoa_r+0x2ec>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 855c 	beq.w	8007526 <_dtoa_r+0xb4e>
 8006a6e:	f10a 0303 	add.w	r3, sl, #3
 8006a72:	f000 bd56 	b.w	8007522 <_dtoa_r+0xb4a>
 8006a76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	ec51 0b17 	vmov	r0, r1, d7
 8006a80:	2300      	movs	r3, #0
 8006a82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006a86:	f7fa f837 	bl	8000af8 <__aeabi_dcmpeq>
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	b158      	cbz	r0, 8006aa6 <_dtoa_r+0xce>
 8006a8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a90:	2301      	movs	r3, #1
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a96:	b113      	cbz	r3, 8006a9e <_dtoa_r+0xc6>
 8006a98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006a9a:	4b86      	ldr	r3, [pc, #536]	@ (8006cb4 <_dtoa_r+0x2dc>)
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006cc8 <_dtoa_r+0x2f0>
 8006aa2:	f000 bd40 	b.w	8007526 <_dtoa_r+0xb4e>
 8006aa6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006aaa:	aa14      	add	r2, sp, #80	@ 0x50
 8006aac:	a915      	add	r1, sp, #84	@ 0x54
 8006aae:	4648      	mov	r0, r9
 8006ab0:	f001 fa3e 	bl	8007f30 <__d2b>
 8006ab4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ab8:	9002      	str	r0, [sp, #8]
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	d078      	beq.n	8006bb0 <_dtoa_r+0x1d8>
 8006abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ac0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006acc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ad0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ad4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ad8:	4619      	mov	r1, r3
 8006ada:	2200      	movs	r2, #0
 8006adc:	4b76      	ldr	r3, [pc, #472]	@ (8006cb8 <_dtoa_r+0x2e0>)
 8006ade:	f7f9 fbeb 	bl	80002b8 <__aeabi_dsub>
 8006ae2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006c90 <_dtoa_r+0x2b8>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fd9e 	bl	8000628 <__aeabi_dmul>
 8006aec:	a36a      	add	r3, pc, #424	@ (adr r3, 8006c98 <_dtoa_r+0x2c0>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fbe3 	bl	80002bc <__adddf3>
 8006af6:	4604      	mov	r4, r0
 8006af8:	4630      	mov	r0, r6
 8006afa:	460d      	mov	r5, r1
 8006afc:	f7f9 fd2a 	bl	8000554 <__aeabi_i2d>
 8006b00:	a367      	add	r3, pc, #412	@ (adr r3, 8006ca0 <_dtoa_r+0x2c8>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fd8f 	bl	8000628 <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f7f9 fbd3 	bl	80002bc <__adddf3>
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	f7fa f835 	bl	8000b88 <__aeabi_d2iz>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4607      	mov	r7, r0
 8006b22:	2300      	movs	r3, #0
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fff0 	bl	8000b0c <__aeabi_dcmplt>
 8006b2c:	b140      	cbz	r0, 8006b40 <_dtoa_r+0x168>
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f7f9 fd10 	bl	8000554 <__aeabi_i2d>
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	f7f9 ffde 	bl	8000af8 <__aeabi_dcmpeq>
 8006b3c:	b900      	cbnz	r0, 8006b40 <_dtoa_r+0x168>
 8006b3e:	3f01      	subs	r7, #1
 8006b40:	2f16      	cmp	r7, #22
 8006b42:	d852      	bhi.n	8006bea <_dtoa_r+0x212>
 8006b44:	4b5d      	ldr	r3, [pc, #372]	@ (8006cbc <_dtoa_r+0x2e4>)
 8006b46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b52:	f7f9 ffdb 	bl	8000b0c <__aeabi_dcmplt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d049      	beq.n	8006bee <_dtoa_r+0x216>
 8006b5a:	3f01      	subs	r7, #1
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b62:	1b9b      	subs	r3, r3, r6
 8006b64:	1e5a      	subs	r2, r3, #1
 8006b66:	bf45      	ittet	mi
 8006b68:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b6c:	9300      	strmi	r3, [sp, #0]
 8006b6e:	2300      	movpl	r3, #0
 8006b70:	2300      	movmi	r3, #0
 8006b72:	9206      	str	r2, [sp, #24]
 8006b74:	bf54      	ite	pl
 8006b76:	9300      	strpl	r3, [sp, #0]
 8006b78:	9306      	strmi	r3, [sp, #24]
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	db39      	blt.n	8006bf2 <_dtoa_r+0x21a>
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	970d      	str	r7, [sp, #52]	@ 0x34
 8006b82:	443b      	add	r3, r7
 8006b84:	9306      	str	r3, [sp, #24]
 8006b86:	2300      	movs	r3, #0
 8006b88:	9308      	str	r3, [sp, #32]
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	2b09      	cmp	r3, #9
 8006b8e:	d863      	bhi.n	8006c58 <_dtoa_r+0x280>
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	bfc4      	itt	gt
 8006b94:	3b04      	subgt	r3, #4
 8006b96:	9307      	strgt	r3, [sp, #28]
 8006b98:	9b07      	ldr	r3, [sp, #28]
 8006b9a:	f1a3 0302 	sub.w	r3, r3, #2
 8006b9e:	bfcc      	ite	gt
 8006ba0:	2400      	movgt	r4, #0
 8006ba2:	2401      	movle	r4, #1
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d863      	bhi.n	8006c70 <_dtoa_r+0x298>
 8006ba8:	e8df f003 	tbb	[pc, r3]
 8006bac:	2b375452 	.word	0x2b375452
 8006bb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006bb4:	441e      	add	r6, r3
 8006bb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	bfc1      	itttt	gt
 8006bbe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bc2:	409f      	lslgt	r7, r3
 8006bc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bcc:	bfd6      	itet	le
 8006bce:	f1c3 0320 	rsble	r3, r3, #32
 8006bd2:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bd6:	fa04 f003 	lslle.w	r0, r4, r3
 8006bda:	f7f9 fcab 	bl	8000534 <__aeabi_ui2d>
 8006bde:	2201      	movs	r2, #1
 8006be0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006be4:	3e01      	subs	r6, #1
 8006be6:	9212      	str	r2, [sp, #72]	@ 0x48
 8006be8:	e776      	b.n	8006ad8 <_dtoa_r+0x100>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e7b7      	b.n	8006b5e <_dtoa_r+0x186>
 8006bee:	9010      	str	r0, [sp, #64]	@ 0x40
 8006bf0:	e7b6      	b.n	8006b60 <_dtoa_r+0x188>
 8006bf2:	9b00      	ldr	r3, [sp, #0]
 8006bf4:	1bdb      	subs	r3, r3, r7
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	427b      	negs	r3, r7
 8006bfa:	9308      	str	r3, [sp, #32]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c00:	e7c3      	b.n	8006b8a <_dtoa_r+0x1b2>
 8006c02:	2301      	movs	r3, #1
 8006c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c08:	eb07 0b03 	add.w	fp, r7, r3
 8006c0c:	f10b 0301 	add.w	r3, fp, #1
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	9303      	str	r3, [sp, #12]
 8006c14:	bfb8      	it	lt
 8006c16:	2301      	movlt	r3, #1
 8006c18:	e006      	b.n	8006c28 <_dtoa_r+0x250>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dd28      	ble.n	8006c76 <_dtoa_r+0x29e>
 8006c24:	469b      	mov	fp, r3
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	2204      	movs	r2, #4
 8006c30:	f102 0514 	add.w	r5, r2, #20
 8006c34:	429d      	cmp	r5, r3
 8006c36:	d926      	bls.n	8006c86 <_dtoa_r+0x2ae>
 8006c38:	6041      	str	r1, [r0, #4]
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	f000 fd9c 	bl	8007778 <_Balloc>
 8006c40:	4682      	mov	sl, r0
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d142      	bne.n	8006ccc <_dtoa_r+0x2f4>
 8006c46:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <_dtoa_r+0x2e8>)
 8006c48:	4602      	mov	r2, r0
 8006c4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c4e:	e6da      	b.n	8006a06 <_dtoa_r+0x2e>
 8006c50:	2300      	movs	r3, #0
 8006c52:	e7e3      	b.n	8006c1c <_dtoa_r+0x244>
 8006c54:	2300      	movs	r3, #0
 8006c56:	e7d5      	b.n	8006c04 <_dtoa_r+0x22c>
 8006c58:	2401      	movs	r4, #1
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9307      	str	r3, [sp, #28]
 8006c5e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006c60:	f04f 3bff 	mov.w	fp, #4294967295
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c6a:	2312      	movs	r3, #18
 8006c6c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c6e:	e7db      	b.n	8006c28 <_dtoa_r+0x250>
 8006c70:	2301      	movs	r3, #1
 8006c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c74:	e7f4      	b.n	8006c60 <_dtoa_r+0x288>
 8006c76:	f04f 0b01 	mov.w	fp, #1
 8006c7a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c7e:	465b      	mov	r3, fp
 8006c80:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006c84:	e7d0      	b.n	8006c28 <_dtoa_r+0x250>
 8006c86:	3101      	adds	r1, #1
 8006c88:	0052      	lsls	r2, r2, #1
 8006c8a:	e7d1      	b.n	8006c30 <_dtoa_r+0x258>
 8006c8c:	f3af 8000 	nop.w
 8006c90:	636f4361 	.word	0x636f4361
 8006c94:	3fd287a7 	.word	0x3fd287a7
 8006c98:	8b60c8b3 	.word	0x8b60c8b3
 8006c9c:	3fc68a28 	.word	0x3fc68a28
 8006ca0:	509f79fb 	.word	0x509f79fb
 8006ca4:	3fd34413 	.word	0x3fd34413
 8006ca8:	0800a5d4 	.word	0x0800a5d4
 8006cac:	0800a5eb 	.word	0x0800a5eb
 8006cb0:	7ff00000 	.word	0x7ff00000
 8006cb4:	0800a59f 	.word	0x0800a59f
 8006cb8:	3ff80000 	.word	0x3ff80000
 8006cbc:	0800a798 	.word	0x0800a798
 8006cc0:	0800a643 	.word	0x0800a643
 8006cc4:	0800a5d0 	.word	0x0800a5d0
 8006cc8:	0800a59e 	.word	0x0800a59e
 8006ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cd0:	6018      	str	r0, [r3, #0]
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	2b0e      	cmp	r3, #14
 8006cd6:	f200 80a1 	bhi.w	8006e1c <_dtoa_r+0x444>
 8006cda:	2c00      	cmp	r4, #0
 8006cdc:	f000 809e 	beq.w	8006e1c <_dtoa_r+0x444>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	dd33      	ble.n	8006d4c <_dtoa_r+0x374>
 8006ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8006f58 <_dtoa_r+0x580>)
 8006ce6:	f007 020f 	and.w	r2, r7, #15
 8006cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cee:	ed93 7b00 	vldr	d7, [r3]
 8006cf2:	05f8      	lsls	r0, r7, #23
 8006cf4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006cf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006cfc:	d516      	bpl.n	8006d2c <_dtoa_r+0x354>
 8006cfe:	4b97      	ldr	r3, [pc, #604]	@ (8006f5c <_dtoa_r+0x584>)
 8006d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d08:	f7f9 fdb8 	bl	800087c <__aeabi_ddiv>
 8006d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d10:	f004 040f 	and.w	r4, r4, #15
 8006d14:	2603      	movs	r6, #3
 8006d16:	4d91      	ldr	r5, [pc, #580]	@ (8006f5c <_dtoa_r+0x584>)
 8006d18:	b954      	cbnz	r4, 8006d30 <_dtoa_r+0x358>
 8006d1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d22:	f7f9 fdab 	bl	800087c <__aeabi_ddiv>
 8006d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d2a:	e028      	b.n	8006d7e <_dtoa_r+0x3a6>
 8006d2c:	2602      	movs	r6, #2
 8006d2e:	e7f2      	b.n	8006d16 <_dtoa_r+0x33e>
 8006d30:	07e1      	lsls	r1, r4, #31
 8006d32:	d508      	bpl.n	8006d46 <_dtoa_r+0x36e>
 8006d34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d3c:	f7f9 fc74 	bl	8000628 <__aeabi_dmul>
 8006d40:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d44:	3601      	adds	r6, #1
 8006d46:	1064      	asrs	r4, r4, #1
 8006d48:	3508      	adds	r5, #8
 8006d4a:	e7e5      	b.n	8006d18 <_dtoa_r+0x340>
 8006d4c:	f000 80af 	beq.w	8006eae <_dtoa_r+0x4d6>
 8006d50:	427c      	negs	r4, r7
 8006d52:	4b81      	ldr	r3, [pc, #516]	@ (8006f58 <_dtoa_r+0x580>)
 8006d54:	4d81      	ldr	r5, [pc, #516]	@ (8006f5c <_dtoa_r+0x584>)
 8006d56:	f004 020f 	and.w	r2, r4, #15
 8006d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d66:	f7f9 fc5f 	bl	8000628 <__aeabi_dmul>
 8006d6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d6e:	1124      	asrs	r4, r4, #4
 8006d70:	2300      	movs	r3, #0
 8006d72:	2602      	movs	r6, #2
 8006d74:	2c00      	cmp	r4, #0
 8006d76:	f040 808f 	bne.w	8006e98 <_dtoa_r+0x4c0>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1d3      	bne.n	8006d26 <_dtoa_r+0x34e>
 8006d7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d80:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8094 	beq.w	8006eb2 <_dtoa_r+0x4da>
 8006d8a:	4b75      	ldr	r3, [pc, #468]	@ (8006f60 <_dtoa_r+0x588>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4620      	mov	r0, r4
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7f9 febb 	bl	8000b0c <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f000 808b 	beq.w	8006eb2 <_dtoa_r+0x4da>
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8087 	beq.w	8006eb2 <_dtoa_r+0x4da>
 8006da4:	f1bb 0f00 	cmp.w	fp, #0
 8006da8:	dd34      	ble.n	8006e14 <_dtoa_r+0x43c>
 8006daa:	4620      	mov	r0, r4
 8006dac:	4b6d      	ldr	r3, [pc, #436]	@ (8006f64 <_dtoa_r+0x58c>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fc39 	bl	8000628 <__aeabi_dmul>
 8006db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dba:	f107 38ff 	add.w	r8, r7, #4294967295
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	465c      	mov	r4, fp
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7f9 fbc6 	bl	8000554 <__aeabi_i2d>
 8006dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dcc:	f7f9 fc2c 	bl	8000628 <__aeabi_dmul>
 8006dd0:	4b65      	ldr	r3, [pc, #404]	@ (8006f68 <_dtoa_r+0x590>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f7f9 fa72 	bl	80002bc <__adddf3>
 8006dd8:	4605      	mov	r5, r0
 8006dda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	d16a      	bne.n	8006eb8 <_dtoa_r+0x4e0>
 8006de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006de6:	4b61      	ldr	r3, [pc, #388]	@ (8006f6c <_dtoa_r+0x594>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7f9 fa65 	bl	80002b8 <__aeabi_dsub>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006df6:	462a      	mov	r2, r5
 8006df8:	4633      	mov	r3, r6
 8006dfa:	f7f9 fea5 	bl	8000b48 <__aeabi_dcmpgt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f040 8298 	bne.w	8007334 <_dtoa_r+0x95c>
 8006e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e0e:	f7f9 fe7d 	bl	8000b0c <__aeabi_dcmplt>
 8006e12:	bb38      	cbnz	r0, 8006e64 <_dtoa_r+0x48c>
 8006e14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f2c0 8157 	blt.w	80070d2 <_dtoa_r+0x6fa>
 8006e24:	2f0e      	cmp	r7, #14
 8006e26:	f300 8154 	bgt.w	80070d2 <_dtoa_r+0x6fa>
 8006e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f58 <_dtoa_r+0x580>)
 8006e2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e30:	ed93 7b00 	vldr	d7, [r3]
 8006e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	ed8d 7b00 	vstr	d7, [sp]
 8006e3c:	f280 80e5 	bge.w	800700a <_dtoa_r+0x632>
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f300 80e1 	bgt.w	800700a <_dtoa_r+0x632>
 8006e48:	d10c      	bne.n	8006e64 <_dtoa_r+0x48c>
 8006e4a:	4b48      	ldr	r3, [pc, #288]	@ (8006f6c <_dtoa_r+0x594>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	ec51 0b17 	vmov	r0, r1, d7
 8006e52:	f7f9 fbe9 	bl	8000628 <__aeabi_dmul>
 8006e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e5a:	f7f9 fe6b 	bl	8000b34 <__aeabi_dcmpge>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f000 8266 	beq.w	8007330 <_dtoa_r+0x958>
 8006e64:	2400      	movs	r4, #0
 8006e66:	4625      	mov	r5, r4
 8006e68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e6a:	4656      	mov	r6, sl
 8006e6c:	ea6f 0803 	mvn.w	r8, r3
 8006e70:	2700      	movs	r7, #0
 8006e72:	4621      	mov	r1, r4
 8006e74:	4648      	mov	r0, r9
 8006e76:	f000 fcbf 	bl	80077f8 <_Bfree>
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	f000 80bd 	beq.w	8006ffa <_dtoa_r+0x622>
 8006e80:	b12f      	cbz	r7, 8006e8e <_dtoa_r+0x4b6>
 8006e82:	42af      	cmp	r7, r5
 8006e84:	d003      	beq.n	8006e8e <_dtoa_r+0x4b6>
 8006e86:	4639      	mov	r1, r7
 8006e88:	4648      	mov	r0, r9
 8006e8a:	f000 fcb5 	bl	80077f8 <_Bfree>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4648      	mov	r0, r9
 8006e92:	f000 fcb1 	bl	80077f8 <_Bfree>
 8006e96:	e0b0      	b.n	8006ffa <_dtoa_r+0x622>
 8006e98:	07e2      	lsls	r2, r4, #31
 8006e9a:	d505      	bpl.n	8006ea8 <_dtoa_r+0x4d0>
 8006e9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ea0:	f7f9 fbc2 	bl	8000628 <__aeabi_dmul>
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	1064      	asrs	r4, r4, #1
 8006eaa:	3508      	adds	r5, #8
 8006eac:	e762      	b.n	8006d74 <_dtoa_r+0x39c>
 8006eae:	2602      	movs	r6, #2
 8006eb0:	e765      	b.n	8006d7e <_dtoa_r+0x3a6>
 8006eb2:	9c03      	ldr	r4, [sp, #12]
 8006eb4:	46b8      	mov	r8, r7
 8006eb6:	e784      	b.n	8006dc2 <_dtoa_r+0x3ea>
 8006eb8:	4b27      	ldr	r3, [pc, #156]	@ (8006f58 <_dtoa_r+0x580>)
 8006eba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ec0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ec4:	4454      	add	r4, sl
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d054      	beq.n	8006f74 <_dtoa_r+0x59c>
 8006eca:	4929      	ldr	r1, [pc, #164]	@ (8006f70 <_dtoa_r+0x598>)
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f7f9 fcd5 	bl	800087c <__aeabi_ddiv>
 8006ed2:	4633      	mov	r3, r6
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	f7f9 f9ef 	bl	80002b8 <__aeabi_dsub>
 8006eda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ede:	4656      	mov	r6, sl
 8006ee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee4:	f7f9 fe50 	bl	8000b88 <__aeabi_d2iz>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	f7f9 fb33 	bl	8000554 <__aeabi_i2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ef6:	f7f9 f9df 	bl	80002b8 <__aeabi_dsub>
 8006efa:	3530      	adds	r5, #48	@ 0x30
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f04:	f806 5b01 	strb.w	r5, [r6], #1
 8006f08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f0c:	f7f9 fdfe 	bl	8000b0c <__aeabi_dcmplt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d172      	bne.n	8006ffa <_dtoa_r+0x622>
 8006f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f18:	4911      	ldr	r1, [pc, #68]	@ (8006f60 <_dtoa_r+0x588>)
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	f7f9 f9cc 	bl	80002b8 <__aeabi_dsub>
 8006f20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f24:	f7f9 fdf2 	bl	8000b0c <__aeabi_dcmplt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	f040 80b4 	bne.w	8007096 <_dtoa_r+0x6be>
 8006f2e:	42a6      	cmp	r6, r4
 8006f30:	f43f af70 	beq.w	8006e14 <_dtoa_r+0x43c>
 8006f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f38:	4b0a      	ldr	r3, [pc, #40]	@ (8006f64 <_dtoa_r+0x58c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f7f9 fb74 	bl	8000628 <__aeabi_dmul>
 8006f40:	4b08      	ldr	r3, [pc, #32]	@ (8006f64 <_dtoa_r+0x58c>)
 8006f42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f46:	2200      	movs	r2, #0
 8006f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f4c:	f7f9 fb6c 	bl	8000628 <__aeabi_dmul>
 8006f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f54:	e7c4      	b.n	8006ee0 <_dtoa_r+0x508>
 8006f56:	bf00      	nop
 8006f58:	0800a798 	.word	0x0800a798
 8006f5c:	0800a770 	.word	0x0800a770
 8006f60:	3ff00000 	.word	0x3ff00000
 8006f64:	40240000 	.word	0x40240000
 8006f68:	401c0000 	.word	0x401c0000
 8006f6c:	40140000 	.word	0x40140000
 8006f70:	3fe00000 	.word	0x3fe00000
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7f9 fb56 	bl	8000628 <__aeabi_dmul>
 8006f7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f80:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006f82:	4656      	mov	r6, sl
 8006f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f88:	f7f9 fdfe 	bl	8000b88 <__aeabi_d2iz>
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	f7f9 fae1 	bl	8000554 <__aeabi_i2d>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f9a:	f7f9 f98d 	bl	80002b8 <__aeabi_dsub>
 8006f9e:	3530      	adds	r5, #48	@ 0x30
 8006fa0:	f806 5b01 	strb.w	r5, [r6], #1
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	42a6      	cmp	r6, r4
 8006faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	d124      	bne.n	8006ffe <_dtoa_r+0x626>
 8006fb4:	4baf      	ldr	r3, [pc, #700]	@ (8007274 <_dtoa_r+0x89c>)
 8006fb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006fba:	f7f9 f97f 	bl	80002bc <__adddf3>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fc6:	f7f9 fdbf 	bl	8000b48 <__aeabi_dcmpgt>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d163      	bne.n	8007096 <_dtoa_r+0x6be>
 8006fce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006fd2:	49a8      	ldr	r1, [pc, #672]	@ (8007274 <_dtoa_r+0x89c>)
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f7f9 f96f 	bl	80002b8 <__aeabi_dsub>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe2:	f7f9 fd93 	bl	8000b0c <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f43f af14 	beq.w	8006e14 <_dtoa_r+0x43c>
 8006fec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006fee:	1e73      	subs	r3, r6, #1
 8006ff0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ff2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ff6:	2b30      	cmp	r3, #48	@ 0x30
 8006ff8:	d0f8      	beq.n	8006fec <_dtoa_r+0x614>
 8006ffa:	4647      	mov	r7, r8
 8006ffc:	e03b      	b.n	8007076 <_dtoa_r+0x69e>
 8006ffe:	4b9e      	ldr	r3, [pc, #632]	@ (8007278 <_dtoa_r+0x8a0>)
 8007000:	f7f9 fb12 	bl	8000628 <__aeabi_dmul>
 8007004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007008:	e7bc      	b.n	8006f84 <_dtoa_r+0x5ac>
 800700a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800700e:	4656      	mov	r6, sl
 8007010:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007014:	4620      	mov	r0, r4
 8007016:	4629      	mov	r1, r5
 8007018:	f7f9 fc30 	bl	800087c <__aeabi_ddiv>
 800701c:	f7f9 fdb4 	bl	8000b88 <__aeabi_d2iz>
 8007020:	4680      	mov	r8, r0
 8007022:	f7f9 fa97 	bl	8000554 <__aeabi_i2d>
 8007026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800702a:	f7f9 fafd 	bl	8000628 <__aeabi_dmul>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4620      	mov	r0, r4
 8007034:	4629      	mov	r1, r5
 8007036:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800703a:	f7f9 f93d 	bl	80002b8 <__aeabi_dsub>
 800703e:	f806 4b01 	strb.w	r4, [r6], #1
 8007042:	9d03      	ldr	r5, [sp, #12]
 8007044:	eba6 040a 	sub.w	r4, r6, sl
 8007048:	42a5      	cmp	r5, r4
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	d133      	bne.n	80070b8 <_dtoa_r+0x6e0>
 8007050:	f7f9 f934 	bl	80002bc <__adddf3>
 8007054:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007058:	4604      	mov	r4, r0
 800705a:	460d      	mov	r5, r1
 800705c:	f7f9 fd74 	bl	8000b48 <__aeabi_dcmpgt>
 8007060:	b9c0      	cbnz	r0, 8007094 <_dtoa_r+0x6bc>
 8007062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd45 	bl	8000af8 <__aeabi_dcmpeq>
 800706e:	b110      	cbz	r0, 8007076 <_dtoa_r+0x69e>
 8007070:	f018 0f01 	tst.w	r8, #1
 8007074:	d10e      	bne.n	8007094 <_dtoa_r+0x6bc>
 8007076:	9902      	ldr	r1, [sp, #8]
 8007078:	4648      	mov	r0, r9
 800707a:	f000 fbbd 	bl	80077f8 <_Bfree>
 800707e:	2300      	movs	r3, #0
 8007080:	7033      	strb	r3, [r6, #0]
 8007082:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007084:	3701      	adds	r7, #1
 8007086:	601f      	str	r7, [r3, #0]
 8007088:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 824b 	beq.w	8007526 <_dtoa_r+0xb4e>
 8007090:	601e      	str	r6, [r3, #0]
 8007092:	e248      	b.n	8007526 <_dtoa_r+0xb4e>
 8007094:	46b8      	mov	r8, r7
 8007096:	4633      	mov	r3, r6
 8007098:	461e      	mov	r6, r3
 800709a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800709e:	2a39      	cmp	r2, #57	@ 0x39
 80070a0:	d106      	bne.n	80070b0 <_dtoa_r+0x6d8>
 80070a2:	459a      	cmp	sl, r3
 80070a4:	d1f8      	bne.n	8007098 <_dtoa_r+0x6c0>
 80070a6:	2230      	movs	r2, #48	@ 0x30
 80070a8:	f108 0801 	add.w	r8, r8, #1
 80070ac:	f88a 2000 	strb.w	r2, [sl]
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	3201      	adds	r2, #1
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e7a0      	b.n	8006ffa <_dtoa_r+0x622>
 80070b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007278 <_dtoa_r+0x8a0>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	f7f9 fab4 	bl	8000628 <__aeabi_dmul>
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	f7f9 fd16 	bl	8000af8 <__aeabi_dcmpeq>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d09f      	beq.n	8007010 <_dtoa_r+0x638>
 80070d0:	e7d1      	b.n	8007076 <_dtoa_r+0x69e>
 80070d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d4:	2a00      	cmp	r2, #0
 80070d6:	f000 80ea 	beq.w	80072ae <_dtoa_r+0x8d6>
 80070da:	9a07      	ldr	r2, [sp, #28]
 80070dc:	2a01      	cmp	r2, #1
 80070de:	f300 80cd 	bgt.w	800727c <_dtoa_r+0x8a4>
 80070e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	f000 80c1 	beq.w	800726c <_dtoa_r+0x894>
 80070ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80070ee:	9c08      	ldr	r4, [sp, #32]
 80070f0:	9e00      	ldr	r6, [sp, #0]
 80070f2:	9a00      	ldr	r2, [sp, #0]
 80070f4:	441a      	add	r2, r3
 80070f6:	9200      	str	r2, [sp, #0]
 80070f8:	9a06      	ldr	r2, [sp, #24]
 80070fa:	2101      	movs	r1, #1
 80070fc:	441a      	add	r2, r3
 80070fe:	4648      	mov	r0, r9
 8007100:	9206      	str	r2, [sp, #24]
 8007102:	f000 fc77 	bl	80079f4 <__i2b>
 8007106:	4605      	mov	r5, r0
 8007108:	b166      	cbz	r6, 8007124 <_dtoa_r+0x74c>
 800710a:	9b06      	ldr	r3, [sp, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	dd09      	ble.n	8007124 <_dtoa_r+0x74c>
 8007110:	42b3      	cmp	r3, r6
 8007112:	9a00      	ldr	r2, [sp, #0]
 8007114:	bfa8      	it	ge
 8007116:	4633      	movge	r3, r6
 8007118:	1ad2      	subs	r2, r2, r3
 800711a:	9200      	str	r2, [sp, #0]
 800711c:	9a06      	ldr	r2, [sp, #24]
 800711e:	1af6      	subs	r6, r6, r3
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	9306      	str	r3, [sp, #24]
 8007124:	9b08      	ldr	r3, [sp, #32]
 8007126:	b30b      	cbz	r3, 800716c <_dtoa_r+0x794>
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80c6 	beq.w	80072bc <_dtoa_r+0x8e4>
 8007130:	2c00      	cmp	r4, #0
 8007132:	f000 80c0 	beq.w	80072b6 <_dtoa_r+0x8de>
 8007136:	4629      	mov	r1, r5
 8007138:	4622      	mov	r2, r4
 800713a:	4648      	mov	r0, r9
 800713c:	f000 fd12 	bl	8007b64 <__pow5mult>
 8007140:	9a02      	ldr	r2, [sp, #8]
 8007142:	4601      	mov	r1, r0
 8007144:	4605      	mov	r5, r0
 8007146:	4648      	mov	r0, r9
 8007148:	f000 fc6a 	bl	8007a20 <__multiply>
 800714c:	9902      	ldr	r1, [sp, #8]
 800714e:	4680      	mov	r8, r0
 8007150:	4648      	mov	r0, r9
 8007152:	f000 fb51 	bl	80077f8 <_Bfree>
 8007156:	9b08      	ldr	r3, [sp, #32]
 8007158:	1b1b      	subs	r3, r3, r4
 800715a:	9308      	str	r3, [sp, #32]
 800715c:	f000 80b1 	beq.w	80072c2 <_dtoa_r+0x8ea>
 8007160:	9a08      	ldr	r2, [sp, #32]
 8007162:	4641      	mov	r1, r8
 8007164:	4648      	mov	r0, r9
 8007166:	f000 fcfd 	bl	8007b64 <__pow5mult>
 800716a:	9002      	str	r0, [sp, #8]
 800716c:	2101      	movs	r1, #1
 800716e:	4648      	mov	r0, r9
 8007170:	f000 fc40 	bl	80079f4 <__i2b>
 8007174:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007176:	4604      	mov	r4, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 81d8 	beq.w	800752e <_dtoa_r+0xb56>
 800717e:	461a      	mov	r2, r3
 8007180:	4601      	mov	r1, r0
 8007182:	4648      	mov	r0, r9
 8007184:	f000 fcee 	bl	8007b64 <__pow5mult>
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	2b01      	cmp	r3, #1
 800718c:	4604      	mov	r4, r0
 800718e:	f300 809f 	bgt.w	80072d0 <_dtoa_r+0x8f8>
 8007192:	9b04      	ldr	r3, [sp, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f040 8097 	bne.w	80072c8 <_dtoa_r+0x8f0>
 800719a:	9b05      	ldr	r3, [sp, #20]
 800719c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 8093 	bne.w	80072cc <_dtoa_r+0x8f4>
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071ac:	0d1b      	lsrs	r3, r3, #20
 80071ae:	051b      	lsls	r3, r3, #20
 80071b0:	b133      	cbz	r3, 80071c0 <_dtoa_r+0x7e8>
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	3301      	adds	r3, #1
 80071bc:	9306      	str	r3, [sp, #24]
 80071be:	2301      	movs	r3, #1
 80071c0:	9308      	str	r3, [sp, #32]
 80071c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 81b8 	beq.w	800753a <_dtoa_r+0xb62>
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071d0:	6918      	ldr	r0, [r3, #16]
 80071d2:	f000 fbc3 	bl	800795c <__hi0bits>
 80071d6:	f1c0 0020 	rsb	r0, r0, #32
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	4418      	add	r0, r3
 80071de:	f010 001f 	ands.w	r0, r0, #31
 80071e2:	f000 8082 	beq.w	80072ea <_dtoa_r+0x912>
 80071e6:	f1c0 0320 	rsb	r3, r0, #32
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	dd73      	ble.n	80072d6 <_dtoa_r+0x8fe>
 80071ee:	9b00      	ldr	r3, [sp, #0]
 80071f0:	f1c0 001c 	rsb	r0, r0, #28
 80071f4:	4403      	add	r3, r0
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	9b06      	ldr	r3, [sp, #24]
 80071fa:	4403      	add	r3, r0
 80071fc:	4406      	add	r6, r0
 80071fe:	9306      	str	r3, [sp, #24]
 8007200:	9b00      	ldr	r3, [sp, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x83a>
 8007206:	9902      	ldr	r1, [sp, #8]
 8007208:	461a      	mov	r2, r3
 800720a:	4648      	mov	r0, r9
 800720c:	f000 fd04 	bl	8007c18 <__lshift>
 8007210:	9002      	str	r0, [sp, #8]
 8007212:	9b06      	ldr	r3, [sp, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	dd05      	ble.n	8007224 <_dtoa_r+0x84c>
 8007218:	4621      	mov	r1, r4
 800721a:	461a      	mov	r2, r3
 800721c:	4648      	mov	r0, r9
 800721e:	f000 fcfb 	bl	8007c18 <__lshift>
 8007222:	4604      	mov	r4, r0
 8007224:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d061      	beq.n	80072ee <_dtoa_r+0x916>
 800722a:	9802      	ldr	r0, [sp, #8]
 800722c:	4621      	mov	r1, r4
 800722e:	f000 fd5f 	bl	8007cf0 <__mcmp>
 8007232:	2800      	cmp	r0, #0
 8007234:	da5b      	bge.n	80072ee <_dtoa_r+0x916>
 8007236:	2300      	movs	r3, #0
 8007238:	9902      	ldr	r1, [sp, #8]
 800723a:	220a      	movs	r2, #10
 800723c:	4648      	mov	r0, r9
 800723e:	f000 fafd 	bl	800783c <__multadd>
 8007242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007244:	9002      	str	r0, [sp, #8]
 8007246:	f107 38ff 	add.w	r8, r7, #4294967295
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8177 	beq.w	800753e <_dtoa_r+0xb66>
 8007250:	4629      	mov	r1, r5
 8007252:	2300      	movs	r3, #0
 8007254:	220a      	movs	r2, #10
 8007256:	4648      	mov	r0, r9
 8007258:	f000 faf0 	bl	800783c <__multadd>
 800725c:	f1bb 0f00 	cmp.w	fp, #0
 8007260:	4605      	mov	r5, r0
 8007262:	dc6f      	bgt.n	8007344 <_dtoa_r+0x96c>
 8007264:	9b07      	ldr	r3, [sp, #28]
 8007266:	2b02      	cmp	r3, #2
 8007268:	dc49      	bgt.n	80072fe <_dtoa_r+0x926>
 800726a:	e06b      	b.n	8007344 <_dtoa_r+0x96c>
 800726c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800726e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007272:	e73c      	b.n	80070ee <_dtoa_r+0x716>
 8007274:	3fe00000 	.word	0x3fe00000
 8007278:	40240000 	.word	0x40240000
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	1e5c      	subs	r4, r3, #1
 8007280:	9b08      	ldr	r3, [sp, #32]
 8007282:	42a3      	cmp	r3, r4
 8007284:	db09      	blt.n	800729a <_dtoa_r+0x8c2>
 8007286:	1b1c      	subs	r4, r3, r4
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f6bf af30 	bge.w	80070f0 <_dtoa_r+0x718>
 8007290:	9b00      	ldr	r3, [sp, #0]
 8007292:	9a03      	ldr	r2, [sp, #12]
 8007294:	1a9e      	subs	r6, r3, r2
 8007296:	2300      	movs	r3, #0
 8007298:	e72b      	b.n	80070f2 <_dtoa_r+0x71a>
 800729a:	9b08      	ldr	r3, [sp, #32]
 800729c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800729e:	9408      	str	r4, [sp, #32]
 80072a0:	1ae3      	subs	r3, r4, r3
 80072a2:	441a      	add	r2, r3
 80072a4:	9e00      	ldr	r6, [sp, #0]
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80072aa:	2400      	movs	r4, #0
 80072ac:	e721      	b.n	80070f2 <_dtoa_r+0x71a>
 80072ae:	9c08      	ldr	r4, [sp, #32]
 80072b0:	9e00      	ldr	r6, [sp, #0]
 80072b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80072b4:	e728      	b.n	8007108 <_dtoa_r+0x730>
 80072b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80072ba:	e751      	b.n	8007160 <_dtoa_r+0x788>
 80072bc:	9a08      	ldr	r2, [sp, #32]
 80072be:	9902      	ldr	r1, [sp, #8]
 80072c0:	e750      	b.n	8007164 <_dtoa_r+0x78c>
 80072c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80072c6:	e751      	b.n	800716c <_dtoa_r+0x794>
 80072c8:	2300      	movs	r3, #0
 80072ca:	e779      	b.n	80071c0 <_dtoa_r+0x7e8>
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	e777      	b.n	80071c0 <_dtoa_r+0x7e8>
 80072d0:	2300      	movs	r3, #0
 80072d2:	9308      	str	r3, [sp, #32]
 80072d4:	e779      	b.n	80071ca <_dtoa_r+0x7f2>
 80072d6:	d093      	beq.n	8007200 <_dtoa_r+0x828>
 80072d8:	9a00      	ldr	r2, [sp, #0]
 80072da:	331c      	adds	r3, #28
 80072dc:	441a      	add	r2, r3
 80072de:	9200      	str	r2, [sp, #0]
 80072e0:	9a06      	ldr	r2, [sp, #24]
 80072e2:	441a      	add	r2, r3
 80072e4:	441e      	add	r6, r3
 80072e6:	9206      	str	r2, [sp, #24]
 80072e8:	e78a      	b.n	8007200 <_dtoa_r+0x828>
 80072ea:	4603      	mov	r3, r0
 80072ec:	e7f4      	b.n	80072d8 <_dtoa_r+0x900>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	46b8      	mov	r8, r7
 80072f4:	dc20      	bgt.n	8007338 <_dtoa_r+0x960>
 80072f6:	469b      	mov	fp, r3
 80072f8:	9b07      	ldr	r3, [sp, #28]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	dd1e      	ble.n	800733c <_dtoa_r+0x964>
 80072fe:	f1bb 0f00 	cmp.w	fp, #0
 8007302:	f47f adb1 	bne.w	8006e68 <_dtoa_r+0x490>
 8007306:	4621      	mov	r1, r4
 8007308:	465b      	mov	r3, fp
 800730a:	2205      	movs	r2, #5
 800730c:	4648      	mov	r0, r9
 800730e:	f000 fa95 	bl	800783c <__multadd>
 8007312:	4601      	mov	r1, r0
 8007314:	4604      	mov	r4, r0
 8007316:	9802      	ldr	r0, [sp, #8]
 8007318:	f000 fcea 	bl	8007cf0 <__mcmp>
 800731c:	2800      	cmp	r0, #0
 800731e:	f77f ada3 	ble.w	8006e68 <_dtoa_r+0x490>
 8007322:	4656      	mov	r6, sl
 8007324:	2331      	movs	r3, #49	@ 0x31
 8007326:	f806 3b01 	strb.w	r3, [r6], #1
 800732a:	f108 0801 	add.w	r8, r8, #1
 800732e:	e59f      	b.n	8006e70 <_dtoa_r+0x498>
 8007330:	9c03      	ldr	r4, [sp, #12]
 8007332:	46b8      	mov	r8, r7
 8007334:	4625      	mov	r5, r4
 8007336:	e7f4      	b.n	8007322 <_dtoa_r+0x94a>
 8007338:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800733c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8101 	beq.w	8007546 <_dtoa_r+0xb6e>
 8007344:	2e00      	cmp	r6, #0
 8007346:	dd05      	ble.n	8007354 <_dtoa_r+0x97c>
 8007348:	4629      	mov	r1, r5
 800734a:	4632      	mov	r2, r6
 800734c:	4648      	mov	r0, r9
 800734e:	f000 fc63 	bl	8007c18 <__lshift>
 8007352:	4605      	mov	r5, r0
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d05c      	beq.n	8007414 <_dtoa_r+0xa3c>
 800735a:	6869      	ldr	r1, [r5, #4]
 800735c:	4648      	mov	r0, r9
 800735e:	f000 fa0b 	bl	8007778 <_Balloc>
 8007362:	4606      	mov	r6, r0
 8007364:	b928      	cbnz	r0, 8007372 <_dtoa_r+0x99a>
 8007366:	4b82      	ldr	r3, [pc, #520]	@ (8007570 <_dtoa_r+0xb98>)
 8007368:	4602      	mov	r2, r0
 800736a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800736e:	f7ff bb4a 	b.w	8006a06 <_dtoa_r+0x2e>
 8007372:	692a      	ldr	r2, [r5, #16]
 8007374:	3202      	adds	r2, #2
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	f105 010c 	add.w	r1, r5, #12
 800737c:	300c      	adds	r0, #12
 800737e:	f001 ff69 	bl	8009254 <memcpy>
 8007382:	2201      	movs	r2, #1
 8007384:	4631      	mov	r1, r6
 8007386:	4648      	mov	r0, r9
 8007388:	f000 fc46 	bl	8007c18 <__lshift>
 800738c:	f10a 0301 	add.w	r3, sl, #1
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	eb0a 030b 	add.w	r3, sl, fp
 8007396:	9308      	str	r3, [sp, #32]
 8007398:	9b04      	ldr	r3, [sp, #16]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	462f      	mov	r7, r5
 80073a0:	9306      	str	r3, [sp, #24]
 80073a2:	4605      	mov	r5, r0
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	9802      	ldr	r0, [sp, #8]
 80073a8:	4621      	mov	r1, r4
 80073aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80073ae:	f7ff fa8b 	bl	80068c8 <quorem>
 80073b2:	4603      	mov	r3, r0
 80073b4:	3330      	adds	r3, #48	@ 0x30
 80073b6:	9003      	str	r0, [sp, #12]
 80073b8:	4639      	mov	r1, r7
 80073ba:	9802      	ldr	r0, [sp, #8]
 80073bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073be:	f000 fc97 	bl	8007cf0 <__mcmp>
 80073c2:	462a      	mov	r2, r5
 80073c4:	9004      	str	r0, [sp, #16]
 80073c6:	4621      	mov	r1, r4
 80073c8:	4648      	mov	r0, r9
 80073ca:	f000 fcad 	bl	8007d28 <__mdiff>
 80073ce:	68c2      	ldr	r2, [r0, #12]
 80073d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d2:	4606      	mov	r6, r0
 80073d4:	bb02      	cbnz	r2, 8007418 <_dtoa_r+0xa40>
 80073d6:	4601      	mov	r1, r0
 80073d8:	9802      	ldr	r0, [sp, #8]
 80073da:	f000 fc89 	bl	8007cf0 <__mcmp>
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	4602      	mov	r2, r0
 80073e2:	4631      	mov	r1, r6
 80073e4:	4648      	mov	r0, r9
 80073e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80073e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ea:	f000 fa05 	bl	80077f8 <_Bfree>
 80073ee:	9b07      	ldr	r3, [sp, #28]
 80073f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073f2:	9e00      	ldr	r6, [sp, #0]
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	9b06      	ldr	r3, [sp, #24]
 80073fa:	4319      	orrs	r1, r3
 80073fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fe:	d10d      	bne.n	800741c <_dtoa_r+0xa44>
 8007400:	2b39      	cmp	r3, #57	@ 0x39
 8007402:	d027      	beq.n	8007454 <_dtoa_r+0xa7c>
 8007404:	9a04      	ldr	r2, [sp, #16]
 8007406:	2a00      	cmp	r2, #0
 8007408:	dd01      	ble.n	800740e <_dtoa_r+0xa36>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	3331      	adds	r3, #49	@ 0x31
 800740e:	f88b 3000 	strb.w	r3, [fp]
 8007412:	e52e      	b.n	8006e72 <_dtoa_r+0x49a>
 8007414:	4628      	mov	r0, r5
 8007416:	e7b9      	b.n	800738c <_dtoa_r+0x9b4>
 8007418:	2201      	movs	r2, #1
 800741a:	e7e2      	b.n	80073e2 <_dtoa_r+0xa0a>
 800741c:	9904      	ldr	r1, [sp, #16]
 800741e:	2900      	cmp	r1, #0
 8007420:	db04      	blt.n	800742c <_dtoa_r+0xa54>
 8007422:	9807      	ldr	r0, [sp, #28]
 8007424:	4301      	orrs	r1, r0
 8007426:	9806      	ldr	r0, [sp, #24]
 8007428:	4301      	orrs	r1, r0
 800742a:	d120      	bne.n	800746e <_dtoa_r+0xa96>
 800742c:	2a00      	cmp	r2, #0
 800742e:	ddee      	ble.n	800740e <_dtoa_r+0xa36>
 8007430:	9902      	ldr	r1, [sp, #8]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	2201      	movs	r2, #1
 8007436:	4648      	mov	r0, r9
 8007438:	f000 fbee 	bl	8007c18 <__lshift>
 800743c:	4621      	mov	r1, r4
 800743e:	9002      	str	r0, [sp, #8]
 8007440:	f000 fc56 	bl	8007cf0 <__mcmp>
 8007444:	2800      	cmp	r0, #0
 8007446:	9b00      	ldr	r3, [sp, #0]
 8007448:	dc02      	bgt.n	8007450 <_dtoa_r+0xa78>
 800744a:	d1e0      	bne.n	800740e <_dtoa_r+0xa36>
 800744c:	07da      	lsls	r2, r3, #31
 800744e:	d5de      	bpl.n	800740e <_dtoa_r+0xa36>
 8007450:	2b39      	cmp	r3, #57	@ 0x39
 8007452:	d1da      	bne.n	800740a <_dtoa_r+0xa32>
 8007454:	2339      	movs	r3, #57	@ 0x39
 8007456:	f88b 3000 	strb.w	r3, [fp]
 800745a:	4633      	mov	r3, r6
 800745c:	461e      	mov	r6, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007464:	2a39      	cmp	r2, #57	@ 0x39
 8007466:	d04e      	beq.n	8007506 <_dtoa_r+0xb2e>
 8007468:	3201      	adds	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e501      	b.n	8006e72 <_dtoa_r+0x49a>
 800746e:	2a00      	cmp	r2, #0
 8007470:	dd03      	ble.n	800747a <_dtoa_r+0xaa2>
 8007472:	2b39      	cmp	r3, #57	@ 0x39
 8007474:	d0ee      	beq.n	8007454 <_dtoa_r+0xa7c>
 8007476:	3301      	adds	r3, #1
 8007478:	e7c9      	b.n	800740e <_dtoa_r+0xa36>
 800747a:	9a00      	ldr	r2, [sp, #0]
 800747c:	9908      	ldr	r1, [sp, #32]
 800747e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007482:	428a      	cmp	r2, r1
 8007484:	d028      	beq.n	80074d8 <_dtoa_r+0xb00>
 8007486:	9902      	ldr	r1, [sp, #8]
 8007488:	2300      	movs	r3, #0
 800748a:	220a      	movs	r2, #10
 800748c:	4648      	mov	r0, r9
 800748e:	f000 f9d5 	bl	800783c <__multadd>
 8007492:	42af      	cmp	r7, r5
 8007494:	9002      	str	r0, [sp, #8]
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f04f 020a 	mov.w	r2, #10
 800749e:	4639      	mov	r1, r7
 80074a0:	4648      	mov	r0, r9
 80074a2:	d107      	bne.n	80074b4 <_dtoa_r+0xadc>
 80074a4:	f000 f9ca 	bl	800783c <__multadd>
 80074a8:	4607      	mov	r7, r0
 80074aa:	4605      	mov	r5, r0
 80074ac:	9b00      	ldr	r3, [sp, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	e777      	b.n	80073a4 <_dtoa_r+0x9cc>
 80074b4:	f000 f9c2 	bl	800783c <__multadd>
 80074b8:	4629      	mov	r1, r5
 80074ba:	4607      	mov	r7, r0
 80074bc:	2300      	movs	r3, #0
 80074be:	220a      	movs	r2, #10
 80074c0:	4648      	mov	r0, r9
 80074c2:	f000 f9bb 	bl	800783c <__multadd>
 80074c6:	4605      	mov	r5, r0
 80074c8:	e7f0      	b.n	80074ac <_dtoa_r+0xad4>
 80074ca:	f1bb 0f00 	cmp.w	fp, #0
 80074ce:	bfcc      	ite	gt
 80074d0:	465e      	movgt	r6, fp
 80074d2:	2601      	movle	r6, #1
 80074d4:	4456      	add	r6, sl
 80074d6:	2700      	movs	r7, #0
 80074d8:	9902      	ldr	r1, [sp, #8]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2201      	movs	r2, #1
 80074de:	4648      	mov	r0, r9
 80074e0:	f000 fb9a 	bl	8007c18 <__lshift>
 80074e4:	4621      	mov	r1, r4
 80074e6:	9002      	str	r0, [sp, #8]
 80074e8:	f000 fc02 	bl	8007cf0 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dcb4      	bgt.n	800745a <_dtoa_r+0xa82>
 80074f0:	d102      	bne.n	80074f8 <_dtoa_r+0xb20>
 80074f2:	9b00      	ldr	r3, [sp, #0]
 80074f4:	07db      	lsls	r3, r3, #31
 80074f6:	d4b0      	bmi.n	800745a <_dtoa_r+0xa82>
 80074f8:	4633      	mov	r3, r6
 80074fa:	461e      	mov	r6, r3
 80074fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007500:	2a30      	cmp	r2, #48	@ 0x30
 8007502:	d0fa      	beq.n	80074fa <_dtoa_r+0xb22>
 8007504:	e4b5      	b.n	8006e72 <_dtoa_r+0x49a>
 8007506:	459a      	cmp	sl, r3
 8007508:	d1a8      	bne.n	800745c <_dtoa_r+0xa84>
 800750a:	2331      	movs	r3, #49	@ 0x31
 800750c:	f108 0801 	add.w	r8, r8, #1
 8007510:	f88a 3000 	strb.w	r3, [sl]
 8007514:	e4ad      	b.n	8006e72 <_dtoa_r+0x49a>
 8007516:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007518:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007574 <_dtoa_r+0xb9c>
 800751c:	b11b      	cbz	r3, 8007526 <_dtoa_r+0xb4e>
 800751e:	f10a 0308 	add.w	r3, sl, #8
 8007522:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	4650      	mov	r0, sl
 8007528:	b017      	add	sp, #92	@ 0x5c
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	9b07      	ldr	r3, [sp, #28]
 8007530:	2b01      	cmp	r3, #1
 8007532:	f77f ae2e 	ble.w	8007192 <_dtoa_r+0x7ba>
 8007536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007538:	9308      	str	r3, [sp, #32]
 800753a:	2001      	movs	r0, #1
 800753c:	e64d      	b.n	80071da <_dtoa_r+0x802>
 800753e:	f1bb 0f00 	cmp.w	fp, #0
 8007542:	f77f aed9 	ble.w	80072f8 <_dtoa_r+0x920>
 8007546:	4656      	mov	r6, sl
 8007548:	9802      	ldr	r0, [sp, #8]
 800754a:	4621      	mov	r1, r4
 800754c:	f7ff f9bc 	bl	80068c8 <quorem>
 8007550:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007554:	f806 3b01 	strb.w	r3, [r6], #1
 8007558:	eba6 020a 	sub.w	r2, r6, sl
 800755c:	4593      	cmp	fp, r2
 800755e:	ddb4      	ble.n	80074ca <_dtoa_r+0xaf2>
 8007560:	9902      	ldr	r1, [sp, #8]
 8007562:	2300      	movs	r3, #0
 8007564:	220a      	movs	r2, #10
 8007566:	4648      	mov	r0, r9
 8007568:	f000 f968 	bl	800783c <__multadd>
 800756c:	9002      	str	r0, [sp, #8]
 800756e:	e7eb      	b.n	8007548 <_dtoa_r+0xb70>
 8007570:	0800a643 	.word	0x0800a643
 8007574:	0800a5c7 	.word	0x0800a5c7

08007578 <_free_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4605      	mov	r5, r0
 800757c:	2900      	cmp	r1, #0
 800757e:	d041      	beq.n	8007604 <_free_r+0x8c>
 8007580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007584:	1f0c      	subs	r4, r1, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfb8      	it	lt
 800758a:	18e4      	addlt	r4, r4, r3
 800758c:	f000 f8e8 	bl	8007760 <__malloc_lock>
 8007590:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <_free_r+0x90>)
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	b933      	cbnz	r3, 80075a4 <_free_r+0x2c>
 8007596:	6063      	str	r3, [r4, #4]
 8007598:	6014      	str	r4, [r2, #0]
 800759a:	4628      	mov	r0, r5
 800759c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a0:	f000 b8e4 	b.w	800776c <__malloc_unlock>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d908      	bls.n	80075ba <_free_r+0x42>
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	1821      	adds	r1, r4, r0
 80075ac:	428b      	cmp	r3, r1
 80075ae:	bf01      	itttt	eq
 80075b0:	6819      	ldreq	r1, [r3, #0]
 80075b2:	685b      	ldreq	r3, [r3, #4]
 80075b4:	1809      	addeq	r1, r1, r0
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	e7ed      	b.n	8007596 <_free_r+0x1e>
 80075ba:	461a      	mov	r2, r3
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	b10b      	cbz	r3, 80075c4 <_free_r+0x4c>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d9fa      	bls.n	80075ba <_free_r+0x42>
 80075c4:	6811      	ldr	r1, [r2, #0]
 80075c6:	1850      	adds	r0, r2, r1
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d10b      	bne.n	80075e4 <_free_r+0x6c>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	4401      	add	r1, r0
 80075d0:	1850      	adds	r0, r2, r1
 80075d2:	4283      	cmp	r3, r0
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	d1e0      	bne.n	800759a <_free_r+0x22>
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	6053      	str	r3, [r2, #4]
 80075de:	4408      	add	r0, r1
 80075e0:	6010      	str	r0, [r2, #0]
 80075e2:	e7da      	b.n	800759a <_free_r+0x22>
 80075e4:	d902      	bls.n	80075ec <_free_r+0x74>
 80075e6:	230c      	movs	r3, #12
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	e7d6      	b.n	800759a <_free_r+0x22>
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	1821      	adds	r1, r4, r0
 80075f0:	428b      	cmp	r3, r1
 80075f2:	bf04      	itt	eq
 80075f4:	6819      	ldreq	r1, [r3, #0]
 80075f6:	685b      	ldreq	r3, [r3, #4]
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	bf04      	itt	eq
 80075fc:	1809      	addeq	r1, r1, r0
 80075fe:	6021      	streq	r1, [r4, #0]
 8007600:	6054      	str	r4, [r2, #4]
 8007602:	e7ca      	b.n	800759a <_free_r+0x22>
 8007604:	bd38      	pop	{r3, r4, r5, pc}
 8007606:	bf00      	nop
 8007608:	200004e4 	.word	0x200004e4

0800760c <malloc>:
 800760c:	4b02      	ldr	r3, [pc, #8]	@ (8007618 <malloc+0xc>)
 800760e:	4601      	mov	r1, r0
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	f000 b825 	b.w	8007660 <_malloc_r>
 8007616:	bf00      	nop
 8007618:	2000007c 	.word	0x2000007c

0800761c <sbrk_aligned>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4e0f      	ldr	r6, [pc, #60]	@ (800765c <sbrk_aligned+0x40>)
 8007620:	460c      	mov	r4, r1
 8007622:	6831      	ldr	r1, [r6, #0]
 8007624:	4605      	mov	r5, r0
 8007626:	b911      	cbnz	r1, 800762e <sbrk_aligned+0x12>
 8007628:	f001 fe04 	bl	8009234 <_sbrk_r>
 800762c:	6030      	str	r0, [r6, #0]
 800762e:	4621      	mov	r1, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f001 fdff 	bl	8009234 <_sbrk_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d103      	bne.n	8007642 <sbrk_aligned+0x26>
 800763a:	f04f 34ff 	mov.w	r4, #4294967295
 800763e:	4620      	mov	r0, r4
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	1cc4      	adds	r4, r0, #3
 8007644:	f024 0403 	bic.w	r4, r4, #3
 8007648:	42a0      	cmp	r0, r4
 800764a:	d0f8      	beq.n	800763e <sbrk_aligned+0x22>
 800764c:	1a21      	subs	r1, r4, r0
 800764e:	4628      	mov	r0, r5
 8007650:	f001 fdf0 	bl	8009234 <_sbrk_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d1f2      	bne.n	800763e <sbrk_aligned+0x22>
 8007658:	e7ef      	b.n	800763a <sbrk_aligned+0x1e>
 800765a:	bf00      	nop
 800765c:	200004e0 	.word	0x200004e0

08007660 <_malloc_r>:
 8007660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	1ccd      	adds	r5, r1, #3
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	2d00      	cmp	r5, #0
 8007674:	4606      	mov	r6, r0
 8007676:	db01      	blt.n	800767c <_malloc_r+0x1c>
 8007678:	42a9      	cmp	r1, r5
 800767a:	d904      	bls.n	8007686 <_malloc_r+0x26>
 800767c:	230c      	movs	r3, #12
 800767e:	6033      	str	r3, [r6, #0]
 8007680:	2000      	movs	r0, #0
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800775c <_malloc_r+0xfc>
 800768a:	f000 f869 	bl	8007760 <__malloc_lock>
 800768e:	f8d8 3000 	ldr.w	r3, [r8]
 8007692:	461c      	mov	r4, r3
 8007694:	bb44      	cbnz	r4, 80076e8 <_malloc_r+0x88>
 8007696:	4629      	mov	r1, r5
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff ffbf 	bl	800761c <sbrk_aligned>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	4604      	mov	r4, r0
 80076a2:	d158      	bne.n	8007756 <_malloc_r+0xf6>
 80076a4:	f8d8 4000 	ldr.w	r4, [r8]
 80076a8:	4627      	mov	r7, r4
 80076aa:	2f00      	cmp	r7, #0
 80076ac:	d143      	bne.n	8007736 <_malloc_r+0xd6>
 80076ae:	2c00      	cmp	r4, #0
 80076b0:	d04b      	beq.n	800774a <_malloc_r+0xea>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	4639      	mov	r1, r7
 80076b6:	4630      	mov	r0, r6
 80076b8:	eb04 0903 	add.w	r9, r4, r3
 80076bc:	f001 fdba 	bl	8009234 <_sbrk_r>
 80076c0:	4581      	cmp	r9, r0
 80076c2:	d142      	bne.n	800774a <_malloc_r+0xea>
 80076c4:	6821      	ldr	r1, [r4, #0]
 80076c6:	1a6d      	subs	r5, r5, r1
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ffa6 	bl	800761c <sbrk_aligned>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d03a      	beq.n	800774a <_malloc_r+0xea>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	442b      	add	r3, r5
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	f8d8 3000 	ldr.w	r3, [r8]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	bb62      	cbnz	r2, 800773c <_malloc_r+0xdc>
 80076e2:	f8c8 7000 	str.w	r7, [r8]
 80076e6:	e00f      	b.n	8007708 <_malloc_r+0xa8>
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	1b52      	subs	r2, r2, r5
 80076ec:	d420      	bmi.n	8007730 <_malloc_r+0xd0>
 80076ee:	2a0b      	cmp	r2, #11
 80076f0:	d917      	bls.n	8007722 <_malloc_r+0xc2>
 80076f2:	1961      	adds	r1, r4, r5
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	6025      	str	r5, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	6059      	strne	r1, [r3, #4]
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	bf08      	it	eq
 8007700:	f8c8 1000 	streq.w	r1, [r8]
 8007704:	5162      	str	r2, [r4, r5]
 8007706:	604b      	str	r3, [r1, #4]
 8007708:	4630      	mov	r0, r6
 800770a:	f000 f82f 	bl	800776c <__malloc_unlock>
 800770e:	f104 000b 	add.w	r0, r4, #11
 8007712:	1d23      	adds	r3, r4, #4
 8007714:	f020 0007 	bic.w	r0, r0, #7
 8007718:	1ac2      	subs	r2, r0, r3
 800771a:	bf1c      	itt	ne
 800771c:	1a1b      	subne	r3, r3, r0
 800771e:	50a3      	strne	r3, [r4, r2]
 8007720:	e7af      	b.n	8007682 <_malloc_r+0x22>
 8007722:	6862      	ldr	r2, [r4, #4]
 8007724:	42a3      	cmp	r3, r4
 8007726:	bf0c      	ite	eq
 8007728:	f8c8 2000 	streq.w	r2, [r8]
 800772c:	605a      	strne	r2, [r3, #4]
 800772e:	e7eb      	b.n	8007708 <_malloc_r+0xa8>
 8007730:	4623      	mov	r3, r4
 8007732:	6864      	ldr	r4, [r4, #4]
 8007734:	e7ae      	b.n	8007694 <_malloc_r+0x34>
 8007736:	463c      	mov	r4, r7
 8007738:	687f      	ldr	r7, [r7, #4]
 800773a:	e7b6      	b.n	80076aa <_malloc_r+0x4a>
 800773c:	461a      	mov	r2, r3
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	42a3      	cmp	r3, r4
 8007742:	d1fb      	bne.n	800773c <_malloc_r+0xdc>
 8007744:	2300      	movs	r3, #0
 8007746:	6053      	str	r3, [r2, #4]
 8007748:	e7de      	b.n	8007708 <_malloc_r+0xa8>
 800774a:	230c      	movs	r3, #12
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	4630      	mov	r0, r6
 8007750:	f000 f80c 	bl	800776c <__malloc_unlock>
 8007754:	e794      	b.n	8007680 <_malloc_r+0x20>
 8007756:	6005      	str	r5, [r0, #0]
 8007758:	e7d6      	b.n	8007708 <_malloc_r+0xa8>
 800775a:	bf00      	nop
 800775c:	200004e4 	.word	0x200004e4

08007760 <__malloc_lock>:
 8007760:	4801      	ldr	r0, [pc, #4]	@ (8007768 <__malloc_lock+0x8>)
 8007762:	f7ff b8a8 	b.w	80068b6 <__retarget_lock_acquire_recursive>
 8007766:	bf00      	nop
 8007768:	200004dc 	.word	0x200004dc

0800776c <__malloc_unlock>:
 800776c:	4801      	ldr	r0, [pc, #4]	@ (8007774 <__malloc_unlock+0x8>)
 800776e:	f7ff b8a3 	b.w	80068b8 <__retarget_lock_release_recursive>
 8007772:	bf00      	nop
 8007774:	200004dc 	.word	0x200004dc

08007778 <_Balloc>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	69c6      	ldr	r6, [r0, #28]
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	b976      	cbnz	r6, 80077a0 <_Balloc+0x28>
 8007782:	2010      	movs	r0, #16
 8007784:	f7ff ff42 	bl	800760c <malloc>
 8007788:	4602      	mov	r2, r0
 800778a:	61e0      	str	r0, [r4, #28]
 800778c:	b920      	cbnz	r0, 8007798 <_Balloc+0x20>
 800778e:	4b18      	ldr	r3, [pc, #96]	@ (80077f0 <_Balloc+0x78>)
 8007790:	4818      	ldr	r0, [pc, #96]	@ (80077f4 <_Balloc+0x7c>)
 8007792:	216b      	movs	r1, #107	@ 0x6b
 8007794:	f001 fd74 	bl	8009280 <__assert_func>
 8007798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800779c:	6006      	str	r6, [r0, #0]
 800779e:	60c6      	str	r6, [r0, #12]
 80077a0:	69e6      	ldr	r6, [r4, #28]
 80077a2:	68f3      	ldr	r3, [r6, #12]
 80077a4:	b183      	cbz	r3, 80077c8 <_Balloc+0x50>
 80077a6:	69e3      	ldr	r3, [r4, #28]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077ae:	b9b8      	cbnz	r0, 80077e0 <_Balloc+0x68>
 80077b0:	2101      	movs	r1, #1
 80077b2:	fa01 f605 	lsl.w	r6, r1, r5
 80077b6:	1d72      	adds	r2, r6, #5
 80077b8:	0092      	lsls	r2, r2, #2
 80077ba:	4620      	mov	r0, r4
 80077bc:	f001 fd7e 	bl	80092bc <_calloc_r>
 80077c0:	b160      	cbz	r0, 80077dc <_Balloc+0x64>
 80077c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077c6:	e00e      	b.n	80077e6 <_Balloc+0x6e>
 80077c8:	2221      	movs	r2, #33	@ 0x21
 80077ca:	2104      	movs	r1, #4
 80077cc:	4620      	mov	r0, r4
 80077ce:	f001 fd75 	bl	80092bc <_calloc_r>
 80077d2:	69e3      	ldr	r3, [r4, #28]
 80077d4:	60f0      	str	r0, [r6, #12]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e4      	bne.n	80077a6 <_Balloc+0x2e>
 80077dc:	2000      	movs	r0, #0
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	6802      	ldr	r2, [r0, #0]
 80077e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077e6:	2300      	movs	r3, #0
 80077e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077ec:	e7f7      	b.n	80077de <_Balloc+0x66>
 80077ee:	bf00      	nop
 80077f0:	0800a5d4 	.word	0x0800a5d4
 80077f4:	0800a654 	.word	0x0800a654

080077f8 <_Bfree>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	69c6      	ldr	r6, [r0, #28]
 80077fc:	4605      	mov	r5, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	b976      	cbnz	r6, 8007820 <_Bfree+0x28>
 8007802:	2010      	movs	r0, #16
 8007804:	f7ff ff02 	bl	800760c <malloc>
 8007808:	4602      	mov	r2, r0
 800780a:	61e8      	str	r0, [r5, #28]
 800780c:	b920      	cbnz	r0, 8007818 <_Bfree+0x20>
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <_Bfree+0x3c>)
 8007810:	4809      	ldr	r0, [pc, #36]	@ (8007838 <_Bfree+0x40>)
 8007812:	218f      	movs	r1, #143	@ 0x8f
 8007814:	f001 fd34 	bl	8009280 <__assert_func>
 8007818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800781c:	6006      	str	r6, [r0, #0]
 800781e:	60c6      	str	r6, [r0, #12]
 8007820:	b13c      	cbz	r4, 8007832 <_Bfree+0x3a>
 8007822:	69eb      	ldr	r3, [r5, #28]
 8007824:	6862      	ldr	r2, [r4, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800782c:	6021      	str	r1, [r4, #0]
 800782e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	0800a5d4 	.word	0x0800a5d4
 8007838:	0800a654 	.word	0x0800a654

0800783c <__multadd>:
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	690d      	ldr	r5, [r1, #16]
 8007842:	4607      	mov	r7, r0
 8007844:	460c      	mov	r4, r1
 8007846:	461e      	mov	r6, r3
 8007848:	f101 0c14 	add.w	ip, r1, #20
 800784c:	2000      	movs	r0, #0
 800784e:	f8dc 3000 	ldr.w	r3, [ip]
 8007852:	b299      	uxth	r1, r3
 8007854:	fb02 6101 	mla	r1, r2, r1, r6
 8007858:	0c1e      	lsrs	r6, r3, #16
 800785a:	0c0b      	lsrs	r3, r1, #16
 800785c:	fb02 3306 	mla	r3, r2, r6, r3
 8007860:	b289      	uxth	r1, r1
 8007862:	3001      	adds	r0, #1
 8007864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007868:	4285      	cmp	r5, r0
 800786a:	f84c 1b04 	str.w	r1, [ip], #4
 800786e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007872:	dcec      	bgt.n	800784e <__multadd+0x12>
 8007874:	b30e      	cbz	r6, 80078ba <__multadd+0x7e>
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	42ab      	cmp	r3, r5
 800787a:	dc19      	bgt.n	80078b0 <__multadd+0x74>
 800787c:	6861      	ldr	r1, [r4, #4]
 800787e:	4638      	mov	r0, r7
 8007880:	3101      	adds	r1, #1
 8007882:	f7ff ff79 	bl	8007778 <_Balloc>
 8007886:	4680      	mov	r8, r0
 8007888:	b928      	cbnz	r0, 8007896 <__multadd+0x5a>
 800788a:	4602      	mov	r2, r0
 800788c:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <__multadd+0x84>)
 800788e:	480d      	ldr	r0, [pc, #52]	@ (80078c4 <__multadd+0x88>)
 8007890:	21ba      	movs	r1, #186	@ 0xba
 8007892:	f001 fcf5 	bl	8009280 <__assert_func>
 8007896:	6922      	ldr	r2, [r4, #16]
 8007898:	3202      	adds	r2, #2
 800789a:	f104 010c 	add.w	r1, r4, #12
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	300c      	adds	r0, #12
 80078a2:	f001 fcd7 	bl	8009254 <memcpy>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff ffa5 	bl	80077f8 <_Bfree>
 80078ae:	4644      	mov	r4, r8
 80078b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b4:	3501      	adds	r5, #1
 80078b6:	615e      	str	r6, [r3, #20]
 80078b8:	6125      	str	r5, [r4, #16]
 80078ba:	4620      	mov	r0, r4
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	0800a643 	.word	0x0800a643
 80078c4:	0800a654 	.word	0x0800a654

080078c8 <__s2b>:
 80078c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	4615      	mov	r5, r2
 80078d0:	461f      	mov	r7, r3
 80078d2:	2209      	movs	r2, #9
 80078d4:	3308      	adds	r3, #8
 80078d6:	4606      	mov	r6, r0
 80078d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078dc:	2100      	movs	r1, #0
 80078de:	2201      	movs	r2, #1
 80078e0:	429a      	cmp	r2, r3
 80078e2:	db09      	blt.n	80078f8 <__s2b+0x30>
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff ff47 	bl	8007778 <_Balloc>
 80078ea:	b940      	cbnz	r0, 80078fe <__s2b+0x36>
 80078ec:	4602      	mov	r2, r0
 80078ee:	4b19      	ldr	r3, [pc, #100]	@ (8007954 <__s2b+0x8c>)
 80078f0:	4819      	ldr	r0, [pc, #100]	@ (8007958 <__s2b+0x90>)
 80078f2:	21d3      	movs	r1, #211	@ 0xd3
 80078f4:	f001 fcc4 	bl	8009280 <__assert_func>
 80078f8:	0052      	lsls	r2, r2, #1
 80078fa:	3101      	adds	r1, #1
 80078fc:	e7f0      	b.n	80078e0 <__s2b+0x18>
 80078fe:	9b08      	ldr	r3, [sp, #32]
 8007900:	6143      	str	r3, [r0, #20]
 8007902:	2d09      	cmp	r5, #9
 8007904:	f04f 0301 	mov.w	r3, #1
 8007908:	6103      	str	r3, [r0, #16]
 800790a:	dd16      	ble.n	800793a <__s2b+0x72>
 800790c:	f104 0909 	add.w	r9, r4, #9
 8007910:	46c8      	mov	r8, r9
 8007912:	442c      	add	r4, r5
 8007914:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007918:	4601      	mov	r1, r0
 800791a:	3b30      	subs	r3, #48	@ 0x30
 800791c:	220a      	movs	r2, #10
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff ff8c 	bl	800783c <__multadd>
 8007924:	45a0      	cmp	r8, r4
 8007926:	d1f5      	bne.n	8007914 <__s2b+0x4c>
 8007928:	f1a5 0408 	sub.w	r4, r5, #8
 800792c:	444c      	add	r4, r9
 800792e:	1b2d      	subs	r5, r5, r4
 8007930:	1963      	adds	r3, r4, r5
 8007932:	42bb      	cmp	r3, r7
 8007934:	db04      	blt.n	8007940 <__s2b+0x78>
 8007936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793a:	340a      	adds	r4, #10
 800793c:	2509      	movs	r5, #9
 800793e:	e7f6      	b.n	800792e <__s2b+0x66>
 8007940:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007944:	4601      	mov	r1, r0
 8007946:	3b30      	subs	r3, #48	@ 0x30
 8007948:	220a      	movs	r2, #10
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ff76 	bl	800783c <__multadd>
 8007950:	e7ee      	b.n	8007930 <__s2b+0x68>
 8007952:	bf00      	nop
 8007954:	0800a643 	.word	0x0800a643
 8007958:	0800a654 	.word	0x0800a654

0800795c <__hi0bits>:
 800795c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007960:	4603      	mov	r3, r0
 8007962:	bf36      	itet	cc
 8007964:	0403      	lslcc	r3, r0, #16
 8007966:	2000      	movcs	r0, #0
 8007968:	2010      	movcc	r0, #16
 800796a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800796e:	bf3c      	itt	cc
 8007970:	021b      	lslcc	r3, r3, #8
 8007972:	3008      	addcc	r0, #8
 8007974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007978:	bf3c      	itt	cc
 800797a:	011b      	lslcc	r3, r3, #4
 800797c:	3004      	addcc	r0, #4
 800797e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007982:	bf3c      	itt	cc
 8007984:	009b      	lslcc	r3, r3, #2
 8007986:	3002      	addcc	r0, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	db05      	blt.n	8007998 <__hi0bits+0x3c>
 800798c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007990:	f100 0001 	add.w	r0, r0, #1
 8007994:	bf08      	it	eq
 8007996:	2020      	moveq	r0, #32
 8007998:	4770      	bx	lr

0800799a <__lo0bits>:
 800799a:	6803      	ldr	r3, [r0, #0]
 800799c:	4602      	mov	r2, r0
 800799e:	f013 0007 	ands.w	r0, r3, #7
 80079a2:	d00b      	beq.n	80079bc <__lo0bits+0x22>
 80079a4:	07d9      	lsls	r1, r3, #31
 80079a6:	d421      	bmi.n	80079ec <__lo0bits+0x52>
 80079a8:	0798      	lsls	r0, r3, #30
 80079aa:	bf49      	itett	mi
 80079ac:	085b      	lsrmi	r3, r3, #1
 80079ae:	089b      	lsrpl	r3, r3, #2
 80079b0:	2001      	movmi	r0, #1
 80079b2:	6013      	strmi	r3, [r2, #0]
 80079b4:	bf5c      	itt	pl
 80079b6:	6013      	strpl	r3, [r2, #0]
 80079b8:	2002      	movpl	r0, #2
 80079ba:	4770      	bx	lr
 80079bc:	b299      	uxth	r1, r3
 80079be:	b909      	cbnz	r1, 80079c4 <__lo0bits+0x2a>
 80079c0:	0c1b      	lsrs	r3, r3, #16
 80079c2:	2010      	movs	r0, #16
 80079c4:	b2d9      	uxtb	r1, r3
 80079c6:	b909      	cbnz	r1, 80079cc <__lo0bits+0x32>
 80079c8:	3008      	adds	r0, #8
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	0719      	lsls	r1, r3, #28
 80079ce:	bf04      	itt	eq
 80079d0:	091b      	lsreq	r3, r3, #4
 80079d2:	3004      	addeq	r0, #4
 80079d4:	0799      	lsls	r1, r3, #30
 80079d6:	bf04      	itt	eq
 80079d8:	089b      	lsreq	r3, r3, #2
 80079da:	3002      	addeq	r0, #2
 80079dc:	07d9      	lsls	r1, r3, #31
 80079de:	d403      	bmi.n	80079e8 <__lo0bits+0x4e>
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	f100 0001 	add.w	r0, r0, #1
 80079e6:	d003      	beq.n	80079f0 <__lo0bits+0x56>
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	4770      	bx	lr
 80079ec:	2000      	movs	r0, #0
 80079ee:	4770      	bx	lr
 80079f0:	2020      	movs	r0, #32
 80079f2:	4770      	bx	lr

080079f4 <__i2b>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	460c      	mov	r4, r1
 80079f8:	2101      	movs	r1, #1
 80079fa:	f7ff febd 	bl	8007778 <_Balloc>
 80079fe:	4602      	mov	r2, r0
 8007a00:	b928      	cbnz	r0, 8007a0e <__i2b+0x1a>
 8007a02:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <__i2b+0x24>)
 8007a04:	4805      	ldr	r0, [pc, #20]	@ (8007a1c <__i2b+0x28>)
 8007a06:	f240 1145 	movw	r1, #325	@ 0x145
 8007a0a:	f001 fc39 	bl	8009280 <__assert_func>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	6144      	str	r4, [r0, #20]
 8007a12:	6103      	str	r3, [r0, #16]
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	bf00      	nop
 8007a18:	0800a643 	.word	0x0800a643
 8007a1c:	0800a654 	.word	0x0800a654

08007a20 <__multiply>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	4617      	mov	r7, r2
 8007a26:	690a      	ldr	r2, [r1, #16]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	bfa8      	it	ge
 8007a2e:	463b      	movge	r3, r7
 8007a30:	4689      	mov	r9, r1
 8007a32:	bfa4      	itt	ge
 8007a34:	460f      	movge	r7, r1
 8007a36:	4699      	movge	r9, r3
 8007a38:	693d      	ldr	r5, [r7, #16]
 8007a3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	eb05 060a 	add.w	r6, r5, sl
 8007a46:	42b3      	cmp	r3, r6
 8007a48:	b085      	sub	sp, #20
 8007a4a:	bfb8      	it	lt
 8007a4c:	3101      	addlt	r1, #1
 8007a4e:	f7ff fe93 	bl	8007778 <_Balloc>
 8007a52:	b930      	cbnz	r0, 8007a62 <__multiply+0x42>
 8007a54:	4602      	mov	r2, r0
 8007a56:	4b41      	ldr	r3, [pc, #260]	@ (8007b5c <__multiply+0x13c>)
 8007a58:	4841      	ldr	r0, [pc, #260]	@ (8007b60 <__multiply+0x140>)
 8007a5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a5e:	f001 fc0f 	bl	8009280 <__assert_func>
 8007a62:	f100 0414 	add.w	r4, r0, #20
 8007a66:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4573      	cmp	r3, lr
 8007a70:	d320      	bcc.n	8007ab4 <__multiply+0x94>
 8007a72:	f107 0814 	add.w	r8, r7, #20
 8007a76:	f109 0114 	add.w	r1, r9, #20
 8007a7a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a7e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a82:	9302      	str	r3, [sp, #8]
 8007a84:	1beb      	subs	r3, r5, r7
 8007a86:	3b15      	subs	r3, #21
 8007a88:	f023 0303 	bic.w	r3, r3, #3
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	3715      	adds	r7, #21
 8007a90:	42bd      	cmp	r5, r7
 8007a92:	bf38      	it	cc
 8007a94:	2304      	movcc	r3, #4
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	9103      	str	r1, [sp, #12]
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	d80c      	bhi.n	8007aba <__multiply+0x9a>
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	dd03      	ble.n	8007aac <__multiply+0x8c>
 8007aa4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d055      	beq.n	8007b58 <__multiply+0x138>
 8007aac:	6106      	str	r6, [r0, #16]
 8007aae:	b005      	add	sp, #20
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab4:	f843 2b04 	str.w	r2, [r3], #4
 8007ab8:	e7d9      	b.n	8007a6e <__multiply+0x4e>
 8007aba:	f8b1 a000 	ldrh.w	sl, [r1]
 8007abe:	f1ba 0f00 	cmp.w	sl, #0
 8007ac2:	d01f      	beq.n	8007b04 <__multiply+0xe4>
 8007ac4:	46c4      	mov	ip, r8
 8007ac6:	46a1      	mov	r9, r4
 8007ac8:	2700      	movs	r7, #0
 8007aca:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ace:	f8d9 3000 	ldr.w	r3, [r9]
 8007ad2:	fa1f fb82 	uxth.w	fp, r2
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007adc:	443b      	add	r3, r7
 8007ade:	f8d9 7000 	ldr.w	r7, [r9]
 8007ae2:	0c12      	lsrs	r2, r2, #16
 8007ae4:	0c3f      	lsrs	r7, r7, #16
 8007ae6:	fb0a 7202 	mla	r2, sl, r2, r7
 8007aea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af4:	4565      	cmp	r5, ip
 8007af6:	f849 3b04 	str.w	r3, [r9], #4
 8007afa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007afe:	d8e4      	bhi.n	8007aca <__multiply+0xaa>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	50e7      	str	r7, [r4, r3]
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b0a:	3104      	adds	r1, #4
 8007b0c:	f1b9 0f00 	cmp.w	r9, #0
 8007b10:	d020      	beq.n	8007b54 <__multiply+0x134>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	4647      	mov	r7, r8
 8007b16:	46a4      	mov	ip, r4
 8007b18:	f04f 0a00 	mov.w	sl, #0
 8007b1c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007b20:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007b24:	fb09 220b 	mla	r2, r9, fp, r2
 8007b28:	4452      	add	r2, sl
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b30:	f84c 3b04 	str.w	r3, [ip], #4
 8007b34:	f857 3b04 	ldr.w	r3, [r7], #4
 8007b38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b3c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b40:	fb09 330a 	mla	r3, r9, sl, r3
 8007b44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b48:	42bd      	cmp	r5, r7
 8007b4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b4e:	d8e5      	bhi.n	8007b1c <__multiply+0xfc>
 8007b50:	9a01      	ldr	r2, [sp, #4]
 8007b52:	50a3      	str	r3, [r4, r2]
 8007b54:	3404      	adds	r4, #4
 8007b56:	e79f      	b.n	8007a98 <__multiply+0x78>
 8007b58:	3e01      	subs	r6, #1
 8007b5a:	e7a1      	b.n	8007aa0 <__multiply+0x80>
 8007b5c:	0800a643 	.word	0x0800a643
 8007b60:	0800a654 	.word	0x0800a654

08007b64 <__pow5mult>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	4615      	mov	r5, r2
 8007b6a:	f012 0203 	ands.w	r2, r2, #3
 8007b6e:	4607      	mov	r7, r0
 8007b70:	460e      	mov	r6, r1
 8007b72:	d007      	beq.n	8007b84 <__pow5mult+0x20>
 8007b74:	4c25      	ldr	r4, [pc, #148]	@ (8007c0c <__pow5mult+0xa8>)
 8007b76:	3a01      	subs	r2, #1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b7e:	f7ff fe5d 	bl	800783c <__multadd>
 8007b82:	4606      	mov	r6, r0
 8007b84:	10ad      	asrs	r5, r5, #2
 8007b86:	d03d      	beq.n	8007c04 <__pow5mult+0xa0>
 8007b88:	69fc      	ldr	r4, [r7, #28]
 8007b8a:	b97c      	cbnz	r4, 8007bac <__pow5mult+0x48>
 8007b8c:	2010      	movs	r0, #16
 8007b8e:	f7ff fd3d 	bl	800760c <malloc>
 8007b92:	4602      	mov	r2, r0
 8007b94:	61f8      	str	r0, [r7, #28]
 8007b96:	b928      	cbnz	r0, 8007ba4 <__pow5mult+0x40>
 8007b98:	4b1d      	ldr	r3, [pc, #116]	@ (8007c10 <__pow5mult+0xac>)
 8007b9a:	481e      	ldr	r0, [pc, #120]	@ (8007c14 <__pow5mult+0xb0>)
 8007b9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ba0:	f001 fb6e 	bl	8009280 <__assert_func>
 8007ba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ba8:	6004      	str	r4, [r0, #0]
 8007baa:	60c4      	str	r4, [r0, #12]
 8007bac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bb4:	b94c      	cbnz	r4, 8007bca <__pow5mult+0x66>
 8007bb6:	f240 2171 	movw	r1, #625	@ 0x271
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f7ff ff1a 	bl	80079f4 <__i2b>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	6003      	str	r3, [r0, #0]
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	07eb      	lsls	r3, r5, #31
 8007bd0:	d50a      	bpl.n	8007be8 <__pow5mult+0x84>
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f7ff ff22 	bl	8007a20 <__multiply>
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4680      	mov	r8, r0
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff fe09 	bl	80077f8 <_Bfree>
 8007be6:	4646      	mov	r6, r8
 8007be8:	106d      	asrs	r5, r5, #1
 8007bea:	d00b      	beq.n	8007c04 <__pow5mult+0xa0>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	b938      	cbnz	r0, 8007c00 <__pow5mult+0x9c>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	f7ff ff13 	bl	8007a20 <__multiply>
 8007bfa:	6020      	str	r0, [r4, #0]
 8007bfc:	f8c0 9000 	str.w	r9, [r0]
 8007c00:	4604      	mov	r4, r0
 8007c02:	e7e4      	b.n	8007bce <__pow5mult+0x6a>
 8007c04:	4630      	mov	r0, r6
 8007c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0a:	bf00      	nop
 8007c0c:	0800a764 	.word	0x0800a764
 8007c10:	0800a5d4 	.word	0x0800a5d4
 8007c14:	0800a654 	.word	0x0800a654

08007c18 <__lshift>:
 8007c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	6849      	ldr	r1, [r1, #4]
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	4607      	mov	r7, r0
 8007c2a:	4691      	mov	r9, r2
 8007c2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c30:	f108 0601 	add.w	r6, r8, #1
 8007c34:	42b3      	cmp	r3, r6
 8007c36:	db0b      	blt.n	8007c50 <__lshift+0x38>
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7ff fd9d 	bl	8007778 <_Balloc>
 8007c3e:	4605      	mov	r5, r0
 8007c40:	b948      	cbnz	r0, 8007c56 <__lshift+0x3e>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b28      	ldr	r3, [pc, #160]	@ (8007ce8 <__lshift+0xd0>)
 8007c46:	4829      	ldr	r0, [pc, #164]	@ (8007cec <__lshift+0xd4>)
 8007c48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c4c:	f001 fb18 	bl	8009280 <__assert_func>
 8007c50:	3101      	adds	r1, #1
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	e7ee      	b.n	8007c34 <__lshift+0x1c>
 8007c56:	2300      	movs	r3, #0
 8007c58:	f100 0114 	add.w	r1, r0, #20
 8007c5c:	f100 0210 	add.w	r2, r0, #16
 8007c60:	4618      	mov	r0, r3
 8007c62:	4553      	cmp	r3, sl
 8007c64:	db33      	blt.n	8007cce <__lshift+0xb6>
 8007c66:	6920      	ldr	r0, [r4, #16]
 8007c68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c6c:	f104 0314 	add.w	r3, r4, #20
 8007c70:	f019 091f 	ands.w	r9, r9, #31
 8007c74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c7c:	d02b      	beq.n	8007cd6 <__lshift+0xbe>
 8007c7e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c82:	468a      	mov	sl, r1
 8007c84:	2200      	movs	r2, #0
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	fa00 f009 	lsl.w	r0, r0, r9
 8007c8c:	4310      	orrs	r0, r2
 8007c8e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c96:	459c      	cmp	ip, r3
 8007c98:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c9c:	d8f3      	bhi.n	8007c86 <__lshift+0x6e>
 8007c9e:	ebac 0304 	sub.w	r3, ip, r4
 8007ca2:	3b15      	subs	r3, #21
 8007ca4:	f023 0303 	bic.w	r3, r3, #3
 8007ca8:	3304      	adds	r3, #4
 8007caa:	f104 0015 	add.w	r0, r4, #21
 8007cae:	4560      	cmp	r0, ip
 8007cb0:	bf88      	it	hi
 8007cb2:	2304      	movhi	r3, #4
 8007cb4:	50ca      	str	r2, [r1, r3]
 8007cb6:	b10a      	cbz	r2, 8007cbc <__lshift+0xa4>
 8007cb8:	f108 0602 	add.w	r6, r8, #2
 8007cbc:	3e01      	subs	r6, #1
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	612e      	str	r6, [r5, #16]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f7ff fd98 	bl	80077f8 <_Bfree>
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cce:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	e7c5      	b.n	8007c62 <__lshift+0x4a>
 8007cd6:	3904      	subs	r1, #4
 8007cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ce0:	459c      	cmp	ip, r3
 8007ce2:	d8f9      	bhi.n	8007cd8 <__lshift+0xc0>
 8007ce4:	e7ea      	b.n	8007cbc <__lshift+0xa4>
 8007ce6:	bf00      	nop
 8007ce8:	0800a643 	.word	0x0800a643
 8007cec:	0800a654 	.word	0x0800a654

08007cf0 <__mcmp>:
 8007cf0:	690a      	ldr	r2, [r1, #16]
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6900      	ldr	r0, [r0, #16]
 8007cf6:	1a80      	subs	r0, r0, r2
 8007cf8:	b530      	push	{r4, r5, lr}
 8007cfa:	d10e      	bne.n	8007d1a <__mcmp+0x2a>
 8007cfc:	3314      	adds	r3, #20
 8007cfe:	3114      	adds	r1, #20
 8007d00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d10:	4295      	cmp	r5, r2
 8007d12:	d003      	beq.n	8007d1c <__mcmp+0x2c>
 8007d14:	d205      	bcs.n	8007d22 <__mcmp+0x32>
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	d3f3      	bcc.n	8007d08 <__mcmp+0x18>
 8007d20:	e7fb      	b.n	8007d1a <__mcmp+0x2a>
 8007d22:	2001      	movs	r0, #1
 8007d24:	e7f9      	b.n	8007d1a <__mcmp+0x2a>
	...

08007d28 <__mdiff>:
 8007d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	4606      	mov	r6, r0
 8007d30:	4611      	mov	r1, r2
 8007d32:	4648      	mov	r0, r9
 8007d34:	4614      	mov	r4, r2
 8007d36:	f7ff ffdb 	bl	8007cf0 <__mcmp>
 8007d3a:	1e05      	subs	r5, r0, #0
 8007d3c:	d112      	bne.n	8007d64 <__mdiff+0x3c>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff fd19 	bl	8007778 <_Balloc>
 8007d46:	4602      	mov	r2, r0
 8007d48:	b928      	cbnz	r0, 8007d56 <__mdiff+0x2e>
 8007d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e48 <__mdiff+0x120>)
 8007d4c:	f240 2137 	movw	r1, #567	@ 0x237
 8007d50:	483e      	ldr	r0, [pc, #248]	@ (8007e4c <__mdiff+0x124>)
 8007d52:	f001 fa95 	bl	8009280 <__assert_func>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	b003      	add	sp, #12
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	bfbc      	itt	lt
 8007d66:	464b      	movlt	r3, r9
 8007d68:	46a1      	movlt	r9, r4
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d70:	bfba      	itte	lt
 8007d72:	461c      	movlt	r4, r3
 8007d74:	2501      	movlt	r5, #1
 8007d76:	2500      	movge	r5, #0
 8007d78:	f7ff fcfe 	bl	8007778 <_Balloc>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	b918      	cbnz	r0, 8007d88 <__mdiff+0x60>
 8007d80:	4b31      	ldr	r3, [pc, #196]	@ (8007e48 <__mdiff+0x120>)
 8007d82:	f240 2145 	movw	r1, #581	@ 0x245
 8007d86:	e7e3      	b.n	8007d50 <__mdiff+0x28>
 8007d88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d8c:	6926      	ldr	r6, [r4, #16]
 8007d8e:	60c5      	str	r5, [r0, #12]
 8007d90:	f109 0310 	add.w	r3, r9, #16
 8007d94:	f109 0514 	add.w	r5, r9, #20
 8007d98:	f104 0e14 	add.w	lr, r4, #20
 8007d9c:	f100 0b14 	add.w	fp, r0, #20
 8007da0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007da4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	46d9      	mov	r9, fp
 8007dac:	f04f 0c00 	mov.w	ip, #0
 8007db0:	9b01      	ldr	r3, [sp, #4]
 8007db2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007db6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	fa1f f38a 	uxth.w	r3, sl
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	b283      	uxth	r3, r0
 8007dc4:	1acb      	subs	r3, r1, r3
 8007dc6:	0c00      	lsrs	r0, r0, #16
 8007dc8:	4463      	add	r3, ip
 8007dca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dd8:	4576      	cmp	r6, lr
 8007dda:	f849 3b04 	str.w	r3, [r9], #4
 8007dde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007de2:	d8e5      	bhi.n	8007db0 <__mdiff+0x88>
 8007de4:	1b33      	subs	r3, r6, r4
 8007de6:	3b15      	subs	r3, #21
 8007de8:	f023 0303 	bic.w	r3, r3, #3
 8007dec:	3415      	adds	r4, #21
 8007dee:	3304      	adds	r3, #4
 8007df0:	42a6      	cmp	r6, r4
 8007df2:	bf38      	it	cc
 8007df4:	2304      	movcc	r3, #4
 8007df6:	441d      	add	r5, r3
 8007df8:	445b      	add	r3, fp
 8007dfa:	461e      	mov	r6, r3
 8007dfc:	462c      	mov	r4, r5
 8007dfe:	4544      	cmp	r4, r8
 8007e00:	d30e      	bcc.n	8007e20 <__mdiff+0xf8>
 8007e02:	f108 0103 	add.w	r1, r8, #3
 8007e06:	1b49      	subs	r1, r1, r5
 8007e08:	f021 0103 	bic.w	r1, r1, #3
 8007e0c:	3d03      	subs	r5, #3
 8007e0e:	45a8      	cmp	r8, r5
 8007e10:	bf38      	it	cc
 8007e12:	2100      	movcc	r1, #0
 8007e14:	440b      	add	r3, r1
 8007e16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e1a:	b191      	cbz	r1, 8007e42 <__mdiff+0x11a>
 8007e1c:	6117      	str	r7, [r2, #16]
 8007e1e:	e79d      	b.n	8007d5c <__mdiff+0x34>
 8007e20:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e24:	46e6      	mov	lr, ip
 8007e26:	0c08      	lsrs	r0, r1, #16
 8007e28:	fa1c fc81 	uxtah	ip, ip, r1
 8007e2c:	4471      	add	r1, lr
 8007e2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e32:	b289      	uxth	r1, r1
 8007e34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e38:	f846 1b04 	str.w	r1, [r6], #4
 8007e3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e40:	e7dd      	b.n	8007dfe <__mdiff+0xd6>
 8007e42:	3f01      	subs	r7, #1
 8007e44:	e7e7      	b.n	8007e16 <__mdiff+0xee>
 8007e46:	bf00      	nop
 8007e48:	0800a643 	.word	0x0800a643
 8007e4c:	0800a654 	.word	0x0800a654

08007e50 <__ulp>:
 8007e50:	b082      	sub	sp, #8
 8007e52:	ed8d 0b00 	vstr	d0, [sp]
 8007e56:	9a01      	ldr	r2, [sp, #4]
 8007e58:	4b0f      	ldr	r3, [pc, #60]	@ (8007e98 <__ulp+0x48>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dc08      	bgt.n	8007e76 <__ulp+0x26>
 8007e64:	425b      	negs	r3, r3
 8007e66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e6e:	da04      	bge.n	8007e7a <__ulp+0x2a>
 8007e70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e74:	4113      	asrs	r3, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	e008      	b.n	8007e8c <__ulp+0x3c>
 8007e7a:	f1a2 0314 	sub.w	r3, r2, #20
 8007e7e:	2b1e      	cmp	r3, #30
 8007e80:	bfda      	itte	le
 8007e82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e86:	40da      	lsrle	r2, r3
 8007e88:	2201      	movgt	r2, #1
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	ec41 0b10 	vmov	d0, r0, r1
 8007e94:	b002      	add	sp, #8
 8007e96:	4770      	bx	lr
 8007e98:	7ff00000 	.word	0x7ff00000

08007e9c <__b2d>:
 8007e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea0:	6906      	ldr	r6, [r0, #16]
 8007ea2:	f100 0814 	add.w	r8, r0, #20
 8007ea6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007eaa:	1f37      	subs	r7, r6, #4
 8007eac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7ff fd53 	bl	800795c <__hi0bits>
 8007eb6:	f1c0 0320 	rsb	r3, r0, #32
 8007eba:	280a      	cmp	r0, #10
 8007ebc:	600b      	str	r3, [r1, #0]
 8007ebe:	491b      	ldr	r1, [pc, #108]	@ (8007f2c <__b2d+0x90>)
 8007ec0:	dc15      	bgt.n	8007eee <__b2d+0x52>
 8007ec2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ec6:	fa22 f30c 	lsr.w	r3, r2, ip
 8007eca:	45b8      	cmp	r8, r7
 8007ecc:	ea43 0501 	orr.w	r5, r3, r1
 8007ed0:	bf34      	ite	cc
 8007ed2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ed6:	2300      	movcs	r3, #0
 8007ed8:	3015      	adds	r0, #21
 8007eda:	fa02 f000 	lsl.w	r0, r2, r0
 8007ede:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ee2:	4303      	orrs	r3, r0
 8007ee4:	461c      	mov	r4, r3
 8007ee6:	ec45 4b10 	vmov	d0, r4, r5
 8007eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eee:	45b8      	cmp	r8, r7
 8007ef0:	bf3a      	itte	cc
 8007ef2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ef6:	f1a6 0708 	subcc.w	r7, r6, #8
 8007efa:	2300      	movcs	r3, #0
 8007efc:	380b      	subs	r0, #11
 8007efe:	d012      	beq.n	8007f26 <__b2d+0x8a>
 8007f00:	f1c0 0120 	rsb	r1, r0, #32
 8007f04:	fa23 f401 	lsr.w	r4, r3, r1
 8007f08:	4082      	lsls	r2, r0
 8007f0a:	4322      	orrs	r2, r4
 8007f0c:	4547      	cmp	r7, r8
 8007f0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f12:	bf8c      	ite	hi
 8007f14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f18:	2200      	movls	r2, #0
 8007f1a:	4083      	lsls	r3, r0
 8007f1c:	40ca      	lsrs	r2, r1
 8007f1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f22:	4313      	orrs	r3, r2
 8007f24:	e7de      	b.n	8007ee4 <__b2d+0x48>
 8007f26:	ea42 0501 	orr.w	r5, r2, r1
 8007f2a:	e7db      	b.n	8007ee4 <__b2d+0x48>
 8007f2c:	3ff00000 	.word	0x3ff00000

08007f30 <__d2b>:
 8007f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	460f      	mov	r7, r1
 8007f36:	2101      	movs	r1, #1
 8007f38:	ec59 8b10 	vmov	r8, r9, d0
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	f7ff fc1b 	bl	8007778 <_Balloc>
 8007f42:	4604      	mov	r4, r0
 8007f44:	b930      	cbnz	r0, 8007f54 <__d2b+0x24>
 8007f46:	4602      	mov	r2, r0
 8007f48:	4b23      	ldr	r3, [pc, #140]	@ (8007fd8 <__d2b+0xa8>)
 8007f4a:	4824      	ldr	r0, [pc, #144]	@ (8007fdc <__d2b+0xac>)
 8007f4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f50:	f001 f996 	bl	8009280 <__assert_func>
 8007f54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f5c:	b10d      	cbz	r5, 8007f62 <__d2b+0x32>
 8007f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	f1b8 0300 	subs.w	r3, r8, #0
 8007f68:	d023      	beq.n	8007fb2 <__d2b+0x82>
 8007f6a:	4668      	mov	r0, sp
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	f7ff fd14 	bl	800799a <__lo0bits>
 8007f72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f76:	b1d0      	cbz	r0, 8007fae <__d2b+0x7e>
 8007f78:	f1c0 0320 	rsb	r3, r0, #32
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	430b      	orrs	r3, r1
 8007f82:	40c2      	lsrs	r2, r0
 8007f84:	6163      	str	r3, [r4, #20]
 8007f86:	9201      	str	r2, [sp, #4]
 8007f88:	9b01      	ldr	r3, [sp, #4]
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bf0c      	ite	eq
 8007f90:	2201      	moveq	r2, #1
 8007f92:	2202      	movne	r2, #2
 8007f94:	6122      	str	r2, [r4, #16]
 8007f96:	b1a5      	cbz	r5, 8007fc2 <__d2b+0x92>
 8007f98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f9c:	4405      	add	r5, r0
 8007f9e:	603d      	str	r5, [r7, #0]
 8007fa0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fa4:	6030      	str	r0, [r6, #0]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	b003      	add	sp, #12
 8007faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fae:	6161      	str	r1, [r4, #20]
 8007fb0:	e7ea      	b.n	8007f88 <__d2b+0x58>
 8007fb2:	a801      	add	r0, sp, #4
 8007fb4:	f7ff fcf1 	bl	800799a <__lo0bits>
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	6163      	str	r3, [r4, #20]
 8007fbc:	3020      	adds	r0, #32
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	e7e8      	b.n	8007f94 <__d2b+0x64>
 8007fc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fca:	6038      	str	r0, [r7, #0]
 8007fcc:	6918      	ldr	r0, [r3, #16]
 8007fce:	f7ff fcc5 	bl	800795c <__hi0bits>
 8007fd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fd6:	e7e5      	b.n	8007fa4 <__d2b+0x74>
 8007fd8:	0800a643 	.word	0x0800a643
 8007fdc:	0800a654 	.word	0x0800a654

08007fe0 <__ratio>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	e9cd 1000 	strd	r1, r0, [sp]
 8007fea:	a902      	add	r1, sp, #8
 8007fec:	f7ff ff56 	bl	8007e9c <__b2d>
 8007ff0:	9800      	ldr	r0, [sp, #0]
 8007ff2:	a903      	add	r1, sp, #12
 8007ff4:	ec55 4b10 	vmov	r4, r5, d0
 8007ff8:	f7ff ff50 	bl	8007e9c <__b2d>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	6919      	ldr	r1, [r3, #16]
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	1ac9      	subs	r1, r1, r3
 8008006:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	ec5b ab10 	vmov	sl, fp, d0
 8008010:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfce      	itee	gt
 8008018:	462a      	movgt	r2, r5
 800801a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800801e:	465a      	movle	r2, fp
 8008020:	462f      	mov	r7, r5
 8008022:	46d9      	mov	r9, fp
 8008024:	bfcc      	ite	gt
 8008026:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800802a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800802e:	464b      	mov	r3, r9
 8008030:	4652      	mov	r2, sl
 8008032:	4620      	mov	r0, r4
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 fc21 	bl	800087c <__aeabi_ddiv>
 800803a:	ec41 0b10 	vmov	d0, r0, r1
 800803e:	b005      	add	sp, #20
 8008040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008044 <__copybits>:
 8008044:	3901      	subs	r1, #1
 8008046:	b570      	push	{r4, r5, r6, lr}
 8008048:	1149      	asrs	r1, r1, #5
 800804a:	6914      	ldr	r4, [r2, #16]
 800804c:	3101      	adds	r1, #1
 800804e:	f102 0314 	add.w	r3, r2, #20
 8008052:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008056:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800805a:	1f05      	subs	r5, r0, #4
 800805c:	42a3      	cmp	r3, r4
 800805e:	d30c      	bcc.n	800807a <__copybits+0x36>
 8008060:	1aa3      	subs	r3, r4, r2
 8008062:	3b11      	subs	r3, #17
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	3211      	adds	r2, #17
 800806a:	42a2      	cmp	r2, r4
 800806c:	bf88      	it	hi
 800806e:	2300      	movhi	r3, #0
 8008070:	4418      	add	r0, r3
 8008072:	2300      	movs	r3, #0
 8008074:	4288      	cmp	r0, r1
 8008076:	d305      	bcc.n	8008084 <__copybits+0x40>
 8008078:	bd70      	pop	{r4, r5, r6, pc}
 800807a:	f853 6b04 	ldr.w	r6, [r3], #4
 800807e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008082:	e7eb      	b.n	800805c <__copybits+0x18>
 8008084:	f840 3b04 	str.w	r3, [r0], #4
 8008088:	e7f4      	b.n	8008074 <__copybits+0x30>

0800808a <__any_on>:
 800808a:	f100 0214 	add.w	r2, r0, #20
 800808e:	6900      	ldr	r0, [r0, #16]
 8008090:	114b      	asrs	r3, r1, #5
 8008092:	4298      	cmp	r0, r3
 8008094:	b510      	push	{r4, lr}
 8008096:	db11      	blt.n	80080bc <__any_on+0x32>
 8008098:	dd0a      	ble.n	80080b0 <__any_on+0x26>
 800809a:	f011 011f 	ands.w	r1, r1, #31
 800809e:	d007      	beq.n	80080b0 <__any_on+0x26>
 80080a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080a4:	fa24 f001 	lsr.w	r0, r4, r1
 80080a8:	fa00 f101 	lsl.w	r1, r0, r1
 80080ac:	428c      	cmp	r4, r1
 80080ae:	d10b      	bne.n	80080c8 <__any_on+0x3e>
 80080b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d803      	bhi.n	80080c0 <__any_on+0x36>
 80080b8:	2000      	movs	r0, #0
 80080ba:	bd10      	pop	{r4, pc}
 80080bc:	4603      	mov	r3, r0
 80080be:	e7f7      	b.n	80080b0 <__any_on+0x26>
 80080c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d0f5      	beq.n	80080b4 <__any_on+0x2a>
 80080c8:	2001      	movs	r0, #1
 80080ca:	e7f6      	b.n	80080ba <__any_on+0x30>

080080cc <sulp>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	4604      	mov	r4, r0
 80080d0:	460d      	mov	r5, r1
 80080d2:	ec45 4b10 	vmov	d0, r4, r5
 80080d6:	4616      	mov	r6, r2
 80080d8:	f7ff feba 	bl	8007e50 <__ulp>
 80080dc:	ec51 0b10 	vmov	r0, r1, d0
 80080e0:	b17e      	cbz	r6, 8008102 <sulp+0x36>
 80080e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd09      	ble.n	8008102 <sulp+0x36>
 80080ee:	051b      	lsls	r3, r3, #20
 80080f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80080f4:	2400      	movs	r4, #0
 80080f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 fa93 	bl	8000628 <__aeabi_dmul>
 8008102:	ec41 0b10 	vmov	d0, r0, r1
 8008106:	bd70      	pop	{r4, r5, r6, pc}

08008108 <_strtod_l>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	b09f      	sub	sp, #124	@ 0x7c
 800810e:	460c      	mov	r4, r1
 8008110:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008112:	2200      	movs	r2, #0
 8008114:	921a      	str	r2, [sp, #104]	@ 0x68
 8008116:	9005      	str	r0, [sp, #20]
 8008118:	f04f 0a00 	mov.w	sl, #0
 800811c:	f04f 0b00 	mov.w	fp, #0
 8008120:	460a      	mov	r2, r1
 8008122:	9219      	str	r2, [sp, #100]	@ 0x64
 8008124:	7811      	ldrb	r1, [r2, #0]
 8008126:	292b      	cmp	r1, #43	@ 0x2b
 8008128:	d04a      	beq.n	80081c0 <_strtod_l+0xb8>
 800812a:	d838      	bhi.n	800819e <_strtod_l+0x96>
 800812c:	290d      	cmp	r1, #13
 800812e:	d832      	bhi.n	8008196 <_strtod_l+0x8e>
 8008130:	2908      	cmp	r1, #8
 8008132:	d832      	bhi.n	800819a <_strtod_l+0x92>
 8008134:	2900      	cmp	r1, #0
 8008136:	d03b      	beq.n	80081b0 <_strtod_l+0xa8>
 8008138:	2200      	movs	r2, #0
 800813a:	920e      	str	r2, [sp, #56]	@ 0x38
 800813c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800813e:	782a      	ldrb	r2, [r5, #0]
 8008140:	2a30      	cmp	r2, #48	@ 0x30
 8008142:	f040 80b2 	bne.w	80082aa <_strtod_l+0x1a2>
 8008146:	786a      	ldrb	r2, [r5, #1]
 8008148:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800814c:	2a58      	cmp	r2, #88	@ 0x58
 800814e:	d16e      	bne.n	800822e <_strtod_l+0x126>
 8008150:	9302      	str	r3, [sp, #8]
 8008152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	ab1a      	add	r3, sp, #104	@ 0x68
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	4a8f      	ldr	r2, [pc, #572]	@ (8008398 <_strtod_l+0x290>)
 800815c:	9805      	ldr	r0, [sp, #20]
 800815e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008160:	a919      	add	r1, sp, #100	@ 0x64
 8008162:	f001 f927 	bl	80093b4 <__gethex>
 8008166:	f010 060f 	ands.w	r6, r0, #15
 800816a:	4604      	mov	r4, r0
 800816c:	d005      	beq.n	800817a <_strtod_l+0x72>
 800816e:	2e06      	cmp	r6, #6
 8008170:	d128      	bne.n	80081c4 <_strtod_l+0xbc>
 8008172:	3501      	adds	r5, #1
 8008174:	2300      	movs	r3, #0
 8008176:	9519      	str	r5, [sp, #100]	@ 0x64
 8008178:	930e      	str	r3, [sp, #56]	@ 0x38
 800817a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 858e 	bne.w	8008c9e <_strtod_l+0xb96>
 8008182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008184:	b1cb      	cbz	r3, 80081ba <_strtod_l+0xb2>
 8008186:	4652      	mov	r2, sl
 8008188:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800818c:	ec43 2b10 	vmov	d0, r2, r3
 8008190:	b01f      	add	sp, #124	@ 0x7c
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	2920      	cmp	r1, #32
 8008198:	d1ce      	bne.n	8008138 <_strtod_l+0x30>
 800819a:	3201      	adds	r2, #1
 800819c:	e7c1      	b.n	8008122 <_strtod_l+0x1a>
 800819e:	292d      	cmp	r1, #45	@ 0x2d
 80081a0:	d1ca      	bne.n	8008138 <_strtod_l+0x30>
 80081a2:	2101      	movs	r1, #1
 80081a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80081a6:	1c51      	adds	r1, r2, #1
 80081a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80081aa:	7852      	ldrb	r2, [r2, #1]
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	d1c5      	bne.n	800813c <_strtod_l+0x34>
 80081b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 8570 	bne.w	8008c9a <_strtod_l+0xb92>
 80081ba:	4652      	mov	r2, sl
 80081bc:	465b      	mov	r3, fp
 80081be:	e7e5      	b.n	800818c <_strtod_l+0x84>
 80081c0:	2100      	movs	r1, #0
 80081c2:	e7ef      	b.n	80081a4 <_strtod_l+0x9c>
 80081c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081c6:	b13a      	cbz	r2, 80081d8 <_strtod_l+0xd0>
 80081c8:	2135      	movs	r1, #53	@ 0x35
 80081ca:	a81c      	add	r0, sp, #112	@ 0x70
 80081cc:	f7ff ff3a 	bl	8008044 <__copybits>
 80081d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081d2:	9805      	ldr	r0, [sp, #20]
 80081d4:	f7ff fb10 	bl	80077f8 <_Bfree>
 80081d8:	3e01      	subs	r6, #1
 80081da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80081dc:	2e04      	cmp	r6, #4
 80081de:	d806      	bhi.n	80081ee <_strtod_l+0xe6>
 80081e0:	e8df f006 	tbb	[pc, r6]
 80081e4:	201d0314 	.word	0x201d0314
 80081e8:	14          	.byte	0x14
 80081e9:	00          	.byte	0x00
 80081ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80081ee:	05e1      	lsls	r1, r4, #23
 80081f0:	bf48      	it	mi
 80081f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80081f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081fa:	0d1b      	lsrs	r3, r3, #20
 80081fc:	051b      	lsls	r3, r3, #20
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1bb      	bne.n	800817a <_strtod_l+0x72>
 8008202:	f7fe fb2d 	bl	8006860 <__errno>
 8008206:	2322      	movs	r3, #34	@ 0x22
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	e7b6      	b.n	800817a <_strtod_l+0x72>
 800820c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008214:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008218:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800821c:	e7e7      	b.n	80081ee <_strtod_l+0xe6>
 800821e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80083a0 <_strtod_l+0x298>
 8008222:	e7e4      	b.n	80081ee <_strtod_l+0xe6>
 8008224:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008228:	f04f 3aff 	mov.w	sl, #4294967295
 800822c:	e7df      	b.n	80081ee <_strtod_l+0xe6>
 800822e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	9219      	str	r2, [sp, #100]	@ 0x64
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b30      	cmp	r3, #48	@ 0x30
 8008238:	d0f9      	beq.n	800822e <_strtod_l+0x126>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d09d      	beq.n	800817a <_strtod_l+0x72>
 800823e:	2301      	movs	r3, #1
 8008240:	2700      	movs	r7, #0
 8008242:	9308      	str	r3, [sp, #32]
 8008244:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008246:	930c      	str	r3, [sp, #48]	@ 0x30
 8008248:	970b      	str	r7, [sp, #44]	@ 0x2c
 800824a:	46b9      	mov	r9, r7
 800824c:	220a      	movs	r2, #10
 800824e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008250:	7805      	ldrb	r5, [r0, #0]
 8008252:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008256:	b2d9      	uxtb	r1, r3
 8008258:	2909      	cmp	r1, #9
 800825a:	d928      	bls.n	80082ae <_strtod_l+0x1a6>
 800825c:	494f      	ldr	r1, [pc, #316]	@ (800839c <_strtod_l+0x294>)
 800825e:	2201      	movs	r2, #1
 8008260:	f000 ffd6 	bl	8009210 <strncmp>
 8008264:	2800      	cmp	r0, #0
 8008266:	d032      	beq.n	80082ce <_strtod_l+0x1c6>
 8008268:	2000      	movs	r0, #0
 800826a:	462a      	mov	r2, r5
 800826c:	900a      	str	r0, [sp, #40]	@ 0x28
 800826e:	464d      	mov	r5, r9
 8008270:	4603      	mov	r3, r0
 8008272:	2a65      	cmp	r2, #101	@ 0x65
 8008274:	d001      	beq.n	800827a <_strtod_l+0x172>
 8008276:	2a45      	cmp	r2, #69	@ 0x45
 8008278:	d114      	bne.n	80082a4 <_strtod_l+0x19c>
 800827a:	b91d      	cbnz	r5, 8008284 <_strtod_l+0x17c>
 800827c:	9a08      	ldr	r2, [sp, #32]
 800827e:	4302      	orrs	r2, r0
 8008280:	d096      	beq.n	80081b0 <_strtod_l+0xa8>
 8008282:	2500      	movs	r5, #0
 8008284:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008286:	1c62      	adds	r2, r4, #1
 8008288:	9219      	str	r2, [sp, #100]	@ 0x64
 800828a:	7862      	ldrb	r2, [r4, #1]
 800828c:	2a2b      	cmp	r2, #43	@ 0x2b
 800828e:	d07a      	beq.n	8008386 <_strtod_l+0x27e>
 8008290:	2a2d      	cmp	r2, #45	@ 0x2d
 8008292:	d07e      	beq.n	8008392 <_strtod_l+0x28a>
 8008294:	f04f 0c00 	mov.w	ip, #0
 8008298:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800829c:	2909      	cmp	r1, #9
 800829e:	f240 8085 	bls.w	80083ac <_strtod_l+0x2a4>
 80082a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80082a4:	f04f 0800 	mov.w	r8, #0
 80082a8:	e0a5      	b.n	80083f6 <_strtod_l+0x2ee>
 80082aa:	2300      	movs	r3, #0
 80082ac:	e7c8      	b.n	8008240 <_strtod_l+0x138>
 80082ae:	f1b9 0f08 	cmp.w	r9, #8
 80082b2:	bfd8      	it	le
 80082b4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80082b6:	f100 0001 	add.w	r0, r0, #1
 80082ba:	bfda      	itte	le
 80082bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80082c0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80082c2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80082c6:	f109 0901 	add.w	r9, r9, #1
 80082ca:	9019      	str	r0, [sp, #100]	@ 0x64
 80082cc:	e7bf      	b.n	800824e <_strtod_l+0x146>
 80082ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082d4:	785a      	ldrb	r2, [r3, #1]
 80082d6:	f1b9 0f00 	cmp.w	r9, #0
 80082da:	d03b      	beq.n	8008354 <_strtod_l+0x24c>
 80082dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80082de:	464d      	mov	r5, r9
 80082e0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	d912      	bls.n	800830e <_strtod_l+0x206>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e7c2      	b.n	8008272 <_strtod_l+0x16a>
 80082ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80082f2:	785a      	ldrb	r2, [r3, #1]
 80082f4:	3001      	adds	r0, #1
 80082f6:	2a30      	cmp	r2, #48	@ 0x30
 80082f8:	d0f8      	beq.n	80082ec <_strtod_l+0x1e4>
 80082fa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80082fe:	2b08      	cmp	r3, #8
 8008300:	f200 84d2 	bhi.w	8008ca8 <_strtod_l+0xba0>
 8008304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008306:	900a      	str	r0, [sp, #40]	@ 0x28
 8008308:	2000      	movs	r0, #0
 800830a:	930c      	str	r3, [sp, #48]	@ 0x30
 800830c:	4605      	mov	r5, r0
 800830e:	3a30      	subs	r2, #48	@ 0x30
 8008310:	f100 0301 	add.w	r3, r0, #1
 8008314:	d018      	beq.n	8008348 <_strtod_l+0x240>
 8008316:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008318:	4419      	add	r1, r3
 800831a:	910a      	str	r1, [sp, #40]	@ 0x28
 800831c:	462e      	mov	r6, r5
 800831e:	f04f 0e0a 	mov.w	lr, #10
 8008322:	1c71      	adds	r1, r6, #1
 8008324:	eba1 0c05 	sub.w	ip, r1, r5
 8008328:	4563      	cmp	r3, ip
 800832a:	dc15      	bgt.n	8008358 <_strtod_l+0x250>
 800832c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008330:	182b      	adds	r3, r5, r0
 8008332:	2b08      	cmp	r3, #8
 8008334:	f105 0501 	add.w	r5, r5, #1
 8008338:	4405      	add	r5, r0
 800833a:	dc1a      	bgt.n	8008372 <_strtod_l+0x26a>
 800833c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800833e:	230a      	movs	r3, #10
 8008340:	fb03 2301 	mla	r3, r3, r1, r2
 8008344:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008346:	2300      	movs	r3, #0
 8008348:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800834a:	1c51      	adds	r1, r2, #1
 800834c:	9119      	str	r1, [sp, #100]	@ 0x64
 800834e:	7852      	ldrb	r2, [r2, #1]
 8008350:	4618      	mov	r0, r3
 8008352:	e7c5      	b.n	80082e0 <_strtod_l+0x1d8>
 8008354:	4648      	mov	r0, r9
 8008356:	e7ce      	b.n	80082f6 <_strtod_l+0x1ee>
 8008358:	2e08      	cmp	r6, #8
 800835a:	dc05      	bgt.n	8008368 <_strtod_l+0x260>
 800835c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800835e:	fb0e f606 	mul.w	r6, lr, r6
 8008362:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008364:	460e      	mov	r6, r1
 8008366:	e7dc      	b.n	8008322 <_strtod_l+0x21a>
 8008368:	2910      	cmp	r1, #16
 800836a:	bfd8      	it	le
 800836c:	fb0e f707 	mulle.w	r7, lr, r7
 8008370:	e7f8      	b.n	8008364 <_strtod_l+0x25c>
 8008372:	2b0f      	cmp	r3, #15
 8008374:	bfdc      	itt	le
 8008376:	230a      	movle	r3, #10
 8008378:	fb03 2707 	mlale	r7, r3, r7, r2
 800837c:	e7e3      	b.n	8008346 <_strtod_l+0x23e>
 800837e:	2300      	movs	r3, #0
 8008380:	930a      	str	r3, [sp, #40]	@ 0x28
 8008382:	2301      	movs	r3, #1
 8008384:	e77a      	b.n	800827c <_strtod_l+0x174>
 8008386:	f04f 0c00 	mov.w	ip, #0
 800838a:	1ca2      	adds	r2, r4, #2
 800838c:	9219      	str	r2, [sp, #100]	@ 0x64
 800838e:	78a2      	ldrb	r2, [r4, #2]
 8008390:	e782      	b.n	8008298 <_strtod_l+0x190>
 8008392:	f04f 0c01 	mov.w	ip, #1
 8008396:	e7f8      	b.n	800838a <_strtod_l+0x282>
 8008398:	0800a874 	.word	0x0800a874
 800839c:	0800a6ad 	.word	0x0800a6ad
 80083a0:	7ff00000 	.word	0x7ff00000
 80083a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083a6:	1c51      	adds	r1, r2, #1
 80083a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80083aa:	7852      	ldrb	r2, [r2, #1]
 80083ac:	2a30      	cmp	r2, #48	@ 0x30
 80083ae:	d0f9      	beq.n	80083a4 <_strtod_l+0x29c>
 80083b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083b4:	2908      	cmp	r1, #8
 80083b6:	f63f af75 	bhi.w	80082a4 <_strtod_l+0x19c>
 80083ba:	3a30      	subs	r2, #48	@ 0x30
 80083bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80083be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083c2:	f04f 080a 	mov.w	r8, #10
 80083c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083c8:	1c56      	adds	r6, r2, #1
 80083ca:	9619      	str	r6, [sp, #100]	@ 0x64
 80083cc:	7852      	ldrb	r2, [r2, #1]
 80083ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083d2:	f1be 0f09 	cmp.w	lr, #9
 80083d6:	d939      	bls.n	800844c <_strtod_l+0x344>
 80083d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083da:	1a76      	subs	r6, r6, r1
 80083dc:	2e08      	cmp	r6, #8
 80083de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083e2:	dc03      	bgt.n	80083ec <_strtod_l+0x2e4>
 80083e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083e6:	4588      	cmp	r8, r1
 80083e8:	bfa8      	it	ge
 80083ea:	4688      	movge	r8, r1
 80083ec:	f1bc 0f00 	cmp.w	ip, #0
 80083f0:	d001      	beq.n	80083f6 <_strtod_l+0x2ee>
 80083f2:	f1c8 0800 	rsb	r8, r8, #0
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	d14e      	bne.n	8008498 <_strtod_l+0x390>
 80083fa:	9908      	ldr	r1, [sp, #32]
 80083fc:	4308      	orrs	r0, r1
 80083fe:	f47f aebc 	bne.w	800817a <_strtod_l+0x72>
 8008402:	2b00      	cmp	r3, #0
 8008404:	f47f aed4 	bne.w	80081b0 <_strtod_l+0xa8>
 8008408:	2a69      	cmp	r2, #105	@ 0x69
 800840a:	d028      	beq.n	800845e <_strtod_l+0x356>
 800840c:	dc25      	bgt.n	800845a <_strtod_l+0x352>
 800840e:	2a49      	cmp	r2, #73	@ 0x49
 8008410:	d025      	beq.n	800845e <_strtod_l+0x356>
 8008412:	2a4e      	cmp	r2, #78	@ 0x4e
 8008414:	f47f aecc 	bne.w	80081b0 <_strtod_l+0xa8>
 8008418:	499a      	ldr	r1, [pc, #616]	@ (8008684 <_strtod_l+0x57c>)
 800841a:	a819      	add	r0, sp, #100	@ 0x64
 800841c:	f001 f9ec 	bl	80097f8 <__match>
 8008420:	2800      	cmp	r0, #0
 8008422:	f43f aec5 	beq.w	80081b0 <_strtod_l+0xa8>
 8008426:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b28      	cmp	r3, #40	@ 0x28
 800842c:	d12e      	bne.n	800848c <_strtod_l+0x384>
 800842e:	4996      	ldr	r1, [pc, #600]	@ (8008688 <_strtod_l+0x580>)
 8008430:	aa1c      	add	r2, sp, #112	@ 0x70
 8008432:	a819      	add	r0, sp, #100	@ 0x64
 8008434:	f001 f9f4 	bl	8009820 <__hexnan>
 8008438:	2805      	cmp	r0, #5
 800843a:	d127      	bne.n	800848c <_strtod_l+0x384>
 800843c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800843e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008442:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008446:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800844a:	e696      	b.n	800817a <_strtod_l+0x72>
 800844c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800844e:	fb08 2101 	mla	r1, r8, r1, r2
 8008452:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008456:	9209      	str	r2, [sp, #36]	@ 0x24
 8008458:	e7b5      	b.n	80083c6 <_strtod_l+0x2be>
 800845a:	2a6e      	cmp	r2, #110	@ 0x6e
 800845c:	e7da      	b.n	8008414 <_strtod_l+0x30c>
 800845e:	498b      	ldr	r1, [pc, #556]	@ (800868c <_strtod_l+0x584>)
 8008460:	a819      	add	r0, sp, #100	@ 0x64
 8008462:	f001 f9c9 	bl	80097f8 <__match>
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aea2 	beq.w	80081b0 <_strtod_l+0xa8>
 800846c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800846e:	4988      	ldr	r1, [pc, #544]	@ (8008690 <_strtod_l+0x588>)
 8008470:	3b01      	subs	r3, #1
 8008472:	a819      	add	r0, sp, #100	@ 0x64
 8008474:	9319      	str	r3, [sp, #100]	@ 0x64
 8008476:	f001 f9bf 	bl	80097f8 <__match>
 800847a:	b910      	cbnz	r0, 8008482 <_strtod_l+0x37a>
 800847c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800847e:	3301      	adds	r3, #1
 8008480:	9319      	str	r3, [sp, #100]	@ 0x64
 8008482:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80086a0 <_strtod_l+0x598>
 8008486:	f04f 0a00 	mov.w	sl, #0
 800848a:	e676      	b.n	800817a <_strtod_l+0x72>
 800848c:	4881      	ldr	r0, [pc, #516]	@ (8008694 <_strtod_l+0x58c>)
 800848e:	f000 feef 	bl	8009270 <nan>
 8008492:	ec5b ab10 	vmov	sl, fp, d0
 8008496:	e670      	b.n	800817a <_strtod_l+0x72>
 8008498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800849a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800849c:	eba8 0303 	sub.w	r3, r8, r3
 80084a0:	f1b9 0f00 	cmp.w	r9, #0
 80084a4:	bf08      	it	eq
 80084a6:	46a9      	moveq	r9, r5
 80084a8:	2d10      	cmp	r5, #16
 80084aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ac:	462c      	mov	r4, r5
 80084ae:	bfa8      	it	ge
 80084b0:	2410      	movge	r4, #16
 80084b2:	f7f8 f83f 	bl	8000534 <__aeabi_ui2d>
 80084b6:	2d09      	cmp	r5, #9
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	dc13      	bgt.n	80084e6 <_strtod_l+0x3de>
 80084be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f43f ae5a 	beq.w	800817a <_strtod_l+0x72>
 80084c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c8:	dd78      	ble.n	80085bc <_strtod_l+0x4b4>
 80084ca:	2b16      	cmp	r3, #22
 80084cc:	dc5f      	bgt.n	800858e <_strtod_l+0x486>
 80084ce:	4972      	ldr	r1, [pc, #456]	@ (8008698 <_strtod_l+0x590>)
 80084d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d8:	4652      	mov	r2, sl
 80084da:	465b      	mov	r3, fp
 80084dc:	f7f8 f8a4 	bl	8000628 <__aeabi_dmul>
 80084e0:	4682      	mov	sl, r0
 80084e2:	468b      	mov	fp, r1
 80084e4:	e649      	b.n	800817a <_strtod_l+0x72>
 80084e6:	4b6c      	ldr	r3, [pc, #432]	@ (8008698 <_strtod_l+0x590>)
 80084e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80084f0:	f7f8 f89a 	bl	8000628 <__aeabi_dmul>
 80084f4:	4682      	mov	sl, r0
 80084f6:	4638      	mov	r0, r7
 80084f8:	468b      	mov	fp, r1
 80084fa:	f7f8 f81b 	bl	8000534 <__aeabi_ui2d>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4650      	mov	r0, sl
 8008504:	4659      	mov	r1, fp
 8008506:	f7f7 fed9 	bl	80002bc <__adddf3>
 800850a:	2d0f      	cmp	r5, #15
 800850c:	4682      	mov	sl, r0
 800850e:	468b      	mov	fp, r1
 8008510:	ddd5      	ble.n	80084be <_strtod_l+0x3b6>
 8008512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008514:	1b2c      	subs	r4, r5, r4
 8008516:	441c      	add	r4, r3
 8008518:	2c00      	cmp	r4, #0
 800851a:	f340 8093 	ble.w	8008644 <_strtod_l+0x53c>
 800851e:	f014 030f 	ands.w	r3, r4, #15
 8008522:	d00a      	beq.n	800853a <_strtod_l+0x432>
 8008524:	495c      	ldr	r1, [pc, #368]	@ (8008698 <_strtod_l+0x590>)
 8008526:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800852a:	4652      	mov	r2, sl
 800852c:	465b      	mov	r3, fp
 800852e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008532:	f7f8 f879 	bl	8000628 <__aeabi_dmul>
 8008536:	4682      	mov	sl, r0
 8008538:	468b      	mov	fp, r1
 800853a:	f034 040f 	bics.w	r4, r4, #15
 800853e:	d073      	beq.n	8008628 <_strtod_l+0x520>
 8008540:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008544:	dd49      	ble.n	80085da <_strtod_l+0x4d2>
 8008546:	2400      	movs	r4, #0
 8008548:	46a0      	mov	r8, r4
 800854a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800854c:	46a1      	mov	r9, r4
 800854e:	9a05      	ldr	r2, [sp, #20]
 8008550:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80086a0 <_strtod_l+0x598>
 8008554:	2322      	movs	r3, #34	@ 0x22
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	f04f 0a00 	mov.w	sl, #0
 800855c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	f43f ae0b 	beq.w	800817a <_strtod_l+0x72>
 8008564:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008566:	9805      	ldr	r0, [sp, #20]
 8008568:	f7ff f946 	bl	80077f8 <_Bfree>
 800856c:	9805      	ldr	r0, [sp, #20]
 800856e:	4649      	mov	r1, r9
 8008570:	f7ff f942 	bl	80077f8 <_Bfree>
 8008574:	9805      	ldr	r0, [sp, #20]
 8008576:	4641      	mov	r1, r8
 8008578:	f7ff f93e 	bl	80077f8 <_Bfree>
 800857c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800857e:	9805      	ldr	r0, [sp, #20]
 8008580:	f7ff f93a 	bl	80077f8 <_Bfree>
 8008584:	9805      	ldr	r0, [sp, #20]
 8008586:	4621      	mov	r1, r4
 8008588:	f7ff f936 	bl	80077f8 <_Bfree>
 800858c:	e5f5      	b.n	800817a <_strtod_l+0x72>
 800858e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008590:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008594:	4293      	cmp	r3, r2
 8008596:	dbbc      	blt.n	8008512 <_strtod_l+0x40a>
 8008598:	4c3f      	ldr	r4, [pc, #252]	@ (8008698 <_strtod_l+0x590>)
 800859a:	f1c5 050f 	rsb	r5, r5, #15
 800859e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085a2:	4652      	mov	r2, sl
 80085a4:	465b      	mov	r3, fp
 80085a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085aa:	f7f8 f83d 	bl	8000628 <__aeabi_dmul>
 80085ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b0:	1b5d      	subs	r5, r3, r5
 80085b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085ba:	e78f      	b.n	80084dc <_strtod_l+0x3d4>
 80085bc:	3316      	adds	r3, #22
 80085be:	dba8      	blt.n	8008512 <_strtod_l+0x40a>
 80085c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085c2:	eba3 0808 	sub.w	r8, r3, r8
 80085c6:	4b34      	ldr	r3, [pc, #208]	@ (8008698 <_strtod_l+0x590>)
 80085c8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085cc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	f7f8 f952 	bl	800087c <__aeabi_ddiv>
 80085d8:	e782      	b.n	80084e0 <_strtod_l+0x3d8>
 80085da:	2300      	movs	r3, #0
 80085dc:	4f2f      	ldr	r7, [pc, #188]	@ (800869c <_strtod_l+0x594>)
 80085de:	1124      	asrs	r4, r4, #4
 80085e0:	4650      	mov	r0, sl
 80085e2:	4659      	mov	r1, fp
 80085e4:	461e      	mov	r6, r3
 80085e6:	2c01      	cmp	r4, #1
 80085e8:	dc21      	bgt.n	800862e <_strtod_l+0x526>
 80085ea:	b10b      	cbz	r3, 80085f0 <_strtod_l+0x4e8>
 80085ec:	4682      	mov	sl, r0
 80085ee:	468b      	mov	fp, r1
 80085f0:	492a      	ldr	r1, [pc, #168]	@ (800869c <_strtod_l+0x594>)
 80085f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80085f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80085fa:	4652      	mov	r2, sl
 80085fc:	465b      	mov	r3, fp
 80085fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008602:	f7f8 f811 	bl	8000628 <__aeabi_dmul>
 8008606:	4b26      	ldr	r3, [pc, #152]	@ (80086a0 <_strtod_l+0x598>)
 8008608:	460a      	mov	r2, r1
 800860a:	400b      	ands	r3, r1
 800860c:	4925      	ldr	r1, [pc, #148]	@ (80086a4 <_strtod_l+0x59c>)
 800860e:	428b      	cmp	r3, r1
 8008610:	4682      	mov	sl, r0
 8008612:	d898      	bhi.n	8008546 <_strtod_l+0x43e>
 8008614:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008618:	428b      	cmp	r3, r1
 800861a:	bf86      	itte	hi
 800861c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80086a8 <_strtod_l+0x5a0>
 8008620:	f04f 3aff 	movhi.w	sl, #4294967295
 8008624:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008628:	2300      	movs	r3, #0
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	e076      	b.n	800871c <_strtod_l+0x614>
 800862e:	07e2      	lsls	r2, r4, #31
 8008630:	d504      	bpl.n	800863c <_strtod_l+0x534>
 8008632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008636:	f7f7 fff7 	bl	8000628 <__aeabi_dmul>
 800863a:	2301      	movs	r3, #1
 800863c:	3601      	adds	r6, #1
 800863e:	1064      	asrs	r4, r4, #1
 8008640:	3708      	adds	r7, #8
 8008642:	e7d0      	b.n	80085e6 <_strtod_l+0x4de>
 8008644:	d0f0      	beq.n	8008628 <_strtod_l+0x520>
 8008646:	4264      	negs	r4, r4
 8008648:	f014 020f 	ands.w	r2, r4, #15
 800864c:	d00a      	beq.n	8008664 <_strtod_l+0x55c>
 800864e:	4b12      	ldr	r3, [pc, #72]	@ (8008698 <_strtod_l+0x590>)
 8008650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008654:	4650      	mov	r0, sl
 8008656:	4659      	mov	r1, fp
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f8 f90e 	bl	800087c <__aeabi_ddiv>
 8008660:	4682      	mov	sl, r0
 8008662:	468b      	mov	fp, r1
 8008664:	1124      	asrs	r4, r4, #4
 8008666:	d0df      	beq.n	8008628 <_strtod_l+0x520>
 8008668:	2c1f      	cmp	r4, #31
 800866a:	dd1f      	ble.n	80086ac <_strtod_l+0x5a4>
 800866c:	2400      	movs	r4, #0
 800866e:	46a0      	mov	r8, r4
 8008670:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008672:	46a1      	mov	r9, r4
 8008674:	9a05      	ldr	r2, [sp, #20]
 8008676:	2322      	movs	r3, #34	@ 0x22
 8008678:	f04f 0a00 	mov.w	sl, #0
 800867c:	f04f 0b00 	mov.w	fp, #0
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e76b      	b.n	800855c <_strtod_l+0x454>
 8008684:	0800a59b 	.word	0x0800a59b
 8008688:	0800a860 	.word	0x0800a860
 800868c:	0800a593 	.word	0x0800a593
 8008690:	0800a5ca 	.word	0x0800a5ca
 8008694:	0800a703 	.word	0x0800a703
 8008698:	0800a798 	.word	0x0800a798
 800869c:	0800a770 	.word	0x0800a770
 80086a0:	7ff00000 	.word	0x7ff00000
 80086a4:	7ca00000 	.word	0x7ca00000
 80086a8:	7fefffff 	.word	0x7fefffff
 80086ac:	f014 0310 	ands.w	r3, r4, #16
 80086b0:	bf18      	it	ne
 80086b2:	236a      	movne	r3, #106	@ 0x6a
 80086b4:	4ea9      	ldr	r6, [pc, #676]	@ (800895c <_strtod_l+0x854>)
 80086b6:	9308      	str	r3, [sp, #32]
 80086b8:	4650      	mov	r0, sl
 80086ba:	4659      	mov	r1, fp
 80086bc:	2300      	movs	r3, #0
 80086be:	07e7      	lsls	r7, r4, #31
 80086c0:	d504      	bpl.n	80086cc <_strtod_l+0x5c4>
 80086c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086c6:	f7f7 ffaf 	bl	8000628 <__aeabi_dmul>
 80086ca:	2301      	movs	r3, #1
 80086cc:	1064      	asrs	r4, r4, #1
 80086ce:	f106 0608 	add.w	r6, r6, #8
 80086d2:	d1f4      	bne.n	80086be <_strtod_l+0x5b6>
 80086d4:	b10b      	cbz	r3, 80086da <_strtod_l+0x5d2>
 80086d6:	4682      	mov	sl, r0
 80086d8:	468b      	mov	fp, r1
 80086da:	9b08      	ldr	r3, [sp, #32]
 80086dc:	b1b3      	cbz	r3, 800870c <_strtod_l+0x604>
 80086de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	4659      	mov	r1, fp
 80086ea:	dd0f      	ble.n	800870c <_strtod_l+0x604>
 80086ec:	2b1f      	cmp	r3, #31
 80086ee:	dd56      	ble.n	800879e <_strtod_l+0x696>
 80086f0:	2b34      	cmp	r3, #52	@ 0x34
 80086f2:	bfde      	ittt	le
 80086f4:	f04f 33ff 	movle.w	r3, #4294967295
 80086f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80086fc:	4093      	lslle	r3, r2
 80086fe:	f04f 0a00 	mov.w	sl, #0
 8008702:	bfcc      	ite	gt
 8008704:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008708:	ea03 0b01 	andle.w	fp, r3, r1
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	f7f8 f9f0 	bl	8000af8 <__aeabi_dcmpeq>
 8008718:	2800      	cmp	r0, #0
 800871a:	d1a7      	bne.n	800866c <_strtod_l+0x564>
 800871c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008722:	9805      	ldr	r0, [sp, #20]
 8008724:	462b      	mov	r3, r5
 8008726:	464a      	mov	r2, r9
 8008728:	f7ff f8ce 	bl	80078c8 <__s2b>
 800872c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f af09 	beq.w	8008546 <_strtod_l+0x43e>
 8008734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008738:	2a00      	cmp	r2, #0
 800873a:	eba3 0308 	sub.w	r3, r3, r8
 800873e:	bfa8      	it	ge
 8008740:	2300      	movge	r3, #0
 8008742:	9312      	str	r3, [sp, #72]	@ 0x48
 8008744:	2400      	movs	r4, #0
 8008746:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800874a:	9316      	str	r3, [sp, #88]	@ 0x58
 800874c:	46a0      	mov	r8, r4
 800874e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008750:	9805      	ldr	r0, [sp, #20]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	f7ff f810 	bl	8007778 <_Balloc>
 8008758:	4681      	mov	r9, r0
 800875a:	2800      	cmp	r0, #0
 800875c:	f43f aef7 	beq.w	800854e <_strtod_l+0x446>
 8008760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	3202      	adds	r2, #2
 8008766:	f103 010c 	add.w	r1, r3, #12
 800876a:	0092      	lsls	r2, r2, #2
 800876c:	300c      	adds	r0, #12
 800876e:	f000 fd71 	bl	8009254 <memcpy>
 8008772:	ec4b ab10 	vmov	d0, sl, fp
 8008776:	9805      	ldr	r0, [sp, #20]
 8008778:	aa1c      	add	r2, sp, #112	@ 0x70
 800877a:	a91b      	add	r1, sp, #108	@ 0x6c
 800877c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008780:	f7ff fbd6 	bl	8007f30 <__d2b>
 8008784:	901a      	str	r0, [sp, #104]	@ 0x68
 8008786:	2800      	cmp	r0, #0
 8008788:	f43f aee1 	beq.w	800854e <_strtod_l+0x446>
 800878c:	9805      	ldr	r0, [sp, #20]
 800878e:	2101      	movs	r1, #1
 8008790:	f7ff f930 	bl	80079f4 <__i2b>
 8008794:	4680      	mov	r8, r0
 8008796:	b948      	cbnz	r0, 80087ac <_strtod_l+0x6a4>
 8008798:	f04f 0800 	mov.w	r8, #0
 800879c:	e6d7      	b.n	800854e <_strtod_l+0x446>
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	ea03 0a0a 	and.w	sl, r3, sl
 80087aa:	e7af      	b.n	800870c <_strtod_l+0x604>
 80087ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	bfab      	itete	ge
 80087b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087bc:	bfac      	ite	ge
 80087be:	18ef      	addge	r7, r5, r3
 80087c0:	1b5e      	sublt	r6, r3, r5
 80087c2:	9b08      	ldr	r3, [sp, #32]
 80087c4:	1aed      	subs	r5, r5, r3
 80087c6:	4415      	add	r5, r2
 80087c8:	4b65      	ldr	r3, [pc, #404]	@ (8008960 <_strtod_l+0x858>)
 80087ca:	3d01      	subs	r5, #1
 80087cc:	429d      	cmp	r5, r3
 80087ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087d2:	da50      	bge.n	8008876 <_strtod_l+0x76e>
 80087d4:	1b5b      	subs	r3, r3, r5
 80087d6:	2b1f      	cmp	r3, #31
 80087d8:	eba2 0203 	sub.w	r2, r2, r3
 80087dc:	f04f 0101 	mov.w	r1, #1
 80087e0:	dc3d      	bgt.n	800885e <_strtod_l+0x756>
 80087e2:	fa01 f303 	lsl.w	r3, r1, r3
 80087e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087e8:	2300      	movs	r3, #0
 80087ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80087ec:	18bd      	adds	r5, r7, r2
 80087ee:	9b08      	ldr	r3, [sp, #32]
 80087f0:	42af      	cmp	r7, r5
 80087f2:	4416      	add	r6, r2
 80087f4:	441e      	add	r6, r3
 80087f6:	463b      	mov	r3, r7
 80087f8:	bfa8      	it	ge
 80087fa:	462b      	movge	r3, r5
 80087fc:	42b3      	cmp	r3, r6
 80087fe:	bfa8      	it	ge
 8008800:	4633      	movge	r3, r6
 8008802:	2b00      	cmp	r3, #0
 8008804:	bfc2      	ittt	gt
 8008806:	1aed      	subgt	r5, r5, r3
 8008808:	1af6      	subgt	r6, r6, r3
 800880a:	1aff      	subgt	r7, r7, r3
 800880c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800880e:	2b00      	cmp	r3, #0
 8008810:	dd16      	ble.n	8008840 <_strtod_l+0x738>
 8008812:	4641      	mov	r1, r8
 8008814:	9805      	ldr	r0, [sp, #20]
 8008816:	461a      	mov	r2, r3
 8008818:	f7ff f9a4 	bl	8007b64 <__pow5mult>
 800881c:	4680      	mov	r8, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	d0ba      	beq.n	8008798 <_strtod_l+0x690>
 8008822:	4601      	mov	r1, r0
 8008824:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008826:	9805      	ldr	r0, [sp, #20]
 8008828:	f7ff f8fa 	bl	8007a20 <__multiply>
 800882c:	900a      	str	r0, [sp, #40]	@ 0x28
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f ae8d 	beq.w	800854e <_strtod_l+0x446>
 8008834:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008836:	9805      	ldr	r0, [sp, #20]
 8008838:	f7fe ffde 	bl	80077f8 <_Bfree>
 800883c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800883e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008840:	2d00      	cmp	r5, #0
 8008842:	dc1d      	bgt.n	8008880 <_strtod_l+0x778>
 8008844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008846:	2b00      	cmp	r3, #0
 8008848:	dd23      	ble.n	8008892 <_strtod_l+0x78a>
 800884a:	4649      	mov	r1, r9
 800884c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	f7ff f988 	bl	8007b64 <__pow5mult>
 8008854:	4681      	mov	r9, r0
 8008856:	b9e0      	cbnz	r0, 8008892 <_strtod_l+0x78a>
 8008858:	f04f 0900 	mov.w	r9, #0
 800885c:	e677      	b.n	800854e <_strtod_l+0x446>
 800885e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008862:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008866:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800886a:	35e2      	adds	r5, #226	@ 0xe2
 800886c:	fa01 f305 	lsl.w	r3, r1, r5
 8008870:	9310      	str	r3, [sp, #64]	@ 0x40
 8008872:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008874:	e7ba      	b.n	80087ec <_strtod_l+0x6e4>
 8008876:	2300      	movs	r3, #0
 8008878:	9310      	str	r3, [sp, #64]	@ 0x40
 800887a:	2301      	movs	r3, #1
 800887c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800887e:	e7b5      	b.n	80087ec <_strtod_l+0x6e4>
 8008880:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008882:	9805      	ldr	r0, [sp, #20]
 8008884:	462a      	mov	r2, r5
 8008886:	f7ff f9c7 	bl	8007c18 <__lshift>
 800888a:	901a      	str	r0, [sp, #104]	@ 0x68
 800888c:	2800      	cmp	r0, #0
 800888e:	d1d9      	bne.n	8008844 <_strtod_l+0x73c>
 8008890:	e65d      	b.n	800854e <_strtod_l+0x446>
 8008892:	2e00      	cmp	r6, #0
 8008894:	dd07      	ble.n	80088a6 <_strtod_l+0x79e>
 8008896:	4649      	mov	r1, r9
 8008898:	9805      	ldr	r0, [sp, #20]
 800889a:	4632      	mov	r2, r6
 800889c:	f7ff f9bc 	bl	8007c18 <__lshift>
 80088a0:	4681      	mov	r9, r0
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d0d8      	beq.n	8008858 <_strtod_l+0x750>
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	dd08      	ble.n	80088bc <_strtod_l+0x7b4>
 80088aa:	4641      	mov	r1, r8
 80088ac:	9805      	ldr	r0, [sp, #20]
 80088ae:	463a      	mov	r2, r7
 80088b0:	f7ff f9b2 	bl	8007c18 <__lshift>
 80088b4:	4680      	mov	r8, r0
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f43f ae49 	beq.w	800854e <_strtod_l+0x446>
 80088bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	464a      	mov	r2, r9
 80088c2:	f7ff fa31 	bl	8007d28 <__mdiff>
 80088c6:	4604      	mov	r4, r0
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f43f ae40 	beq.w	800854e <_strtod_l+0x446>
 80088ce:	68c3      	ldr	r3, [r0, #12]
 80088d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088d2:	2300      	movs	r3, #0
 80088d4:	60c3      	str	r3, [r0, #12]
 80088d6:	4641      	mov	r1, r8
 80088d8:	f7ff fa0a 	bl	8007cf0 <__mcmp>
 80088dc:	2800      	cmp	r0, #0
 80088de:	da45      	bge.n	800896c <_strtod_l+0x864>
 80088e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e2:	ea53 030a 	orrs.w	r3, r3, sl
 80088e6:	d16b      	bne.n	80089c0 <_strtod_l+0x8b8>
 80088e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d167      	bne.n	80089c0 <_strtod_l+0x8b8>
 80088f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088f4:	0d1b      	lsrs	r3, r3, #20
 80088f6:	051b      	lsls	r3, r3, #20
 80088f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80088fc:	d960      	bls.n	80089c0 <_strtod_l+0x8b8>
 80088fe:	6963      	ldr	r3, [r4, #20]
 8008900:	b913      	cbnz	r3, 8008908 <_strtod_l+0x800>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	2b01      	cmp	r3, #1
 8008906:	dd5b      	ble.n	80089c0 <_strtod_l+0x8b8>
 8008908:	4621      	mov	r1, r4
 800890a:	2201      	movs	r2, #1
 800890c:	9805      	ldr	r0, [sp, #20]
 800890e:	f7ff f983 	bl	8007c18 <__lshift>
 8008912:	4641      	mov	r1, r8
 8008914:	4604      	mov	r4, r0
 8008916:	f7ff f9eb 	bl	8007cf0 <__mcmp>
 800891a:	2800      	cmp	r0, #0
 800891c:	dd50      	ble.n	80089c0 <_strtod_l+0x8b8>
 800891e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008922:	9a08      	ldr	r2, [sp, #32]
 8008924:	0d1b      	lsrs	r3, r3, #20
 8008926:	051b      	lsls	r3, r3, #20
 8008928:	2a00      	cmp	r2, #0
 800892a:	d06a      	beq.n	8008a02 <_strtod_l+0x8fa>
 800892c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008930:	d867      	bhi.n	8008a02 <_strtod_l+0x8fa>
 8008932:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008936:	f67f ae9d 	bls.w	8008674 <_strtod_l+0x56c>
 800893a:	4b0a      	ldr	r3, [pc, #40]	@ (8008964 <_strtod_l+0x85c>)
 800893c:	4650      	mov	r0, sl
 800893e:	4659      	mov	r1, fp
 8008940:	2200      	movs	r2, #0
 8008942:	f7f7 fe71 	bl	8000628 <__aeabi_dmul>
 8008946:	4b08      	ldr	r3, [pc, #32]	@ (8008968 <_strtod_l+0x860>)
 8008948:	400b      	ands	r3, r1
 800894a:	4682      	mov	sl, r0
 800894c:	468b      	mov	fp, r1
 800894e:	2b00      	cmp	r3, #0
 8008950:	f47f ae08 	bne.w	8008564 <_strtod_l+0x45c>
 8008954:	9a05      	ldr	r2, [sp, #20]
 8008956:	2322      	movs	r3, #34	@ 0x22
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	e603      	b.n	8008564 <_strtod_l+0x45c>
 800895c:	0800a888 	.word	0x0800a888
 8008960:	fffffc02 	.word	0xfffffc02
 8008964:	39500000 	.word	0x39500000
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008970:	d165      	bne.n	8008a3e <_strtod_l+0x936>
 8008972:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008978:	b35a      	cbz	r2, 80089d2 <_strtod_l+0x8ca>
 800897a:	4a9f      	ldr	r2, [pc, #636]	@ (8008bf8 <_strtod_l+0xaf0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d12b      	bne.n	80089d8 <_strtod_l+0x8d0>
 8008980:	9b08      	ldr	r3, [sp, #32]
 8008982:	4651      	mov	r1, sl
 8008984:	b303      	cbz	r3, 80089c8 <_strtod_l+0x8c0>
 8008986:	4b9d      	ldr	r3, [pc, #628]	@ (8008bfc <_strtod_l+0xaf4>)
 8008988:	465a      	mov	r2, fp
 800898a:	4013      	ands	r3, r2
 800898c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	d81b      	bhi.n	80089ce <_strtod_l+0x8c6>
 8008996:	0d1b      	lsrs	r3, r3, #20
 8008998:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d119      	bne.n	80089d8 <_strtod_l+0x8d0>
 80089a4:	4b96      	ldr	r3, [pc, #600]	@ (8008c00 <_strtod_l+0xaf8>)
 80089a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d102      	bne.n	80089b2 <_strtod_l+0x8aa>
 80089ac:	3101      	adds	r1, #1
 80089ae:	f43f adce 	beq.w	800854e <_strtod_l+0x446>
 80089b2:	4b92      	ldr	r3, [pc, #584]	@ (8008bfc <_strtod_l+0xaf4>)
 80089b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b6:	401a      	ands	r2, r3
 80089b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089bc:	f04f 0a00 	mov.w	sl, #0
 80089c0:	9b08      	ldr	r3, [sp, #32]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1b9      	bne.n	800893a <_strtod_l+0x832>
 80089c6:	e5cd      	b.n	8008564 <_strtod_l+0x45c>
 80089c8:	f04f 33ff 	mov.w	r3, #4294967295
 80089cc:	e7e8      	b.n	80089a0 <_strtod_l+0x898>
 80089ce:	4613      	mov	r3, r2
 80089d0:	e7e6      	b.n	80089a0 <_strtod_l+0x898>
 80089d2:	ea53 030a 	orrs.w	r3, r3, sl
 80089d6:	d0a2      	beq.n	800891e <_strtod_l+0x816>
 80089d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089da:	b1db      	cbz	r3, 8008a14 <_strtod_l+0x90c>
 80089dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089de:	4213      	tst	r3, r2
 80089e0:	d0ee      	beq.n	80089c0 <_strtod_l+0x8b8>
 80089e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e4:	9a08      	ldr	r2, [sp, #32]
 80089e6:	4650      	mov	r0, sl
 80089e8:	4659      	mov	r1, fp
 80089ea:	b1bb      	cbz	r3, 8008a1c <_strtod_l+0x914>
 80089ec:	f7ff fb6e 	bl	80080cc <sulp>
 80089f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089f4:	ec53 2b10 	vmov	r2, r3, d0
 80089f8:	f7f7 fc60 	bl	80002bc <__adddf3>
 80089fc:	4682      	mov	sl, r0
 80089fe:	468b      	mov	fp, r1
 8008a00:	e7de      	b.n	80089c0 <_strtod_l+0x8b8>
 8008a02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a0e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a12:	e7d5      	b.n	80089c0 <_strtod_l+0x8b8>
 8008a14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a16:	ea13 0f0a 	tst.w	r3, sl
 8008a1a:	e7e1      	b.n	80089e0 <_strtod_l+0x8d8>
 8008a1c:	f7ff fb56 	bl	80080cc <sulp>
 8008a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a24:	ec53 2b10 	vmov	r2, r3, d0
 8008a28:	f7f7 fc46 	bl	80002b8 <__aeabi_dsub>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	f7f8 f860 	bl	8000af8 <__aeabi_dcmpeq>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d0c1      	beq.n	80089c0 <_strtod_l+0x8b8>
 8008a3c:	e61a      	b.n	8008674 <_strtod_l+0x56c>
 8008a3e:	4641      	mov	r1, r8
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7ff facd 	bl	8007fe0 <__ratio>
 8008a46:	ec57 6b10 	vmov	r6, r7, d0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a50:	4630      	mov	r0, r6
 8008a52:	4639      	mov	r1, r7
 8008a54:	f7f8 f864 	bl	8000b20 <__aeabi_dcmple>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d06f      	beq.n	8008b3c <_strtod_l+0xa34>
 8008a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d17a      	bne.n	8008b58 <_strtod_l+0xa50>
 8008a62:	f1ba 0f00 	cmp.w	sl, #0
 8008a66:	d158      	bne.n	8008b1a <_strtod_l+0xa12>
 8008a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d15a      	bne.n	8008b28 <_strtod_l+0xa20>
 8008a72:	4b64      	ldr	r3, [pc, #400]	@ (8008c04 <_strtod_l+0xafc>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	4630      	mov	r0, r6
 8008a78:	4639      	mov	r1, r7
 8008a7a:	f7f8 f847 	bl	8000b0c <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d159      	bne.n	8008b36 <_strtod_l+0xa2e>
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	4b60      	ldr	r3, [pc, #384]	@ (8008c08 <_strtod_l+0xb00>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f7f7 fdcd 	bl	8000628 <__aeabi_dmul>
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460f      	mov	r7, r1
 8008a92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008a96:	9606      	str	r6, [sp, #24]
 8008a98:	9307      	str	r3, [sp, #28]
 8008a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a9e:	4d57      	ldr	r5, [pc, #348]	@ (8008bfc <_strtod_l+0xaf4>)
 8008aa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aa6:	401d      	ands	r5, r3
 8008aa8:	4b58      	ldr	r3, [pc, #352]	@ (8008c0c <_strtod_l+0xb04>)
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	f040 80b2 	bne.w	8008c14 <_strtod_l+0xb0c>
 8008ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ab2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008ab6:	ec4b ab10 	vmov	d0, sl, fp
 8008aba:	f7ff f9c9 	bl	8007e50 <__ulp>
 8008abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ac2:	ec51 0b10 	vmov	r0, r1, d0
 8008ac6:	f7f7 fdaf 	bl	8000628 <__aeabi_dmul>
 8008aca:	4652      	mov	r2, sl
 8008acc:	465b      	mov	r3, fp
 8008ace:	f7f7 fbf5 	bl	80002bc <__adddf3>
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4949      	ldr	r1, [pc, #292]	@ (8008bfc <_strtod_l+0xaf4>)
 8008ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8008c10 <_strtod_l+0xb08>)
 8008ad8:	4019      	ands	r1, r3
 8008ada:	4291      	cmp	r1, r2
 8008adc:	4682      	mov	sl, r0
 8008ade:	d942      	bls.n	8008b66 <_strtod_l+0xa5e>
 8008ae0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ae2:	4b47      	ldr	r3, [pc, #284]	@ (8008c00 <_strtod_l+0xaf8>)
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d103      	bne.n	8008af0 <_strtod_l+0x9e8>
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008aea:	3301      	adds	r3, #1
 8008aec:	f43f ad2f 	beq.w	800854e <_strtod_l+0x446>
 8008af0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c00 <_strtod_l+0xaf8>
 8008af4:	f04f 3aff 	mov.w	sl, #4294967295
 8008af8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008afa:	9805      	ldr	r0, [sp, #20]
 8008afc:	f7fe fe7c 	bl	80077f8 <_Bfree>
 8008b00:	9805      	ldr	r0, [sp, #20]
 8008b02:	4649      	mov	r1, r9
 8008b04:	f7fe fe78 	bl	80077f8 <_Bfree>
 8008b08:	9805      	ldr	r0, [sp, #20]
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	f7fe fe74 	bl	80077f8 <_Bfree>
 8008b10:	9805      	ldr	r0, [sp, #20]
 8008b12:	4621      	mov	r1, r4
 8008b14:	f7fe fe70 	bl	80077f8 <_Bfree>
 8008b18:	e619      	b.n	800874e <_strtod_l+0x646>
 8008b1a:	f1ba 0f01 	cmp.w	sl, #1
 8008b1e:	d103      	bne.n	8008b28 <_strtod_l+0xa20>
 8008b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f43f ada6 	beq.w	8008674 <_strtod_l+0x56c>
 8008b28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008bd8 <_strtod_l+0xad0>
 8008b2c:	4f35      	ldr	r7, [pc, #212]	@ (8008c04 <_strtod_l+0xafc>)
 8008b2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b32:	2600      	movs	r6, #0
 8008b34:	e7b1      	b.n	8008a9a <_strtod_l+0x992>
 8008b36:	4f34      	ldr	r7, [pc, #208]	@ (8008c08 <_strtod_l+0xb00>)
 8008b38:	2600      	movs	r6, #0
 8008b3a:	e7aa      	b.n	8008a92 <_strtod_l+0x98a>
 8008b3c:	4b32      	ldr	r3, [pc, #200]	@ (8008c08 <_strtod_l+0xb00>)
 8008b3e:	4630      	mov	r0, r6
 8008b40:	4639      	mov	r1, r7
 8008b42:	2200      	movs	r2, #0
 8008b44:	f7f7 fd70 	bl	8000628 <__aeabi_dmul>
 8008b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d09f      	beq.n	8008a92 <_strtod_l+0x98a>
 8008b52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b56:	e7a0      	b.n	8008a9a <_strtod_l+0x992>
 8008b58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008be0 <_strtod_l+0xad8>
 8008b5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b60:	ec57 6b17 	vmov	r6, r7, d7
 8008b64:	e799      	b.n	8008a9a <_strtod_l+0x992>
 8008b66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1c1      	bne.n	8008af8 <_strtod_l+0x9f0>
 8008b74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b78:	0d1b      	lsrs	r3, r3, #20
 8008b7a:	051b      	lsls	r3, r3, #20
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	d1bb      	bne.n	8008af8 <_strtod_l+0x9f0>
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f8 f8b0 	bl	8000ce8 <__aeabi_d2lz>
 8008b88:	f7f7 fd20 	bl	80005cc <__aeabi_l2d>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fb90 	bl	80002b8 <__aeabi_dsub>
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ba0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ba6:	ea46 060a 	orr.w	r6, r6, sl
 8008baa:	431e      	orrs	r6, r3
 8008bac:	d06f      	beq.n	8008c8e <_strtod_l+0xb86>
 8008bae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008be8 <_strtod_l+0xae0>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 ffaa 	bl	8000b0c <__aeabi_dcmplt>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f47f acd3 	bne.w	8008564 <_strtod_l+0x45c>
 8008bbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8008bf0 <_strtod_l+0xae8>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bc8:	f7f7 ffbe 	bl	8000b48 <__aeabi_dcmpgt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d093      	beq.n	8008af8 <_strtod_l+0x9f0>
 8008bd0:	e4c8      	b.n	8008564 <_strtod_l+0x45c>
 8008bd2:	bf00      	nop
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	bff00000 	.word	0xbff00000
 8008be0:	00000000 	.word	0x00000000
 8008be4:	3ff00000 	.word	0x3ff00000
 8008be8:	94a03595 	.word	0x94a03595
 8008bec:	3fdfffff 	.word	0x3fdfffff
 8008bf0:	35afe535 	.word	0x35afe535
 8008bf4:	3fe00000 	.word	0x3fe00000
 8008bf8:	000fffff 	.word	0x000fffff
 8008bfc:	7ff00000 	.word	0x7ff00000
 8008c00:	7fefffff 	.word	0x7fefffff
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	3fe00000 	.word	0x3fe00000
 8008c0c:	7fe00000 	.word	0x7fe00000
 8008c10:	7c9fffff 	.word	0x7c9fffff
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	b323      	cbz	r3, 8008c62 <_strtod_l+0xb5a>
 8008c18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c1c:	d821      	bhi.n	8008c62 <_strtod_l+0xb5a>
 8008c1e:	a328      	add	r3, pc, #160	@ (adr r3, 8008cc0 <_strtod_l+0xbb8>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	4630      	mov	r0, r6
 8008c26:	4639      	mov	r1, r7
 8008c28:	f7f7 ff7a 	bl	8000b20 <__aeabi_dcmple>
 8008c2c:	b1a0      	cbz	r0, 8008c58 <_strtod_l+0xb50>
 8008c2e:	4639      	mov	r1, r7
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7f7 ffd1 	bl	8000bd8 <__aeabi_d2uiz>
 8008c36:	2801      	cmp	r0, #1
 8008c38:	bf38      	it	cc
 8008c3a:	2001      	movcc	r0, #1
 8008c3c:	f7f7 fc7a 	bl	8000534 <__aeabi_ui2d>
 8008c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c42:	4606      	mov	r6, r0
 8008c44:	460f      	mov	r7, r1
 8008c46:	b9fb      	cbnz	r3, 8008c88 <_strtod_l+0xb80>
 8008c48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c5e:	1b5b      	subs	r3, r3, r5
 8008c60:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c6a:	f7ff f8f1 	bl	8007e50 <__ulp>
 8008c6e:	4650      	mov	r0, sl
 8008c70:	ec53 2b10 	vmov	r2, r3, d0
 8008c74:	4659      	mov	r1, fp
 8008c76:	f7f7 fcd7 	bl	8000628 <__aeabi_dmul>
 8008c7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c7e:	f7f7 fb1d 	bl	80002bc <__adddf3>
 8008c82:	4682      	mov	sl, r0
 8008c84:	468b      	mov	fp, r1
 8008c86:	e770      	b.n	8008b6a <_strtod_l+0xa62>
 8008c88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008c8c:	e7e0      	b.n	8008c50 <_strtod_l+0xb48>
 8008c8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cc8 <_strtod_l+0xbc0>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 ff3a 	bl	8000b0c <__aeabi_dcmplt>
 8008c98:	e798      	b.n	8008bcc <_strtod_l+0xac4>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	f7ff ba6d 	b.w	8008182 <_strtod_l+0x7a>
 8008ca8:	2a65      	cmp	r2, #101	@ 0x65
 8008caa:	f43f ab68 	beq.w	800837e <_strtod_l+0x276>
 8008cae:	2a45      	cmp	r2, #69	@ 0x45
 8008cb0:	f43f ab65 	beq.w	800837e <_strtod_l+0x276>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f7ff bba0 	b.w	80083fa <_strtod_l+0x2f2>
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	ffc00000 	.word	0xffc00000
 8008cc4:	41dfffff 	.word	0x41dfffff
 8008cc8:	94a03595 	.word	0x94a03595
 8008ccc:	3fcfffff 	.word	0x3fcfffff

08008cd0 <_strtod_r>:
 8008cd0:	4b01      	ldr	r3, [pc, #4]	@ (8008cd8 <_strtod_r+0x8>)
 8008cd2:	f7ff ba19 	b.w	8008108 <_strtod_l>
 8008cd6:	bf00      	nop
 8008cd8:	200000cc 	.word	0x200000cc

08008cdc <_strtol_l.isra.0>:
 8008cdc:	2b24      	cmp	r3, #36	@ 0x24
 8008cde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce2:	4686      	mov	lr, r0
 8008ce4:	4690      	mov	r8, r2
 8008ce6:	d801      	bhi.n	8008cec <_strtol_l.isra.0+0x10>
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d106      	bne.n	8008cfa <_strtol_l.isra.0+0x1e>
 8008cec:	f7fd fdb8 	bl	8006860 <__errno>
 8008cf0:	2316      	movs	r3, #22
 8008cf2:	6003      	str	r3, [r0, #0]
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfa:	4834      	ldr	r0, [pc, #208]	@ (8008dcc <_strtol_l.isra.0+0xf0>)
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	462a      	mov	r2, r5
 8008d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d04:	5d06      	ldrb	r6, [r0, r4]
 8008d06:	f016 0608 	ands.w	r6, r6, #8
 8008d0a:	d1f8      	bne.n	8008cfe <_strtol_l.isra.0+0x22>
 8008d0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d0e:	d110      	bne.n	8008d32 <_strtol_l.isra.0+0x56>
 8008d10:	782c      	ldrb	r4, [r5, #0]
 8008d12:	2601      	movs	r6, #1
 8008d14:	1c95      	adds	r5, r2, #2
 8008d16:	f033 0210 	bics.w	r2, r3, #16
 8008d1a:	d115      	bne.n	8008d48 <_strtol_l.isra.0+0x6c>
 8008d1c:	2c30      	cmp	r4, #48	@ 0x30
 8008d1e:	d10d      	bne.n	8008d3c <_strtol_l.isra.0+0x60>
 8008d20:	782a      	ldrb	r2, [r5, #0]
 8008d22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d26:	2a58      	cmp	r2, #88	@ 0x58
 8008d28:	d108      	bne.n	8008d3c <_strtol_l.isra.0+0x60>
 8008d2a:	786c      	ldrb	r4, [r5, #1]
 8008d2c:	3502      	adds	r5, #2
 8008d2e:	2310      	movs	r3, #16
 8008d30:	e00a      	b.n	8008d48 <_strtol_l.isra.0+0x6c>
 8008d32:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d34:	bf04      	itt	eq
 8008d36:	782c      	ldrbeq	r4, [r5, #0]
 8008d38:	1c95      	addeq	r5, r2, #2
 8008d3a:	e7ec      	b.n	8008d16 <_strtol_l.isra.0+0x3a>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1f6      	bne.n	8008d2e <_strtol_l.isra.0+0x52>
 8008d40:	2c30      	cmp	r4, #48	@ 0x30
 8008d42:	bf14      	ite	ne
 8008d44:	230a      	movne	r3, #10
 8008d46:	2308      	moveq	r3, #8
 8008d48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d50:	2200      	movs	r2, #0
 8008d52:	fbbc f9f3 	udiv	r9, ip, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d60:	2f09      	cmp	r7, #9
 8008d62:	d80f      	bhi.n	8008d84 <_strtol_l.isra.0+0xa8>
 8008d64:	463c      	mov	r4, r7
 8008d66:	42a3      	cmp	r3, r4
 8008d68:	dd1b      	ble.n	8008da2 <_strtol_l.isra.0+0xc6>
 8008d6a:	1c57      	adds	r7, r2, #1
 8008d6c:	d007      	beq.n	8008d7e <_strtol_l.isra.0+0xa2>
 8008d6e:	4581      	cmp	r9, r0
 8008d70:	d314      	bcc.n	8008d9c <_strtol_l.isra.0+0xc0>
 8008d72:	d101      	bne.n	8008d78 <_strtol_l.isra.0+0x9c>
 8008d74:	45a2      	cmp	sl, r4
 8008d76:	db11      	blt.n	8008d9c <_strtol_l.isra.0+0xc0>
 8008d78:	fb00 4003 	mla	r0, r0, r3, r4
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d82:	e7eb      	b.n	8008d5c <_strtol_l.isra.0+0x80>
 8008d84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d88:	2f19      	cmp	r7, #25
 8008d8a:	d801      	bhi.n	8008d90 <_strtol_l.isra.0+0xb4>
 8008d8c:	3c37      	subs	r4, #55	@ 0x37
 8008d8e:	e7ea      	b.n	8008d66 <_strtol_l.isra.0+0x8a>
 8008d90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d94:	2f19      	cmp	r7, #25
 8008d96:	d804      	bhi.n	8008da2 <_strtol_l.isra.0+0xc6>
 8008d98:	3c57      	subs	r4, #87	@ 0x57
 8008d9a:	e7e4      	b.n	8008d66 <_strtol_l.isra.0+0x8a>
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	e7ed      	b.n	8008d7e <_strtol_l.isra.0+0xa2>
 8008da2:	1c53      	adds	r3, r2, #1
 8008da4:	d108      	bne.n	8008db8 <_strtol_l.isra.0+0xdc>
 8008da6:	2322      	movs	r3, #34	@ 0x22
 8008da8:	f8ce 3000 	str.w	r3, [lr]
 8008dac:	4660      	mov	r0, ip
 8008dae:	f1b8 0f00 	cmp.w	r8, #0
 8008db2:	d0a0      	beq.n	8008cf6 <_strtol_l.isra.0+0x1a>
 8008db4:	1e69      	subs	r1, r5, #1
 8008db6:	e006      	b.n	8008dc6 <_strtol_l.isra.0+0xea>
 8008db8:	b106      	cbz	r6, 8008dbc <_strtol_l.isra.0+0xe0>
 8008dba:	4240      	negs	r0, r0
 8008dbc:	f1b8 0f00 	cmp.w	r8, #0
 8008dc0:	d099      	beq.n	8008cf6 <_strtol_l.isra.0+0x1a>
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	d1f6      	bne.n	8008db4 <_strtol_l.isra.0+0xd8>
 8008dc6:	f8c8 1000 	str.w	r1, [r8]
 8008dca:	e794      	b.n	8008cf6 <_strtol_l.isra.0+0x1a>
 8008dcc:	0800a8b1 	.word	0x0800a8b1

08008dd0 <_strtol_r>:
 8008dd0:	f7ff bf84 	b.w	8008cdc <_strtol_l.isra.0>

08008dd4 <__ssputs_r>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	688e      	ldr	r6, [r1, #8]
 8008dda:	461f      	mov	r7, r3
 8008ddc:	42be      	cmp	r6, r7
 8008dde:	680b      	ldr	r3, [r1, #0]
 8008de0:	4682      	mov	sl, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	4690      	mov	r8, r2
 8008de6:	d82d      	bhi.n	8008e44 <__ssputs_r+0x70>
 8008de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008df0:	d026      	beq.n	8008e40 <__ssputs_r+0x6c>
 8008df2:	6965      	ldr	r5, [r4, #20]
 8008df4:	6909      	ldr	r1, [r1, #16]
 8008df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dfa:	eba3 0901 	sub.w	r9, r3, r1
 8008dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e02:	1c7b      	adds	r3, r7, #1
 8008e04:	444b      	add	r3, r9
 8008e06:	106d      	asrs	r5, r5, #1
 8008e08:	429d      	cmp	r5, r3
 8008e0a:	bf38      	it	cc
 8008e0c:	461d      	movcc	r5, r3
 8008e0e:	0553      	lsls	r3, r2, #21
 8008e10:	d527      	bpl.n	8008e62 <__ssputs_r+0x8e>
 8008e12:	4629      	mov	r1, r5
 8008e14:	f7fe fc24 	bl	8007660 <_malloc_r>
 8008e18:	4606      	mov	r6, r0
 8008e1a:	b360      	cbz	r0, 8008e76 <__ssputs_r+0xa2>
 8008e1c:	6921      	ldr	r1, [r4, #16]
 8008e1e:	464a      	mov	r2, r9
 8008e20:	f000 fa18 	bl	8009254 <memcpy>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2e:	81a3      	strh	r3, [r4, #12]
 8008e30:	6126      	str	r6, [r4, #16]
 8008e32:	6165      	str	r5, [r4, #20]
 8008e34:	444e      	add	r6, r9
 8008e36:	eba5 0509 	sub.w	r5, r5, r9
 8008e3a:	6026      	str	r6, [r4, #0]
 8008e3c:	60a5      	str	r5, [r4, #8]
 8008e3e:	463e      	mov	r6, r7
 8008e40:	42be      	cmp	r6, r7
 8008e42:	d900      	bls.n	8008e46 <__ssputs_r+0x72>
 8008e44:	463e      	mov	r6, r7
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	4632      	mov	r2, r6
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	f000 f9c6 	bl	80091dc <memmove>
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	1b9b      	subs	r3, r3, r6
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	4433      	add	r3, r6
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e62:	462a      	mov	r2, r5
 8008e64:	f000 fd89 	bl	800997a <_realloc_r>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d1e0      	bne.n	8008e30 <__ssputs_r+0x5c>
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7fe fb81 	bl	8007578 <_free_r>
 8008e76:	230c      	movs	r3, #12
 8008e78:	f8ca 3000 	str.w	r3, [sl]
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e7e9      	b.n	8008e5e <__ssputs_r+0x8a>
	...

08008e8c <_svfiprintf_r>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	4698      	mov	r8, r3
 8008e92:	898b      	ldrh	r3, [r1, #12]
 8008e94:	061b      	lsls	r3, r3, #24
 8008e96:	b09d      	sub	sp, #116	@ 0x74
 8008e98:	4607      	mov	r7, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	d510      	bpl.n	8008ec2 <_svfiprintf_r+0x36>
 8008ea0:	690b      	ldr	r3, [r1, #16]
 8008ea2:	b973      	cbnz	r3, 8008ec2 <_svfiprintf_r+0x36>
 8008ea4:	2140      	movs	r1, #64	@ 0x40
 8008ea6:	f7fe fbdb 	bl	8007660 <_malloc_r>
 8008eaa:	6028      	str	r0, [r5, #0]
 8008eac:	6128      	str	r0, [r5, #16]
 8008eae:	b930      	cbnz	r0, 8008ebe <_svfiprintf_r+0x32>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	b01d      	add	sp, #116	@ 0x74
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	2340      	movs	r3, #64	@ 0x40
 8008ec0:	616b      	str	r3, [r5, #20]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec6:	2320      	movs	r3, #32
 8008ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed0:	2330      	movs	r3, #48	@ 0x30
 8008ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009070 <_svfiprintf_r+0x1e4>
 8008ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eda:	f04f 0901 	mov.w	r9, #1
 8008ede:	4623      	mov	r3, r4
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee6:	b10a      	cbz	r2, 8008eec <_svfiprintf_r+0x60>
 8008ee8:	2a25      	cmp	r2, #37	@ 0x25
 8008eea:	d1f9      	bne.n	8008ee0 <_svfiprintf_r+0x54>
 8008eec:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef0:	d00b      	beq.n	8008f0a <_svfiprintf_r+0x7e>
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff ff6b 	bl	8008dd4 <__ssputs_r>
 8008efe:	3001      	adds	r0, #1
 8008f00:	f000 80a7 	beq.w	8009052 <_svfiprintf_r+0x1c6>
 8008f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f06:	445a      	add	r2, fp
 8008f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 809f 	beq.w	8009052 <_svfiprintf_r+0x1c6>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f1e:	f10a 0a01 	add.w	sl, sl, #1
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f2c:	4654      	mov	r4, sl
 8008f2e:	2205      	movs	r2, #5
 8008f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f34:	484e      	ldr	r0, [pc, #312]	@ (8009070 <_svfiprintf_r+0x1e4>)
 8008f36:	f7f7 f963 	bl	8000200 <memchr>
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	b9d8      	cbnz	r0, 8008f76 <_svfiprintf_r+0xea>
 8008f3e:	06d0      	lsls	r0, r2, #27
 8008f40:	bf44      	itt	mi
 8008f42:	2320      	movmi	r3, #32
 8008f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f48:	0711      	lsls	r1, r2, #28
 8008f4a:	bf44      	itt	mi
 8008f4c:	232b      	movmi	r3, #43	@ 0x2b
 8008f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f52:	f89a 3000 	ldrb.w	r3, [sl]
 8008f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f58:	d015      	beq.n	8008f86 <_svfiprintf_r+0xfa>
 8008f5a:	9a07      	ldr	r2, [sp, #28]
 8008f5c:	4654      	mov	r4, sl
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f04f 0c0a 	mov.w	ip, #10
 8008f64:	4621      	mov	r1, r4
 8008f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6a:	3b30      	subs	r3, #48	@ 0x30
 8008f6c:	2b09      	cmp	r3, #9
 8008f6e:	d94b      	bls.n	8009008 <_svfiprintf_r+0x17c>
 8008f70:	b1b0      	cbz	r0, 8008fa0 <_svfiprintf_r+0x114>
 8008f72:	9207      	str	r2, [sp, #28]
 8008f74:	e014      	b.n	8008fa0 <_svfiprintf_r+0x114>
 8008f76:	eba0 0308 	sub.w	r3, r0, r8
 8008f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	46a2      	mov	sl, r4
 8008f84:	e7d2      	b.n	8008f2c <_svfiprintf_r+0xa0>
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9103      	str	r1, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfbb      	ittet	lt
 8008f92:	425b      	neglt	r3, r3
 8008f94:	f042 0202 	orrlt.w	r2, r2, #2
 8008f98:	9307      	strge	r3, [sp, #28]
 8008f9a:	9307      	strlt	r3, [sp, #28]
 8008f9c:	bfb8      	it	lt
 8008f9e:	9204      	strlt	r2, [sp, #16]
 8008fa0:	7823      	ldrb	r3, [r4, #0]
 8008fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fa4:	d10a      	bne.n	8008fbc <_svfiprintf_r+0x130>
 8008fa6:	7863      	ldrb	r3, [r4, #1]
 8008fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008faa:	d132      	bne.n	8009012 <_svfiprintf_r+0x186>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9203      	str	r2, [sp, #12]
 8008fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fb8:	3402      	adds	r4, #2
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009080 <_svfiprintf_r+0x1f4>
 8008fc0:	7821      	ldrb	r1, [r4, #0]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	f7f7 f91b 	bl	8000200 <memchr>
 8008fca:	b138      	cbz	r0, 8008fdc <_svfiprintf_r+0x150>
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	eba0 000a 	sub.w	r0, r0, sl
 8008fd2:	2240      	movs	r2, #64	@ 0x40
 8008fd4:	4082      	lsls	r2, r0
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	3401      	adds	r4, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe0:	4824      	ldr	r0, [pc, #144]	@ (8009074 <_svfiprintf_r+0x1e8>)
 8008fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fe6:	2206      	movs	r2, #6
 8008fe8:	f7f7 f90a 	bl	8000200 <memchr>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d036      	beq.n	800905e <_svfiprintf_r+0x1d2>
 8008ff0:	4b21      	ldr	r3, [pc, #132]	@ (8009078 <_svfiprintf_r+0x1ec>)
 8008ff2:	bb1b      	cbnz	r3, 800903c <_svfiprintf_r+0x1b0>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	3307      	adds	r3, #7
 8008ff8:	f023 0307 	bic.w	r3, r3, #7
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009002:	4433      	add	r3, r6
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	e76a      	b.n	8008ede <_svfiprintf_r+0x52>
 8009008:	fb0c 3202 	mla	r2, ip, r2, r3
 800900c:	460c      	mov	r4, r1
 800900e:	2001      	movs	r0, #1
 8009010:	e7a8      	b.n	8008f64 <_svfiprintf_r+0xd8>
 8009012:	2300      	movs	r3, #0
 8009014:	3401      	adds	r4, #1
 8009016:	9305      	str	r3, [sp, #20]
 8009018:	4619      	mov	r1, r3
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	4620      	mov	r0, r4
 8009020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009024:	3a30      	subs	r2, #48	@ 0x30
 8009026:	2a09      	cmp	r2, #9
 8009028:	d903      	bls.n	8009032 <_svfiprintf_r+0x1a6>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0c6      	beq.n	8008fbc <_svfiprintf_r+0x130>
 800902e:	9105      	str	r1, [sp, #20]
 8009030:	e7c4      	b.n	8008fbc <_svfiprintf_r+0x130>
 8009032:	fb0c 2101 	mla	r1, ip, r1, r2
 8009036:	4604      	mov	r4, r0
 8009038:	2301      	movs	r3, #1
 800903a:	e7f0      	b.n	800901e <_svfiprintf_r+0x192>
 800903c:	ab03      	add	r3, sp, #12
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	462a      	mov	r2, r5
 8009042:	4b0e      	ldr	r3, [pc, #56]	@ (800907c <_svfiprintf_r+0x1f0>)
 8009044:	a904      	add	r1, sp, #16
 8009046:	4638      	mov	r0, r7
 8009048:	f7fc fcbe 	bl	80059c8 <_printf_float>
 800904c:	1c42      	adds	r2, r0, #1
 800904e:	4606      	mov	r6, r0
 8009050:	d1d6      	bne.n	8009000 <_svfiprintf_r+0x174>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	065b      	lsls	r3, r3, #25
 8009056:	f53f af2d 	bmi.w	8008eb4 <_svfiprintf_r+0x28>
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	e72c      	b.n	8008eb8 <_svfiprintf_r+0x2c>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <_svfiprintf_r+0x1f0>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4638      	mov	r0, r7
 800906a:	f7fc ff45 	bl	8005ef8 <_printf_i>
 800906e:	e7ed      	b.n	800904c <_svfiprintf_r+0x1c0>
 8009070:	0800a6af 	.word	0x0800a6af
 8009074:	0800a6b9 	.word	0x0800a6b9
 8009078:	080059c9 	.word	0x080059c9
 800907c:	08008dd5 	.word	0x08008dd5
 8009080:	0800a6b5 	.word	0x0800a6b5

08009084 <__sflush_r>:
 8009084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	0716      	lsls	r6, r2, #28
 800908e:	4605      	mov	r5, r0
 8009090:	460c      	mov	r4, r1
 8009092:	d454      	bmi.n	800913e <__sflush_r+0xba>
 8009094:	684b      	ldr	r3, [r1, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dc02      	bgt.n	80090a0 <__sflush_r+0x1c>
 800909a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd48      	ble.n	8009132 <__sflush_r+0xae>
 80090a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d045      	beq.n	8009132 <__sflush_r+0xae>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090ac:	682f      	ldr	r7, [r5, #0]
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	d030      	beq.n	8009116 <__sflush_r+0x92>
 80090b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	0759      	lsls	r1, r3, #29
 80090ba:	d505      	bpl.n	80090c8 <__sflush_r+0x44>
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090c2:	b10b      	cbz	r3, 80090c8 <__sflush_r+0x44>
 80090c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090c6:	1ad2      	subs	r2, r2, r3
 80090c8:	2300      	movs	r3, #0
 80090ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090cc:	6a21      	ldr	r1, [r4, #32]
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b0      	blx	r6
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	d106      	bne.n	80090e6 <__sflush_r+0x62>
 80090d8:	6829      	ldr	r1, [r5, #0]
 80090da:	291d      	cmp	r1, #29
 80090dc:	d82b      	bhi.n	8009136 <__sflush_r+0xb2>
 80090de:	4a2a      	ldr	r2, [pc, #168]	@ (8009188 <__sflush_r+0x104>)
 80090e0:	40ca      	lsrs	r2, r1
 80090e2:	07d6      	lsls	r6, r2, #31
 80090e4:	d527      	bpl.n	8009136 <__sflush_r+0xb2>
 80090e6:	2200      	movs	r2, #0
 80090e8:	6062      	str	r2, [r4, #4]
 80090ea:	04d9      	lsls	r1, r3, #19
 80090ec:	6922      	ldr	r2, [r4, #16]
 80090ee:	6022      	str	r2, [r4, #0]
 80090f0:	d504      	bpl.n	80090fc <__sflush_r+0x78>
 80090f2:	1c42      	adds	r2, r0, #1
 80090f4:	d101      	bne.n	80090fa <__sflush_r+0x76>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b903      	cbnz	r3, 80090fc <__sflush_r+0x78>
 80090fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80090fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090fe:	602f      	str	r7, [r5, #0]
 8009100:	b1b9      	cbz	r1, 8009132 <__sflush_r+0xae>
 8009102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009106:	4299      	cmp	r1, r3
 8009108:	d002      	beq.n	8009110 <__sflush_r+0x8c>
 800910a:	4628      	mov	r0, r5
 800910c:	f7fe fa34 	bl	8007578 <_free_r>
 8009110:	2300      	movs	r3, #0
 8009112:	6363      	str	r3, [r4, #52]	@ 0x34
 8009114:	e00d      	b.n	8009132 <__sflush_r+0xae>
 8009116:	2301      	movs	r3, #1
 8009118:	4628      	mov	r0, r5
 800911a:	47b0      	blx	r6
 800911c:	4602      	mov	r2, r0
 800911e:	1c50      	adds	r0, r2, #1
 8009120:	d1c9      	bne.n	80090b6 <__sflush_r+0x32>
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0c6      	beq.n	80090b6 <__sflush_r+0x32>
 8009128:	2b1d      	cmp	r3, #29
 800912a:	d001      	beq.n	8009130 <__sflush_r+0xac>
 800912c:	2b16      	cmp	r3, #22
 800912e:	d11e      	bne.n	800916e <__sflush_r+0xea>
 8009130:	602f      	str	r7, [r5, #0]
 8009132:	2000      	movs	r0, #0
 8009134:	e022      	b.n	800917c <__sflush_r+0xf8>
 8009136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913a:	b21b      	sxth	r3, r3
 800913c:	e01b      	b.n	8009176 <__sflush_r+0xf2>
 800913e:	690f      	ldr	r7, [r1, #16]
 8009140:	2f00      	cmp	r7, #0
 8009142:	d0f6      	beq.n	8009132 <__sflush_r+0xae>
 8009144:	0793      	lsls	r3, r2, #30
 8009146:	680e      	ldr	r6, [r1, #0]
 8009148:	bf08      	it	eq
 800914a:	694b      	ldreq	r3, [r1, #20]
 800914c:	600f      	str	r7, [r1, #0]
 800914e:	bf18      	it	ne
 8009150:	2300      	movne	r3, #0
 8009152:	eba6 0807 	sub.w	r8, r6, r7
 8009156:	608b      	str	r3, [r1, #8]
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	dde9      	ble.n	8009132 <__sflush_r+0xae>
 800915e:	6a21      	ldr	r1, [r4, #32]
 8009160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009162:	4643      	mov	r3, r8
 8009164:	463a      	mov	r2, r7
 8009166:	4628      	mov	r0, r5
 8009168:	47b0      	blx	r6
 800916a:	2800      	cmp	r0, #0
 800916c:	dc08      	bgt.n	8009180 <__sflush_r+0xfc>
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	4407      	add	r7, r0
 8009182:	eba8 0800 	sub.w	r8, r8, r0
 8009186:	e7e7      	b.n	8009158 <__sflush_r+0xd4>
 8009188:	20400001 	.word	0x20400001

0800918c <_fflush_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	690b      	ldr	r3, [r1, #16]
 8009190:	4605      	mov	r5, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b913      	cbnz	r3, 800919c <_fflush_r+0x10>
 8009196:	2500      	movs	r5, #0
 8009198:	4628      	mov	r0, r5
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	b118      	cbz	r0, 80091a6 <_fflush_r+0x1a>
 800919e:	6a03      	ldr	r3, [r0, #32]
 80091a0:	b90b      	cbnz	r3, 80091a6 <_fflush_r+0x1a>
 80091a2:	f7fd fa61 	bl	8006668 <__sinit>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f3      	beq.n	8009196 <_fflush_r+0xa>
 80091ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091b0:	07d0      	lsls	r0, r2, #31
 80091b2:	d404      	bmi.n	80091be <_fflush_r+0x32>
 80091b4:	0599      	lsls	r1, r3, #22
 80091b6:	d402      	bmi.n	80091be <_fflush_r+0x32>
 80091b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ba:	f7fd fb7c 	bl	80068b6 <__retarget_lock_acquire_recursive>
 80091be:	4628      	mov	r0, r5
 80091c0:	4621      	mov	r1, r4
 80091c2:	f7ff ff5f 	bl	8009084 <__sflush_r>
 80091c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	4605      	mov	r5, r0
 80091cc:	d4e4      	bmi.n	8009198 <_fflush_r+0xc>
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	059b      	lsls	r3, r3, #22
 80091d2:	d4e1      	bmi.n	8009198 <_fflush_r+0xc>
 80091d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d6:	f7fd fb6f 	bl	80068b8 <__retarget_lock_release_recursive>
 80091da:	e7dd      	b.n	8009198 <_fflush_r+0xc>

080091dc <memmove>:
 80091dc:	4288      	cmp	r0, r1
 80091de:	b510      	push	{r4, lr}
 80091e0:	eb01 0402 	add.w	r4, r1, r2
 80091e4:	d902      	bls.n	80091ec <memmove+0x10>
 80091e6:	4284      	cmp	r4, r0
 80091e8:	4623      	mov	r3, r4
 80091ea:	d807      	bhi.n	80091fc <memmove+0x20>
 80091ec:	1e43      	subs	r3, r0, #1
 80091ee:	42a1      	cmp	r1, r4
 80091f0:	d008      	beq.n	8009204 <memmove+0x28>
 80091f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091fa:	e7f8      	b.n	80091ee <memmove+0x12>
 80091fc:	4402      	add	r2, r0
 80091fe:	4601      	mov	r1, r0
 8009200:	428a      	cmp	r2, r1
 8009202:	d100      	bne.n	8009206 <memmove+0x2a>
 8009204:	bd10      	pop	{r4, pc}
 8009206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800920a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800920e:	e7f7      	b.n	8009200 <memmove+0x24>

08009210 <strncmp>:
 8009210:	b510      	push	{r4, lr}
 8009212:	b16a      	cbz	r2, 8009230 <strncmp+0x20>
 8009214:	3901      	subs	r1, #1
 8009216:	1884      	adds	r4, r0, r2
 8009218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800921c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009220:	429a      	cmp	r2, r3
 8009222:	d103      	bne.n	800922c <strncmp+0x1c>
 8009224:	42a0      	cmp	r0, r4
 8009226:	d001      	beq.n	800922c <strncmp+0x1c>
 8009228:	2a00      	cmp	r2, #0
 800922a:	d1f5      	bne.n	8009218 <strncmp+0x8>
 800922c:	1ad0      	subs	r0, r2, r3
 800922e:	bd10      	pop	{r4, pc}
 8009230:	4610      	mov	r0, r2
 8009232:	e7fc      	b.n	800922e <strncmp+0x1e>

08009234 <_sbrk_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	@ (8009250 <_sbrk_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f8 fbe6 	bl	8001a10 <_sbrk>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_sbrk_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_sbrk_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	200004d8 	.word	0x200004d8

08009254 <memcpy>:
 8009254:	440a      	add	r2, r1
 8009256:	4291      	cmp	r1, r2
 8009258:	f100 33ff 	add.w	r3, r0, #4294967295
 800925c:	d100      	bne.n	8009260 <memcpy+0xc>
 800925e:	4770      	bx	lr
 8009260:	b510      	push	{r4, lr}
 8009262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800926a:	4291      	cmp	r1, r2
 800926c:	d1f9      	bne.n	8009262 <memcpy+0xe>
 800926e:	bd10      	pop	{r4, pc}

08009270 <nan>:
 8009270:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009278 <nan+0x8>
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	00000000 	.word	0x00000000
 800927c:	7ff80000 	.word	0x7ff80000

08009280 <__assert_func>:
 8009280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009282:	4614      	mov	r4, r2
 8009284:	461a      	mov	r2, r3
 8009286:	4b09      	ldr	r3, [pc, #36]	@ (80092ac <__assert_func+0x2c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4605      	mov	r5, r0
 800928c:	68d8      	ldr	r0, [r3, #12]
 800928e:	b14c      	cbz	r4, 80092a4 <__assert_func+0x24>
 8009290:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <__assert_func+0x30>)
 8009292:	9100      	str	r1, [sp, #0]
 8009294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009298:	4906      	ldr	r1, [pc, #24]	@ (80092b4 <__assert_func+0x34>)
 800929a:	462b      	mov	r3, r5
 800929c:	f000 fba8 	bl	80099f0 <fiprintf>
 80092a0:	f000 fbb8 	bl	8009a14 <abort>
 80092a4:	4b04      	ldr	r3, [pc, #16]	@ (80092b8 <__assert_func+0x38>)
 80092a6:	461c      	mov	r4, r3
 80092a8:	e7f3      	b.n	8009292 <__assert_func+0x12>
 80092aa:	bf00      	nop
 80092ac:	2000007c 	.word	0x2000007c
 80092b0:	0800a6c8 	.word	0x0800a6c8
 80092b4:	0800a6d5 	.word	0x0800a6d5
 80092b8:	0800a703 	.word	0x0800a703

080092bc <_calloc_r>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	fba1 5402 	umull	r5, r4, r1, r2
 80092c2:	b934      	cbnz	r4, 80092d2 <_calloc_r+0x16>
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7fe f9cb 	bl	8007660 <_malloc_r>
 80092ca:	4606      	mov	r6, r0
 80092cc:	b928      	cbnz	r0, 80092da <_calloc_r+0x1e>
 80092ce:	4630      	mov	r0, r6
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
 80092d2:	220c      	movs	r2, #12
 80092d4:	6002      	str	r2, [r0, #0]
 80092d6:	2600      	movs	r6, #0
 80092d8:	e7f9      	b.n	80092ce <_calloc_r+0x12>
 80092da:	462a      	mov	r2, r5
 80092dc:	4621      	mov	r1, r4
 80092de:	f7fd fa5e 	bl	800679e <memset>
 80092e2:	e7f4      	b.n	80092ce <_calloc_r+0x12>

080092e4 <rshift>:
 80092e4:	6903      	ldr	r3, [r0, #16]
 80092e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092f2:	f100 0414 	add.w	r4, r0, #20
 80092f6:	dd45      	ble.n	8009384 <rshift+0xa0>
 80092f8:	f011 011f 	ands.w	r1, r1, #31
 80092fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009304:	d10c      	bne.n	8009320 <rshift+0x3c>
 8009306:	f100 0710 	add.w	r7, r0, #16
 800930a:	4629      	mov	r1, r5
 800930c:	42b1      	cmp	r1, r6
 800930e:	d334      	bcc.n	800937a <rshift+0x96>
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	1eea      	subs	r2, r5, #3
 8009316:	4296      	cmp	r6, r2
 8009318:	bf38      	it	cc
 800931a:	2300      	movcc	r3, #0
 800931c:	4423      	add	r3, r4
 800931e:	e015      	b.n	800934c <rshift+0x68>
 8009320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009324:	f1c1 0820 	rsb	r8, r1, #32
 8009328:	40cf      	lsrs	r7, r1
 800932a:	f105 0e04 	add.w	lr, r5, #4
 800932e:	46a1      	mov	r9, r4
 8009330:	4576      	cmp	r6, lr
 8009332:	46f4      	mov	ip, lr
 8009334:	d815      	bhi.n	8009362 <rshift+0x7e>
 8009336:	1a9a      	subs	r2, r3, r2
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	3a04      	subs	r2, #4
 800933c:	3501      	adds	r5, #1
 800933e:	42ae      	cmp	r6, r5
 8009340:	bf38      	it	cc
 8009342:	2200      	movcc	r2, #0
 8009344:	18a3      	adds	r3, r4, r2
 8009346:	50a7      	str	r7, [r4, r2]
 8009348:	b107      	cbz	r7, 800934c <rshift+0x68>
 800934a:	3304      	adds	r3, #4
 800934c:	1b1a      	subs	r2, r3, r4
 800934e:	42a3      	cmp	r3, r4
 8009350:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009354:	bf08      	it	eq
 8009356:	2300      	moveq	r3, #0
 8009358:	6102      	str	r2, [r0, #16]
 800935a:	bf08      	it	eq
 800935c:	6143      	streq	r3, [r0, #20]
 800935e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009362:	f8dc c000 	ldr.w	ip, [ip]
 8009366:	fa0c fc08 	lsl.w	ip, ip, r8
 800936a:	ea4c 0707 	orr.w	r7, ip, r7
 800936e:	f849 7b04 	str.w	r7, [r9], #4
 8009372:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009376:	40cf      	lsrs	r7, r1
 8009378:	e7da      	b.n	8009330 <rshift+0x4c>
 800937a:	f851 cb04 	ldr.w	ip, [r1], #4
 800937e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009382:	e7c3      	b.n	800930c <rshift+0x28>
 8009384:	4623      	mov	r3, r4
 8009386:	e7e1      	b.n	800934c <rshift+0x68>

08009388 <__hexdig_fun>:
 8009388:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800938c:	2b09      	cmp	r3, #9
 800938e:	d802      	bhi.n	8009396 <__hexdig_fun+0xe>
 8009390:	3820      	subs	r0, #32
 8009392:	b2c0      	uxtb	r0, r0
 8009394:	4770      	bx	lr
 8009396:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800939a:	2b05      	cmp	r3, #5
 800939c:	d801      	bhi.n	80093a2 <__hexdig_fun+0x1a>
 800939e:	3847      	subs	r0, #71	@ 0x47
 80093a0:	e7f7      	b.n	8009392 <__hexdig_fun+0xa>
 80093a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	d801      	bhi.n	80093ae <__hexdig_fun+0x26>
 80093aa:	3827      	subs	r0, #39	@ 0x27
 80093ac:	e7f1      	b.n	8009392 <__hexdig_fun+0xa>
 80093ae:	2000      	movs	r0, #0
 80093b0:	4770      	bx	lr
	...

080093b4 <__gethex>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b085      	sub	sp, #20
 80093ba:	468a      	mov	sl, r1
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	680b      	ldr	r3, [r1, #0]
 80093c0:	9001      	str	r0, [sp, #4]
 80093c2:	4690      	mov	r8, r2
 80093c4:	1c9c      	adds	r4, r3, #2
 80093c6:	46a1      	mov	r9, r4
 80093c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093cc:	2830      	cmp	r0, #48	@ 0x30
 80093ce:	d0fa      	beq.n	80093c6 <__gethex+0x12>
 80093d0:	eba9 0303 	sub.w	r3, r9, r3
 80093d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80093d8:	f7ff ffd6 	bl	8009388 <__hexdig_fun>
 80093dc:	4605      	mov	r5, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	d168      	bne.n	80094b4 <__gethex+0x100>
 80093e2:	49a0      	ldr	r1, [pc, #640]	@ (8009664 <__gethex+0x2b0>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	4648      	mov	r0, r9
 80093e8:	f7ff ff12 	bl	8009210 <strncmp>
 80093ec:	4607      	mov	r7, r0
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d167      	bne.n	80094c2 <__gethex+0x10e>
 80093f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093f6:	4626      	mov	r6, r4
 80093f8:	f7ff ffc6 	bl	8009388 <__hexdig_fun>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d062      	beq.n	80094c6 <__gethex+0x112>
 8009400:	4623      	mov	r3, r4
 8009402:	7818      	ldrb	r0, [r3, #0]
 8009404:	2830      	cmp	r0, #48	@ 0x30
 8009406:	4699      	mov	r9, r3
 8009408:	f103 0301 	add.w	r3, r3, #1
 800940c:	d0f9      	beq.n	8009402 <__gethex+0x4e>
 800940e:	f7ff ffbb 	bl	8009388 <__hexdig_fun>
 8009412:	fab0 f580 	clz	r5, r0
 8009416:	096d      	lsrs	r5, r5, #5
 8009418:	f04f 0b01 	mov.w	fp, #1
 800941c:	464a      	mov	r2, r9
 800941e:	4616      	mov	r6, r2
 8009420:	3201      	adds	r2, #1
 8009422:	7830      	ldrb	r0, [r6, #0]
 8009424:	f7ff ffb0 	bl	8009388 <__hexdig_fun>
 8009428:	2800      	cmp	r0, #0
 800942a:	d1f8      	bne.n	800941e <__gethex+0x6a>
 800942c:	498d      	ldr	r1, [pc, #564]	@ (8009664 <__gethex+0x2b0>)
 800942e:	2201      	movs	r2, #1
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff feed 	bl	8009210 <strncmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	d13f      	bne.n	80094ba <__gethex+0x106>
 800943a:	b944      	cbnz	r4, 800944e <__gethex+0x9a>
 800943c:	1c74      	adds	r4, r6, #1
 800943e:	4622      	mov	r2, r4
 8009440:	4616      	mov	r6, r2
 8009442:	3201      	adds	r2, #1
 8009444:	7830      	ldrb	r0, [r6, #0]
 8009446:	f7ff ff9f 	bl	8009388 <__hexdig_fun>
 800944a:	2800      	cmp	r0, #0
 800944c:	d1f8      	bne.n	8009440 <__gethex+0x8c>
 800944e:	1ba4      	subs	r4, r4, r6
 8009450:	00a7      	lsls	r7, r4, #2
 8009452:	7833      	ldrb	r3, [r6, #0]
 8009454:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009458:	2b50      	cmp	r3, #80	@ 0x50
 800945a:	d13e      	bne.n	80094da <__gethex+0x126>
 800945c:	7873      	ldrb	r3, [r6, #1]
 800945e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009460:	d033      	beq.n	80094ca <__gethex+0x116>
 8009462:	2b2d      	cmp	r3, #45	@ 0x2d
 8009464:	d034      	beq.n	80094d0 <__gethex+0x11c>
 8009466:	1c71      	adds	r1, r6, #1
 8009468:	2400      	movs	r4, #0
 800946a:	7808      	ldrb	r0, [r1, #0]
 800946c:	f7ff ff8c 	bl	8009388 <__hexdig_fun>
 8009470:	1e43      	subs	r3, r0, #1
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b18      	cmp	r3, #24
 8009476:	d830      	bhi.n	80094da <__gethex+0x126>
 8009478:	f1a0 0210 	sub.w	r2, r0, #16
 800947c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009480:	f7ff ff82 	bl	8009388 <__hexdig_fun>
 8009484:	f100 3cff 	add.w	ip, r0, #4294967295
 8009488:	fa5f fc8c 	uxtb.w	ip, ip
 800948c:	f1bc 0f18 	cmp.w	ip, #24
 8009490:	f04f 030a 	mov.w	r3, #10
 8009494:	d91e      	bls.n	80094d4 <__gethex+0x120>
 8009496:	b104      	cbz	r4, 800949a <__gethex+0xe6>
 8009498:	4252      	negs	r2, r2
 800949a:	4417      	add	r7, r2
 800949c:	f8ca 1000 	str.w	r1, [sl]
 80094a0:	b1ed      	cbz	r5, 80094de <__gethex+0x12a>
 80094a2:	f1bb 0f00 	cmp.w	fp, #0
 80094a6:	bf0c      	ite	eq
 80094a8:	2506      	moveq	r5, #6
 80094aa:	2500      	movne	r5, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	b005      	add	sp, #20
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	2500      	movs	r5, #0
 80094b6:	462c      	mov	r4, r5
 80094b8:	e7b0      	b.n	800941c <__gethex+0x68>
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	d1c7      	bne.n	800944e <__gethex+0x9a>
 80094be:	4627      	mov	r7, r4
 80094c0:	e7c7      	b.n	8009452 <__gethex+0x9e>
 80094c2:	464e      	mov	r6, r9
 80094c4:	462f      	mov	r7, r5
 80094c6:	2501      	movs	r5, #1
 80094c8:	e7c3      	b.n	8009452 <__gethex+0x9e>
 80094ca:	2400      	movs	r4, #0
 80094cc:	1cb1      	adds	r1, r6, #2
 80094ce:	e7cc      	b.n	800946a <__gethex+0xb6>
 80094d0:	2401      	movs	r4, #1
 80094d2:	e7fb      	b.n	80094cc <__gethex+0x118>
 80094d4:	fb03 0002 	mla	r0, r3, r2, r0
 80094d8:	e7ce      	b.n	8009478 <__gethex+0xc4>
 80094da:	4631      	mov	r1, r6
 80094dc:	e7de      	b.n	800949c <__gethex+0xe8>
 80094de:	eba6 0309 	sub.w	r3, r6, r9
 80094e2:	3b01      	subs	r3, #1
 80094e4:	4629      	mov	r1, r5
 80094e6:	2b07      	cmp	r3, #7
 80094e8:	dc0a      	bgt.n	8009500 <__gethex+0x14c>
 80094ea:	9801      	ldr	r0, [sp, #4]
 80094ec:	f7fe f944 	bl	8007778 <_Balloc>
 80094f0:	4604      	mov	r4, r0
 80094f2:	b940      	cbnz	r0, 8009506 <__gethex+0x152>
 80094f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009668 <__gethex+0x2b4>)
 80094f6:	4602      	mov	r2, r0
 80094f8:	21e4      	movs	r1, #228	@ 0xe4
 80094fa:	485c      	ldr	r0, [pc, #368]	@ (800966c <__gethex+0x2b8>)
 80094fc:	f7ff fec0 	bl	8009280 <__assert_func>
 8009500:	3101      	adds	r1, #1
 8009502:	105b      	asrs	r3, r3, #1
 8009504:	e7ef      	b.n	80094e6 <__gethex+0x132>
 8009506:	f100 0a14 	add.w	sl, r0, #20
 800950a:	2300      	movs	r3, #0
 800950c:	4655      	mov	r5, sl
 800950e:	469b      	mov	fp, r3
 8009510:	45b1      	cmp	r9, r6
 8009512:	d337      	bcc.n	8009584 <__gethex+0x1d0>
 8009514:	f845 bb04 	str.w	fp, [r5], #4
 8009518:	eba5 050a 	sub.w	r5, r5, sl
 800951c:	10ad      	asrs	r5, r5, #2
 800951e:	6125      	str	r5, [r4, #16]
 8009520:	4658      	mov	r0, fp
 8009522:	f7fe fa1b 	bl	800795c <__hi0bits>
 8009526:	016d      	lsls	r5, r5, #5
 8009528:	f8d8 6000 	ldr.w	r6, [r8]
 800952c:	1a2d      	subs	r5, r5, r0
 800952e:	42b5      	cmp	r5, r6
 8009530:	dd54      	ble.n	80095dc <__gethex+0x228>
 8009532:	1bad      	subs	r5, r5, r6
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	f7fe fda7 	bl	800808a <__any_on>
 800953c:	4681      	mov	r9, r0
 800953e:	b178      	cbz	r0, 8009560 <__gethex+0x1ac>
 8009540:	1e6b      	subs	r3, r5, #1
 8009542:	1159      	asrs	r1, r3, #5
 8009544:	f003 021f 	and.w	r2, r3, #31
 8009548:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800954c:	f04f 0901 	mov.w	r9, #1
 8009550:	fa09 f202 	lsl.w	r2, r9, r2
 8009554:	420a      	tst	r2, r1
 8009556:	d003      	beq.n	8009560 <__gethex+0x1ac>
 8009558:	454b      	cmp	r3, r9
 800955a:	dc36      	bgt.n	80095ca <__gethex+0x216>
 800955c:	f04f 0902 	mov.w	r9, #2
 8009560:	4629      	mov	r1, r5
 8009562:	4620      	mov	r0, r4
 8009564:	f7ff febe 	bl	80092e4 <rshift>
 8009568:	442f      	add	r7, r5
 800956a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800956e:	42bb      	cmp	r3, r7
 8009570:	da42      	bge.n	80095f8 <__gethex+0x244>
 8009572:	9801      	ldr	r0, [sp, #4]
 8009574:	4621      	mov	r1, r4
 8009576:	f7fe f93f 	bl	80077f8 <_Bfree>
 800957a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800957c:	2300      	movs	r3, #0
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	25a3      	movs	r5, #163	@ 0xa3
 8009582:	e793      	b.n	80094ac <__gethex+0xf8>
 8009584:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009588:	2a2e      	cmp	r2, #46	@ 0x2e
 800958a:	d012      	beq.n	80095b2 <__gethex+0x1fe>
 800958c:	2b20      	cmp	r3, #32
 800958e:	d104      	bne.n	800959a <__gethex+0x1e6>
 8009590:	f845 bb04 	str.w	fp, [r5], #4
 8009594:	f04f 0b00 	mov.w	fp, #0
 8009598:	465b      	mov	r3, fp
 800959a:	7830      	ldrb	r0, [r6, #0]
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	f7ff fef3 	bl	8009388 <__hexdig_fun>
 80095a2:	9b03      	ldr	r3, [sp, #12]
 80095a4:	f000 000f 	and.w	r0, r0, #15
 80095a8:	4098      	lsls	r0, r3
 80095aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80095ae:	3304      	adds	r3, #4
 80095b0:	e7ae      	b.n	8009510 <__gethex+0x15c>
 80095b2:	45b1      	cmp	r9, r6
 80095b4:	d8ea      	bhi.n	800958c <__gethex+0x1d8>
 80095b6:	492b      	ldr	r1, [pc, #172]	@ (8009664 <__gethex+0x2b0>)
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fe27 	bl	8009210 <strncmp>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1e1      	bne.n	800958c <__gethex+0x1d8>
 80095c8:	e7a2      	b.n	8009510 <__gethex+0x15c>
 80095ca:	1ea9      	subs	r1, r5, #2
 80095cc:	4620      	mov	r0, r4
 80095ce:	f7fe fd5c 	bl	800808a <__any_on>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0c2      	beq.n	800955c <__gethex+0x1a8>
 80095d6:	f04f 0903 	mov.w	r9, #3
 80095da:	e7c1      	b.n	8009560 <__gethex+0x1ac>
 80095dc:	da09      	bge.n	80095f2 <__gethex+0x23e>
 80095de:	1b75      	subs	r5, r6, r5
 80095e0:	4621      	mov	r1, r4
 80095e2:	9801      	ldr	r0, [sp, #4]
 80095e4:	462a      	mov	r2, r5
 80095e6:	f7fe fb17 	bl	8007c18 <__lshift>
 80095ea:	1b7f      	subs	r7, r7, r5
 80095ec:	4604      	mov	r4, r0
 80095ee:	f100 0a14 	add.w	sl, r0, #20
 80095f2:	f04f 0900 	mov.w	r9, #0
 80095f6:	e7b8      	b.n	800956a <__gethex+0x1b6>
 80095f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095fc:	42bd      	cmp	r5, r7
 80095fe:	dd6f      	ble.n	80096e0 <__gethex+0x32c>
 8009600:	1bed      	subs	r5, r5, r7
 8009602:	42ae      	cmp	r6, r5
 8009604:	dc34      	bgt.n	8009670 <__gethex+0x2bc>
 8009606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d022      	beq.n	8009654 <__gethex+0x2a0>
 800960e:	2b03      	cmp	r3, #3
 8009610:	d024      	beq.n	800965c <__gethex+0x2a8>
 8009612:	2b01      	cmp	r3, #1
 8009614:	d115      	bne.n	8009642 <__gethex+0x28e>
 8009616:	42ae      	cmp	r6, r5
 8009618:	d113      	bne.n	8009642 <__gethex+0x28e>
 800961a:	2e01      	cmp	r6, #1
 800961c:	d10b      	bne.n	8009636 <__gethex+0x282>
 800961e:	9a02      	ldr	r2, [sp, #8]
 8009620:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	2301      	movs	r3, #1
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	f8ca 3000 	str.w	r3, [sl]
 800962e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009630:	2562      	movs	r5, #98	@ 0x62
 8009632:	601c      	str	r4, [r3, #0]
 8009634:	e73a      	b.n	80094ac <__gethex+0xf8>
 8009636:	1e71      	subs	r1, r6, #1
 8009638:	4620      	mov	r0, r4
 800963a:	f7fe fd26 	bl	800808a <__any_on>
 800963e:	2800      	cmp	r0, #0
 8009640:	d1ed      	bne.n	800961e <__gethex+0x26a>
 8009642:	9801      	ldr	r0, [sp, #4]
 8009644:	4621      	mov	r1, r4
 8009646:	f7fe f8d7 	bl	80077f8 <_Bfree>
 800964a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800964c:	2300      	movs	r3, #0
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	2550      	movs	r5, #80	@ 0x50
 8009652:	e72b      	b.n	80094ac <__gethex+0xf8>
 8009654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f3      	bne.n	8009642 <__gethex+0x28e>
 800965a:	e7e0      	b.n	800961e <__gethex+0x26a>
 800965c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1dd      	bne.n	800961e <__gethex+0x26a>
 8009662:	e7ee      	b.n	8009642 <__gethex+0x28e>
 8009664:	0800a6ad 	.word	0x0800a6ad
 8009668:	0800a643 	.word	0x0800a643
 800966c:	0800a704 	.word	0x0800a704
 8009670:	1e6f      	subs	r7, r5, #1
 8009672:	f1b9 0f00 	cmp.w	r9, #0
 8009676:	d130      	bne.n	80096da <__gethex+0x326>
 8009678:	b127      	cbz	r7, 8009684 <__gethex+0x2d0>
 800967a:	4639      	mov	r1, r7
 800967c:	4620      	mov	r0, r4
 800967e:	f7fe fd04 	bl	800808a <__any_on>
 8009682:	4681      	mov	r9, r0
 8009684:	117a      	asrs	r2, r7, #5
 8009686:	2301      	movs	r3, #1
 8009688:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800968c:	f007 071f 	and.w	r7, r7, #31
 8009690:	40bb      	lsls	r3, r7
 8009692:	4213      	tst	r3, r2
 8009694:	4629      	mov	r1, r5
 8009696:	4620      	mov	r0, r4
 8009698:	bf18      	it	ne
 800969a:	f049 0902 	orrne.w	r9, r9, #2
 800969e:	f7ff fe21 	bl	80092e4 <rshift>
 80096a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80096a6:	1b76      	subs	r6, r6, r5
 80096a8:	2502      	movs	r5, #2
 80096aa:	f1b9 0f00 	cmp.w	r9, #0
 80096ae:	d047      	beq.n	8009740 <__gethex+0x38c>
 80096b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d015      	beq.n	80096e4 <__gethex+0x330>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d017      	beq.n	80096ec <__gethex+0x338>
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d109      	bne.n	80096d4 <__gethex+0x320>
 80096c0:	f019 0f02 	tst.w	r9, #2
 80096c4:	d006      	beq.n	80096d4 <__gethex+0x320>
 80096c6:	f8da 3000 	ldr.w	r3, [sl]
 80096ca:	ea49 0903 	orr.w	r9, r9, r3
 80096ce:	f019 0f01 	tst.w	r9, #1
 80096d2:	d10e      	bne.n	80096f2 <__gethex+0x33e>
 80096d4:	f045 0510 	orr.w	r5, r5, #16
 80096d8:	e032      	b.n	8009740 <__gethex+0x38c>
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	e7d1      	b.n	8009684 <__gethex+0x2d0>
 80096e0:	2501      	movs	r5, #1
 80096e2:	e7e2      	b.n	80096aa <__gethex+0x2f6>
 80096e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096e6:	f1c3 0301 	rsb	r3, r3, #1
 80096ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0f0      	beq.n	80096d4 <__gethex+0x320>
 80096f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096f6:	f104 0314 	add.w	r3, r4, #20
 80096fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009702:	f04f 0c00 	mov.w	ip, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f853 2b04 	ldr.w	r2, [r3], #4
 800970c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009710:	d01b      	beq.n	800974a <__gethex+0x396>
 8009712:	3201      	adds	r2, #1
 8009714:	6002      	str	r2, [r0, #0]
 8009716:	2d02      	cmp	r5, #2
 8009718:	f104 0314 	add.w	r3, r4, #20
 800971c:	d13c      	bne.n	8009798 <__gethex+0x3e4>
 800971e:	f8d8 2000 	ldr.w	r2, [r8]
 8009722:	3a01      	subs	r2, #1
 8009724:	42b2      	cmp	r2, r6
 8009726:	d109      	bne.n	800973c <__gethex+0x388>
 8009728:	1171      	asrs	r1, r6, #5
 800972a:	2201      	movs	r2, #1
 800972c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009730:	f006 061f 	and.w	r6, r6, #31
 8009734:	fa02 f606 	lsl.w	r6, r2, r6
 8009738:	421e      	tst	r6, r3
 800973a:	d13a      	bne.n	80097b2 <__gethex+0x3fe>
 800973c:	f045 0520 	orr.w	r5, r5, #32
 8009740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009742:	601c      	str	r4, [r3, #0]
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	601f      	str	r7, [r3, #0]
 8009748:	e6b0      	b.n	80094ac <__gethex+0xf8>
 800974a:	4299      	cmp	r1, r3
 800974c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009750:	d8d9      	bhi.n	8009706 <__gethex+0x352>
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	459b      	cmp	fp, r3
 8009756:	db17      	blt.n	8009788 <__gethex+0x3d4>
 8009758:	6861      	ldr	r1, [r4, #4]
 800975a:	9801      	ldr	r0, [sp, #4]
 800975c:	3101      	adds	r1, #1
 800975e:	f7fe f80b 	bl	8007778 <_Balloc>
 8009762:	4681      	mov	r9, r0
 8009764:	b918      	cbnz	r0, 800976e <__gethex+0x3ba>
 8009766:	4b1a      	ldr	r3, [pc, #104]	@ (80097d0 <__gethex+0x41c>)
 8009768:	4602      	mov	r2, r0
 800976a:	2184      	movs	r1, #132	@ 0x84
 800976c:	e6c5      	b.n	80094fa <__gethex+0x146>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	f104 010c 	add.w	r1, r4, #12
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	300c      	adds	r0, #12
 800977a:	f7ff fd6b 	bl	8009254 <memcpy>
 800977e:	4621      	mov	r1, r4
 8009780:	9801      	ldr	r0, [sp, #4]
 8009782:	f7fe f839 	bl	80077f8 <_Bfree>
 8009786:	464c      	mov	r4, r9
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009790:	6122      	str	r2, [r4, #16]
 8009792:	2201      	movs	r2, #1
 8009794:	615a      	str	r2, [r3, #20]
 8009796:	e7be      	b.n	8009716 <__gethex+0x362>
 8009798:	6922      	ldr	r2, [r4, #16]
 800979a:	455a      	cmp	r2, fp
 800979c:	dd0b      	ble.n	80097b6 <__gethex+0x402>
 800979e:	2101      	movs	r1, #1
 80097a0:	4620      	mov	r0, r4
 80097a2:	f7ff fd9f 	bl	80092e4 <rshift>
 80097a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097aa:	3701      	adds	r7, #1
 80097ac:	42bb      	cmp	r3, r7
 80097ae:	f6ff aee0 	blt.w	8009572 <__gethex+0x1be>
 80097b2:	2501      	movs	r5, #1
 80097b4:	e7c2      	b.n	800973c <__gethex+0x388>
 80097b6:	f016 061f 	ands.w	r6, r6, #31
 80097ba:	d0fa      	beq.n	80097b2 <__gethex+0x3fe>
 80097bc:	4453      	add	r3, sl
 80097be:	f1c6 0620 	rsb	r6, r6, #32
 80097c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097c6:	f7fe f8c9 	bl	800795c <__hi0bits>
 80097ca:	42b0      	cmp	r0, r6
 80097cc:	dbe7      	blt.n	800979e <__gethex+0x3ea>
 80097ce:	e7f0      	b.n	80097b2 <__gethex+0x3fe>
 80097d0:	0800a643 	.word	0x0800a643

080097d4 <L_shift>:
 80097d4:	f1c2 0208 	rsb	r2, r2, #8
 80097d8:	0092      	lsls	r2, r2, #2
 80097da:	b570      	push	{r4, r5, r6, lr}
 80097dc:	f1c2 0620 	rsb	r6, r2, #32
 80097e0:	6843      	ldr	r3, [r0, #4]
 80097e2:	6804      	ldr	r4, [r0, #0]
 80097e4:	fa03 f506 	lsl.w	r5, r3, r6
 80097e8:	432c      	orrs	r4, r5
 80097ea:	40d3      	lsrs	r3, r2
 80097ec:	6004      	str	r4, [r0, #0]
 80097ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80097f2:	4288      	cmp	r0, r1
 80097f4:	d3f4      	bcc.n	80097e0 <L_shift+0xc>
 80097f6:	bd70      	pop	{r4, r5, r6, pc}

080097f8 <__match>:
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	6803      	ldr	r3, [r0, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009802:	b914      	cbnz	r4, 800980a <__match+0x12>
 8009804:	6003      	str	r3, [r0, #0]
 8009806:	2001      	movs	r0, #1
 8009808:	bd30      	pop	{r4, r5, pc}
 800980a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009812:	2d19      	cmp	r5, #25
 8009814:	bf98      	it	ls
 8009816:	3220      	addls	r2, #32
 8009818:	42a2      	cmp	r2, r4
 800981a:	d0f0      	beq.n	80097fe <__match+0x6>
 800981c:	2000      	movs	r0, #0
 800981e:	e7f3      	b.n	8009808 <__match+0x10>

08009820 <__hexnan>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	680b      	ldr	r3, [r1, #0]
 8009826:	6801      	ldr	r1, [r0, #0]
 8009828:	115e      	asrs	r6, r3, #5
 800982a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800982e:	f013 031f 	ands.w	r3, r3, #31
 8009832:	b087      	sub	sp, #28
 8009834:	bf18      	it	ne
 8009836:	3604      	addne	r6, #4
 8009838:	2500      	movs	r5, #0
 800983a:	1f37      	subs	r7, r6, #4
 800983c:	4682      	mov	sl, r0
 800983e:	4690      	mov	r8, r2
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	f846 5c04 	str.w	r5, [r6, #-4]
 8009846:	46b9      	mov	r9, r7
 8009848:	463c      	mov	r4, r7
 800984a:	9502      	str	r5, [sp, #8]
 800984c:	46ab      	mov	fp, r5
 800984e:	784a      	ldrb	r2, [r1, #1]
 8009850:	1c4b      	adds	r3, r1, #1
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	b342      	cbz	r2, 80098a8 <__hexnan+0x88>
 8009856:	4610      	mov	r0, r2
 8009858:	9105      	str	r1, [sp, #20]
 800985a:	9204      	str	r2, [sp, #16]
 800985c:	f7ff fd94 	bl	8009388 <__hexdig_fun>
 8009860:	2800      	cmp	r0, #0
 8009862:	d151      	bne.n	8009908 <__hexnan+0xe8>
 8009864:	9a04      	ldr	r2, [sp, #16]
 8009866:	9905      	ldr	r1, [sp, #20]
 8009868:	2a20      	cmp	r2, #32
 800986a:	d818      	bhi.n	800989e <__hexnan+0x7e>
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	459b      	cmp	fp, r3
 8009870:	dd13      	ble.n	800989a <__hexnan+0x7a>
 8009872:	454c      	cmp	r4, r9
 8009874:	d206      	bcs.n	8009884 <__hexnan+0x64>
 8009876:	2d07      	cmp	r5, #7
 8009878:	dc04      	bgt.n	8009884 <__hexnan+0x64>
 800987a:	462a      	mov	r2, r5
 800987c:	4649      	mov	r1, r9
 800987e:	4620      	mov	r0, r4
 8009880:	f7ff ffa8 	bl	80097d4 <L_shift>
 8009884:	4544      	cmp	r4, r8
 8009886:	d952      	bls.n	800992e <__hexnan+0x10e>
 8009888:	2300      	movs	r3, #0
 800988a:	f1a4 0904 	sub.w	r9, r4, #4
 800988e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009892:	f8cd b008 	str.w	fp, [sp, #8]
 8009896:	464c      	mov	r4, r9
 8009898:	461d      	mov	r5, r3
 800989a:	9903      	ldr	r1, [sp, #12]
 800989c:	e7d7      	b.n	800984e <__hexnan+0x2e>
 800989e:	2a29      	cmp	r2, #41	@ 0x29
 80098a0:	d157      	bne.n	8009952 <__hexnan+0x132>
 80098a2:	3102      	adds	r1, #2
 80098a4:	f8ca 1000 	str.w	r1, [sl]
 80098a8:	f1bb 0f00 	cmp.w	fp, #0
 80098ac:	d051      	beq.n	8009952 <__hexnan+0x132>
 80098ae:	454c      	cmp	r4, r9
 80098b0:	d206      	bcs.n	80098c0 <__hexnan+0xa0>
 80098b2:	2d07      	cmp	r5, #7
 80098b4:	dc04      	bgt.n	80098c0 <__hexnan+0xa0>
 80098b6:	462a      	mov	r2, r5
 80098b8:	4649      	mov	r1, r9
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff ff8a 	bl	80097d4 <L_shift>
 80098c0:	4544      	cmp	r4, r8
 80098c2:	d936      	bls.n	8009932 <__hexnan+0x112>
 80098c4:	f1a8 0204 	sub.w	r2, r8, #4
 80098c8:	4623      	mov	r3, r4
 80098ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80098ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80098d2:	429f      	cmp	r7, r3
 80098d4:	d2f9      	bcs.n	80098ca <__hexnan+0xaa>
 80098d6:	1b3b      	subs	r3, r7, r4
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	3304      	adds	r3, #4
 80098de:	3401      	adds	r4, #1
 80098e0:	3e03      	subs	r6, #3
 80098e2:	42b4      	cmp	r4, r6
 80098e4:	bf88      	it	hi
 80098e6:	2304      	movhi	r3, #4
 80098e8:	4443      	add	r3, r8
 80098ea:	2200      	movs	r2, #0
 80098ec:	f843 2b04 	str.w	r2, [r3], #4
 80098f0:	429f      	cmp	r7, r3
 80098f2:	d2fb      	bcs.n	80098ec <__hexnan+0xcc>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	b91b      	cbnz	r3, 8009900 <__hexnan+0xe0>
 80098f8:	4547      	cmp	r7, r8
 80098fa:	d128      	bne.n	800994e <__hexnan+0x12e>
 80098fc:	2301      	movs	r3, #1
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	2005      	movs	r0, #5
 8009902:	b007      	add	sp, #28
 8009904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009908:	3501      	adds	r5, #1
 800990a:	2d08      	cmp	r5, #8
 800990c:	f10b 0b01 	add.w	fp, fp, #1
 8009910:	dd06      	ble.n	8009920 <__hexnan+0x100>
 8009912:	4544      	cmp	r4, r8
 8009914:	d9c1      	bls.n	800989a <__hexnan+0x7a>
 8009916:	2300      	movs	r3, #0
 8009918:	f844 3c04 	str.w	r3, [r4, #-4]
 800991c:	2501      	movs	r5, #1
 800991e:	3c04      	subs	r4, #4
 8009920:	6822      	ldr	r2, [r4, #0]
 8009922:	f000 000f 	and.w	r0, r0, #15
 8009926:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	e7b5      	b.n	800989a <__hexnan+0x7a>
 800992e:	2508      	movs	r5, #8
 8009930:	e7b3      	b.n	800989a <__hexnan+0x7a>
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0dd      	beq.n	80098f4 <__hexnan+0xd4>
 8009938:	f1c3 0320 	rsb	r3, r3, #32
 800993c:	f04f 32ff 	mov.w	r2, #4294967295
 8009940:	40da      	lsrs	r2, r3
 8009942:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009946:	4013      	ands	r3, r2
 8009948:	f846 3c04 	str.w	r3, [r6, #-4]
 800994c:	e7d2      	b.n	80098f4 <__hexnan+0xd4>
 800994e:	3f04      	subs	r7, #4
 8009950:	e7d0      	b.n	80098f4 <__hexnan+0xd4>
 8009952:	2004      	movs	r0, #4
 8009954:	e7d5      	b.n	8009902 <__hexnan+0xe2>

08009956 <__ascii_mbtowc>:
 8009956:	b082      	sub	sp, #8
 8009958:	b901      	cbnz	r1, 800995c <__ascii_mbtowc+0x6>
 800995a:	a901      	add	r1, sp, #4
 800995c:	b142      	cbz	r2, 8009970 <__ascii_mbtowc+0x1a>
 800995e:	b14b      	cbz	r3, 8009974 <__ascii_mbtowc+0x1e>
 8009960:	7813      	ldrb	r3, [r2, #0]
 8009962:	600b      	str	r3, [r1, #0]
 8009964:	7812      	ldrb	r2, [r2, #0]
 8009966:	1e10      	subs	r0, r2, #0
 8009968:	bf18      	it	ne
 800996a:	2001      	movne	r0, #1
 800996c:	b002      	add	sp, #8
 800996e:	4770      	bx	lr
 8009970:	4610      	mov	r0, r2
 8009972:	e7fb      	b.n	800996c <__ascii_mbtowc+0x16>
 8009974:	f06f 0001 	mvn.w	r0, #1
 8009978:	e7f8      	b.n	800996c <__ascii_mbtowc+0x16>

0800997a <_realloc_r>:
 800997a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997e:	4607      	mov	r7, r0
 8009980:	4614      	mov	r4, r2
 8009982:	460d      	mov	r5, r1
 8009984:	b921      	cbnz	r1, 8009990 <_realloc_r+0x16>
 8009986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800998a:	4611      	mov	r1, r2
 800998c:	f7fd be68 	b.w	8007660 <_malloc_r>
 8009990:	b92a      	cbnz	r2, 800999e <_realloc_r+0x24>
 8009992:	f7fd fdf1 	bl	8007578 <_free_r>
 8009996:	4625      	mov	r5, r4
 8009998:	4628      	mov	r0, r5
 800999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999e:	f000 f840 	bl	8009a22 <_malloc_usable_size_r>
 80099a2:	4284      	cmp	r4, r0
 80099a4:	4606      	mov	r6, r0
 80099a6:	d802      	bhi.n	80099ae <_realloc_r+0x34>
 80099a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099ac:	d8f4      	bhi.n	8009998 <_realloc_r+0x1e>
 80099ae:	4621      	mov	r1, r4
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7fd fe55 	bl	8007660 <_malloc_r>
 80099b6:	4680      	mov	r8, r0
 80099b8:	b908      	cbnz	r0, 80099be <_realloc_r+0x44>
 80099ba:	4645      	mov	r5, r8
 80099bc:	e7ec      	b.n	8009998 <_realloc_r+0x1e>
 80099be:	42b4      	cmp	r4, r6
 80099c0:	4622      	mov	r2, r4
 80099c2:	4629      	mov	r1, r5
 80099c4:	bf28      	it	cs
 80099c6:	4632      	movcs	r2, r6
 80099c8:	f7ff fc44 	bl	8009254 <memcpy>
 80099cc:	4629      	mov	r1, r5
 80099ce:	4638      	mov	r0, r7
 80099d0:	f7fd fdd2 	bl	8007578 <_free_r>
 80099d4:	e7f1      	b.n	80099ba <_realloc_r+0x40>

080099d6 <__ascii_wctomb>:
 80099d6:	4603      	mov	r3, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	b141      	cbz	r1, 80099ee <__ascii_wctomb+0x18>
 80099dc:	2aff      	cmp	r2, #255	@ 0xff
 80099de:	d904      	bls.n	80099ea <__ascii_wctomb+0x14>
 80099e0:	228a      	movs	r2, #138	@ 0x8a
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	4770      	bx	lr
 80099ea:	700a      	strb	r2, [r1, #0]
 80099ec:	2001      	movs	r0, #1
 80099ee:	4770      	bx	lr

080099f0 <fiprintf>:
 80099f0:	b40e      	push	{r1, r2, r3}
 80099f2:	b503      	push	{r0, r1, lr}
 80099f4:	4601      	mov	r1, r0
 80099f6:	ab03      	add	r3, sp, #12
 80099f8:	4805      	ldr	r0, [pc, #20]	@ (8009a10 <fiprintf+0x20>)
 80099fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fe:	6800      	ldr	r0, [r0, #0]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	f000 f83f 	bl	8009a84 <_vfiprintf_r>
 8009a06:	b002      	add	sp, #8
 8009a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a0c:	b003      	add	sp, #12
 8009a0e:	4770      	bx	lr
 8009a10:	2000007c 	.word	0x2000007c

08009a14 <abort>:
 8009a14:	b508      	push	{r3, lr}
 8009a16:	2006      	movs	r0, #6
 8009a18:	f000 fa08 	bl	8009e2c <raise>
 8009a1c:	2001      	movs	r0, #1
 8009a1e:	f7f7 ff7e 	bl	800191e <_exit>

08009a22 <_malloc_usable_size_r>:
 8009a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a26:	1f18      	subs	r0, r3, #4
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	bfbc      	itt	lt
 8009a2c:	580b      	ldrlt	r3, [r1, r0]
 8009a2e:	18c0      	addlt	r0, r0, r3
 8009a30:	4770      	bx	lr

08009a32 <__sfputc_r>:
 8009a32:	6893      	ldr	r3, [r2, #8]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	b410      	push	{r4}
 8009a3a:	6093      	str	r3, [r2, #8]
 8009a3c:	da08      	bge.n	8009a50 <__sfputc_r+0x1e>
 8009a3e:	6994      	ldr	r4, [r2, #24]
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	db01      	blt.n	8009a48 <__sfputc_r+0x16>
 8009a44:	290a      	cmp	r1, #10
 8009a46:	d103      	bne.n	8009a50 <__sfputc_r+0x1e>
 8009a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a4c:	f000 b932 	b.w	8009cb4 <__swbuf_r>
 8009a50:	6813      	ldr	r3, [r2, #0]
 8009a52:	1c58      	adds	r0, r3, #1
 8009a54:	6010      	str	r0, [r2, #0]
 8009a56:	7019      	strb	r1, [r3, #0]
 8009a58:	4608      	mov	r0, r1
 8009a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <__sfputs_r>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	4606      	mov	r6, r0
 8009a64:	460f      	mov	r7, r1
 8009a66:	4614      	mov	r4, r2
 8009a68:	18d5      	adds	r5, r2, r3
 8009a6a:	42ac      	cmp	r4, r5
 8009a6c:	d101      	bne.n	8009a72 <__sfputs_r+0x12>
 8009a6e:	2000      	movs	r0, #0
 8009a70:	e007      	b.n	8009a82 <__sfputs_r+0x22>
 8009a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a76:	463a      	mov	r2, r7
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff ffda 	bl	8009a32 <__sfputc_r>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d1f3      	bne.n	8009a6a <__sfputs_r+0xa>
 8009a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a84 <_vfiprintf_r>:
 8009a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	460d      	mov	r5, r1
 8009a8a:	b09d      	sub	sp, #116	@ 0x74
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	4698      	mov	r8, r3
 8009a90:	4606      	mov	r6, r0
 8009a92:	b118      	cbz	r0, 8009a9c <_vfiprintf_r+0x18>
 8009a94:	6a03      	ldr	r3, [r0, #32]
 8009a96:	b90b      	cbnz	r3, 8009a9c <_vfiprintf_r+0x18>
 8009a98:	f7fc fde6 	bl	8006668 <__sinit>
 8009a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a9e:	07d9      	lsls	r1, r3, #31
 8009aa0:	d405      	bmi.n	8009aae <_vfiprintf_r+0x2a>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	059a      	lsls	r2, r3, #22
 8009aa6:	d402      	bmi.n	8009aae <_vfiprintf_r+0x2a>
 8009aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aaa:	f7fc ff04 	bl	80068b6 <__retarget_lock_acquire_recursive>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	071b      	lsls	r3, r3, #28
 8009ab2:	d501      	bpl.n	8009ab8 <_vfiprintf_r+0x34>
 8009ab4:	692b      	ldr	r3, [r5, #16]
 8009ab6:	b99b      	cbnz	r3, 8009ae0 <_vfiprintf_r+0x5c>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 f938 	bl	8009d30 <__swsetup_r>
 8009ac0:	b170      	cbz	r0, 8009ae0 <_vfiprintf_r+0x5c>
 8009ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ac4:	07dc      	lsls	r4, r3, #31
 8009ac6:	d504      	bpl.n	8009ad2 <_vfiprintf_r+0x4e>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	b01d      	add	sp, #116	@ 0x74
 8009ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	0598      	lsls	r0, r3, #22
 8009ad6:	d4f7      	bmi.n	8009ac8 <_vfiprintf_r+0x44>
 8009ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ada:	f7fc feed 	bl	80068b8 <__retarget_lock_release_recursive>
 8009ade:	e7f3      	b.n	8009ac8 <_vfiprintf_r+0x44>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aee:	2330      	movs	r3, #48	@ 0x30
 8009af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ca0 <_vfiprintf_r+0x21c>
 8009af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009af8:	f04f 0901 	mov.w	r9, #1
 8009afc:	4623      	mov	r3, r4
 8009afe:	469a      	mov	sl, r3
 8009b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b04:	b10a      	cbz	r2, 8009b0a <_vfiprintf_r+0x86>
 8009b06:	2a25      	cmp	r2, #37	@ 0x25
 8009b08:	d1f9      	bne.n	8009afe <_vfiprintf_r+0x7a>
 8009b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b0e:	d00b      	beq.n	8009b28 <_vfiprintf_r+0xa4>
 8009b10:	465b      	mov	r3, fp
 8009b12:	4622      	mov	r2, r4
 8009b14:	4629      	mov	r1, r5
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff ffa2 	bl	8009a60 <__sfputs_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f000 80a7 	beq.w	8009c70 <_vfiprintf_r+0x1ec>
 8009b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b24:	445a      	add	r2, fp
 8009b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 809f 	beq.w	8009c70 <_vfiprintf_r+0x1ec>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f04f 32ff 	mov.w	r2, #4294967295
 8009b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b3c:	f10a 0a01 	add.w	sl, sl, #1
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b4a:	4654      	mov	r4, sl
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	4853      	ldr	r0, [pc, #332]	@ (8009ca0 <_vfiprintf_r+0x21c>)
 8009b54:	f7f6 fb54 	bl	8000200 <memchr>
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	b9d8      	cbnz	r0, 8009b94 <_vfiprintf_r+0x110>
 8009b5c:	06d1      	lsls	r1, r2, #27
 8009b5e:	bf44      	itt	mi
 8009b60:	2320      	movmi	r3, #32
 8009b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b66:	0713      	lsls	r3, r2, #28
 8009b68:	bf44      	itt	mi
 8009b6a:	232b      	movmi	r3, #43	@ 0x2b
 8009b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b70:	f89a 3000 	ldrb.w	r3, [sl]
 8009b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b76:	d015      	beq.n	8009ba4 <_vfiprintf_r+0x120>
 8009b78:	9a07      	ldr	r2, [sp, #28]
 8009b7a:	4654      	mov	r4, sl
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f04f 0c0a 	mov.w	ip, #10
 8009b82:	4621      	mov	r1, r4
 8009b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b88:	3b30      	subs	r3, #48	@ 0x30
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d94b      	bls.n	8009c26 <_vfiprintf_r+0x1a2>
 8009b8e:	b1b0      	cbz	r0, 8009bbe <_vfiprintf_r+0x13a>
 8009b90:	9207      	str	r2, [sp, #28]
 8009b92:	e014      	b.n	8009bbe <_vfiprintf_r+0x13a>
 8009b94:	eba0 0308 	sub.w	r3, r0, r8
 8009b98:	fa09 f303 	lsl.w	r3, r9, r3
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	46a2      	mov	sl, r4
 8009ba2:	e7d2      	b.n	8009b4a <_vfiprintf_r+0xc6>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	1d19      	adds	r1, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	9103      	str	r1, [sp, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfbb      	ittet	lt
 8009bb0:	425b      	neglt	r3, r3
 8009bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8009bb6:	9307      	strge	r3, [sp, #28]
 8009bb8:	9307      	strlt	r3, [sp, #28]
 8009bba:	bfb8      	it	lt
 8009bbc:	9204      	strlt	r2, [sp, #16]
 8009bbe:	7823      	ldrb	r3, [r4, #0]
 8009bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bc2:	d10a      	bne.n	8009bda <_vfiprintf_r+0x156>
 8009bc4:	7863      	ldrb	r3, [r4, #1]
 8009bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bc8:	d132      	bne.n	8009c30 <_vfiprintf_r+0x1ac>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	9203      	str	r2, [sp, #12]
 8009bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bd6:	3402      	adds	r4, #2
 8009bd8:	9305      	str	r3, [sp, #20]
 8009bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cb0 <_vfiprintf_r+0x22c>
 8009bde:	7821      	ldrb	r1, [r4, #0]
 8009be0:	2203      	movs	r2, #3
 8009be2:	4650      	mov	r0, sl
 8009be4:	f7f6 fb0c 	bl	8000200 <memchr>
 8009be8:	b138      	cbz	r0, 8009bfa <_vfiprintf_r+0x176>
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	eba0 000a 	sub.w	r0, r0, sl
 8009bf0:	2240      	movs	r2, #64	@ 0x40
 8009bf2:	4082      	lsls	r2, r0
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfe:	4829      	ldr	r0, [pc, #164]	@ (8009ca4 <_vfiprintf_r+0x220>)
 8009c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c04:	2206      	movs	r2, #6
 8009c06:	f7f6 fafb 	bl	8000200 <memchr>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d03f      	beq.n	8009c8e <_vfiprintf_r+0x20a>
 8009c0e:	4b26      	ldr	r3, [pc, #152]	@ (8009ca8 <_vfiprintf_r+0x224>)
 8009c10:	bb1b      	cbnz	r3, 8009c5a <_vfiprintf_r+0x1d6>
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	3307      	adds	r3, #7
 8009c16:	f023 0307 	bic.w	r3, r3, #7
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c20:	443b      	add	r3, r7
 8009c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c24:	e76a      	b.n	8009afc <_vfiprintf_r+0x78>
 8009c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	e7a8      	b.n	8009b82 <_vfiprintf_r+0xfe>
 8009c30:	2300      	movs	r3, #0
 8009c32:	3401      	adds	r4, #1
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	4619      	mov	r1, r3
 8009c38:	f04f 0c0a 	mov.w	ip, #10
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c42:	3a30      	subs	r2, #48	@ 0x30
 8009c44:	2a09      	cmp	r2, #9
 8009c46:	d903      	bls.n	8009c50 <_vfiprintf_r+0x1cc>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0c6      	beq.n	8009bda <_vfiprintf_r+0x156>
 8009c4c:	9105      	str	r1, [sp, #20]
 8009c4e:	e7c4      	b.n	8009bda <_vfiprintf_r+0x156>
 8009c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c54:	4604      	mov	r4, r0
 8009c56:	2301      	movs	r3, #1
 8009c58:	e7f0      	b.n	8009c3c <_vfiprintf_r+0x1b8>
 8009c5a:	ab03      	add	r3, sp, #12
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	462a      	mov	r2, r5
 8009c60:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <_vfiprintf_r+0x228>)
 8009c62:	a904      	add	r1, sp, #16
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7fb feaf 	bl	80059c8 <_printf_float>
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	1c78      	adds	r0, r7, #1
 8009c6e:	d1d6      	bne.n	8009c1e <_vfiprintf_r+0x19a>
 8009c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c72:	07d9      	lsls	r1, r3, #31
 8009c74:	d405      	bmi.n	8009c82 <_vfiprintf_r+0x1fe>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	059a      	lsls	r2, r3, #22
 8009c7a:	d402      	bmi.n	8009c82 <_vfiprintf_r+0x1fe>
 8009c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c7e:	f7fc fe1b 	bl	80068b8 <__retarget_lock_release_recursive>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	065b      	lsls	r3, r3, #25
 8009c86:	f53f af1f 	bmi.w	8009ac8 <_vfiprintf_r+0x44>
 8009c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c8c:	e71e      	b.n	8009acc <_vfiprintf_r+0x48>
 8009c8e:	ab03      	add	r3, sp, #12
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	462a      	mov	r2, r5
 8009c94:	4b05      	ldr	r3, [pc, #20]	@ (8009cac <_vfiprintf_r+0x228>)
 8009c96:	a904      	add	r1, sp, #16
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7fc f92d 	bl	8005ef8 <_printf_i>
 8009c9e:	e7e4      	b.n	8009c6a <_vfiprintf_r+0x1e6>
 8009ca0:	0800a6af 	.word	0x0800a6af
 8009ca4:	0800a6b9 	.word	0x0800a6b9
 8009ca8:	080059c9 	.word	0x080059c9
 8009cac:	08009a61 	.word	0x08009a61
 8009cb0:	0800a6b5 	.word	0x0800a6b5

08009cb4 <__swbuf_r>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	4605      	mov	r5, r0
 8009cbc:	b118      	cbz	r0, 8009cc6 <__swbuf_r+0x12>
 8009cbe:	6a03      	ldr	r3, [r0, #32]
 8009cc0:	b90b      	cbnz	r3, 8009cc6 <__swbuf_r+0x12>
 8009cc2:	f7fc fcd1 	bl	8006668 <__sinit>
 8009cc6:	69a3      	ldr	r3, [r4, #24]
 8009cc8:	60a3      	str	r3, [r4, #8]
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	071a      	lsls	r2, r3, #28
 8009cce:	d501      	bpl.n	8009cd4 <__swbuf_r+0x20>
 8009cd0:	6923      	ldr	r3, [r4, #16]
 8009cd2:	b943      	cbnz	r3, 8009ce6 <__swbuf_r+0x32>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f82a 	bl	8009d30 <__swsetup_r>
 8009cdc:	b118      	cbz	r0, 8009ce6 <__swbuf_r+0x32>
 8009cde:	f04f 37ff 	mov.w	r7, #4294967295
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	6922      	ldr	r2, [r4, #16]
 8009cea:	1a98      	subs	r0, r3, r2
 8009cec:	6963      	ldr	r3, [r4, #20]
 8009cee:	b2f6      	uxtb	r6, r6
 8009cf0:	4283      	cmp	r3, r0
 8009cf2:	4637      	mov	r7, r6
 8009cf4:	dc05      	bgt.n	8009d02 <__swbuf_r+0x4e>
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	f7ff fa47 	bl	800918c <_fflush_r>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d1ed      	bne.n	8009cde <__swbuf_r+0x2a>
 8009d02:	68a3      	ldr	r3, [r4, #8]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	6022      	str	r2, [r4, #0]
 8009d0e:	701e      	strb	r6, [r3, #0]
 8009d10:	6962      	ldr	r2, [r4, #20]
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d004      	beq.n	8009d22 <__swbuf_r+0x6e>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	07db      	lsls	r3, r3, #31
 8009d1c:	d5e1      	bpl.n	8009ce2 <__swbuf_r+0x2e>
 8009d1e:	2e0a      	cmp	r6, #10
 8009d20:	d1df      	bne.n	8009ce2 <__swbuf_r+0x2e>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f7ff fa31 	bl	800918c <_fflush_r>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d0d9      	beq.n	8009ce2 <__swbuf_r+0x2e>
 8009d2e:	e7d6      	b.n	8009cde <__swbuf_r+0x2a>

08009d30 <__swsetup_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4b29      	ldr	r3, [pc, #164]	@ (8009dd8 <__swsetup_r+0xa8>)
 8009d34:	4605      	mov	r5, r0
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	460c      	mov	r4, r1
 8009d3a:	b118      	cbz	r0, 8009d44 <__swsetup_r+0x14>
 8009d3c:	6a03      	ldr	r3, [r0, #32]
 8009d3e:	b90b      	cbnz	r3, 8009d44 <__swsetup_r+0x14>
 8009d40:	f7fc fc92 	bl	8006668 <__sinit>
 8009d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d48:	0719      	lsls	r1, r3, #28
 8009d4a:	d422      	bmi.n	8009d92 <__swsetup_r+0x62>
 8009d4c:	06da      	lsls	r2, r3, #27
 8009d4e:	d407      	bmi.n	8009d60 <__swsetup_r+0x30>
 8009d50:	2209      	movs	r2, #9
 8009d52:	602a      	str	r2, [r5, #0]
 8009d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5e:	e033      	b.n	8009dc8 <__swsetup_r+0x98>
 8009d60:	0758      	lsls	r0, r3, #29
 8009d62:	d512      	bpl.n	8009d8a <__swsetup_r+0x5a>
 8009d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d66:	b141      	cbz	r1, 8009d7a <__swsetup_r+0x4a>
 8009d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	d002      	beq.n	8009d76 <__swsetup_r+0x46>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7fd fc01 	bl	8007578 <_free_r>
 8009d76:	2300      	movs	r3, #0
 8009d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	2300      	movs	r3, #0
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f043 0308 	orr.w	r3, r3, #8
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	b94b      	cbnz	r3, 8009daa <__swsetup_r+0x7a>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da0:	d003      	beq.n	8009daa <__swsetup_r+0x7a>
 8009da2:	4621      	mov	r1, r4
 8009da4:	4628      	mov	r0, r5
 8009da6:	f000 f883 	bl	8009eb0 <__smakebuf_r>
 8009daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dae:	f013 0201 	ands.w	r2, r3, #1
 8009db2:	d00a      	beq.n	8009dca <__swsetup_r+0x9a>
 8009db4:	2200      	movs	r2, #0
 8009db6:	60a2      	str	r2, [r4, #8]
 8009db8:	6962      	ldr	r2, [r4, #20]
 8009dba:	4252      	negs	r2, r2
 8009dbc:	61a2      	str	r2, [r4, #24]
 8009dbe:	6922      	ldr	r2, [r4, #16]
 8009dc0:	b942      	cbnz	r2, 8009dd4 <__swsetup_r+0xa4>
 8009dc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dc6:	d1c5      	bne.n	8009d54 <__swsetup_r+0x24>
 8009dc8:	bd38      	pop	{r3, r4, r5, pc}
 8009dca:	0799      	lsls	r1, r3, #30
 8009dcc:	bf58      	it	pl
 8009dce:	6962      	ldrpl	r2, [r4, #20]
 8009dd0:	60a2      	str	r2, [r4, #8]
 8009dd2:	e7f4      	b.n	8009dbe <__swsetup_r+0x8e>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e7f7      	b.n	8009dc8 <__swsetup_r+0x98>
 8009dd8:	2000007c 	.word	0x2000007c

08009ddc <_raise_r>:
 8009ddc:	291f      	cmp	r1, #31
 8009dde:	b538      	push	{r3, r4, r5, lr}
 8009de0:	4605      	mov	r5, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	d904      	bls.n	8009df0 <_raise_r+0x14>
 8009de6:	2316      	movs	r3, #22
 8009de8:	6003      	str	r3, [r0, #0]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009df2:	b112      	cbz	r2, 8009dfa <_raise_r+0x1e>
 8009df4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009df8:	b94b      	cbnz	r3, 8009e0e <_raise_r+0x32>
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f000 f830 	bl	8009e60 <_getpid_r>
 8009e00:	4622      	mov	r2, r4
 8009e02:	4601      	mov	r1, r0
 8009e04:	4628      	mov	r0, r5
 8009e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e0a:	f000 b817 	b.w	8009e3c <_kill_r>
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d00a      	beq.n	8009e28 <_raise_r+0x4c>
 8009e12:	1c59      	adds	r1, r3, #1
 8009e14:	d103      	bne.n	8009e1e <_raise_r+0x42>
 8009e16:	2316      	movs	r3, #22
 8009e18:	6003      	str	r3, [r0, #0]
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	e7e7      	b.n	8009dee <_raise_r+0x12>
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e24:	4620      	mov	r0, r4
 8009e26:	4798      	blx	r3
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e7e0      	b.n	8009dee <_raise_r+0x12>

08009e2c <raise>:
 8009e2c:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <raise+0xc>)
 8009e2e:	4601      	mov	r1, r0
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	f7ff bfd3 	b.w	8009ddc <_raise_r>
 8009e36:	bf00      	nop
 8009e38:	2000007c 	.word	0x2000007c

08009e3c <_kill_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d07      	ldr	r5, [pc, #28]	@ (8009e5c <_kill_r+0x20>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	f7f7 fd58 	bl	80018fe <_kill>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	d102      	bne.n	8009e58 <_kill_r+0x1c>
 8009e52:	682b      	ldr	r3, [r5, #0]
 8009e54:	b103      	cbz	r3, 8009e58 <_kill_r+0x1c>
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	200004d8 	.word	0x200004d8

08009e60 <_getpid_r>:
 8009e60:	f7f7 bd45 	b.w	80018ee <_getpid>

08009e64 <__swhatbuf_r>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	460c      	mov	r4, r1
 8009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	b096      	sub	sp, #88	@ 0x58
 8009e70:	4615      	mov	r5, r2
 8009e72:	461e      	mov	r6, r3
 8009e74:	da0d      	bge.n	8009e92 <__swhatbuf_r+0x2e>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e7c:	f04f 0100 	mov.w	r1, #0
 8009e80:	bf14      	ite	ne
 8009e82:	2340      	movne	r3, #64	@ 0x40
 8009e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e88:	2000      	movs	r0, #0
 8009e8a:	6031      	str	r1, [r6, #0]
 8009e8c:	602b      	str	r3, [r5, #0]
 8009e8e:	b016      	add	sp, #88	@ 0x58
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	466a      	mov	r2, sp
 8009e94:	f000 f848 	bl	8009f28 <_fstat_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	dbec      	blt.n	8009e76 <__swhatbuf_r+0x12>
 8009e9c:	9901      	ldr	r1, [sp, #4]
 8009e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ea6:	4259      	negs	r1, r3
 8009ea8:	4159      	adcs	r1, r3
 8009eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eae:	e7eb      	b.n	8009e88 <__swhatbuf_r+0x24>

08009eb0 <__smakebuf_r>:
 8009eb0:	898b      	ldrh	r3, [r1, #12]
 8009eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eb4:	079d      	lsls	r5, r3, #30
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460c      	mov	r4, r1
 8009eba:	d507      	bpl.n	8009ecc <__smakebuf_r+0x1c>
 8009ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	6163      	str	r3, [r4, #20]
 8009ec8:	b003      	add	sp, #12
 8009eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ecc:	ab01      	add	r3, sp, #4
 8009ece:	466a      	mov	r2, sp
 8009ed0:	f7ff ffc8 	bl	8009e64 <__swhatbuf_r>
 8009ed4:	9f00      	ldr	r7, [sp, #0]
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	4639      	mov	r1, r7
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7fd fbc0 	bl	8007660 <_malloc_r>
 8009ee0:	b948      	cbnz	r0, 8009ef6 <__smakebuf_r+0x46>
 8009ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee6:	059a      	lsls	r2, r3, #22
 8009ee8:	d4ee      	bmi.n	8009ec8 <__smakebuf_r+0x18>
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	f043 0302 	orr.w	r3, r3, #2
 8009ef2:	81a3      	strh	r3, [r4, #12]
 8009ef4:	e7e2      	b.n	8009ebc <__smakebuf_r+0xc>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	6020      	str	r0, [r4, #0]
 8009efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	9b01      	ldr	r3, [sp, #4]
 8009f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f06:	b15b      	cbz	r3, 8009f20 <__smakebuf_r+0x70>
 8009f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f000 f81d 	bl	8009f4c <_isatty_r>
 8009f12:	b128      	cbz	r0, 8009f20 <__smakebuf_r+0x70>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	431d      	orrs	r5, r3
 8009f24:	81a5      	strh	r5, [r4, #12]
 8009f26:	e7cf      	b.n	8009ec8 <__smakebuf_r+0x18>

08009f28 <_fstat_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	@ (8009f48 <_fstat_r+0x20>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f7 fd42 	bl	80019be <_fstat>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_fstat_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_fstat_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	200004d8 	.word	0x200004d8

08009f4c <_isatty_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d06      	ldr	r5, [pc, #24]	@ (8009f68 <_isatty_r+0x1c>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f7 fd41 	bl	80019de <_isatty>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_isatty_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_isatty_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	200004d8 	.word	0x200004d8

08009f6c <_init>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr

08009f78 <_fini>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr
